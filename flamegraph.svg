<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="374" onload="init(evt)" viewBox="0 0 1200 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="374" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="357.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="357.00"> </text><svg id="frames" x="10" width="1180" total_samples="3337"><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (1 samples, 0.03%)</title><rect x="0.0000%" y="229" width="0.0300%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (3 samples, 0.09%)</title><rect x="0.0300%" y="229" width="0.0899%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="3"/><text x="0.2800%" y="239.50"></text></g><g><title>nn`&lt;T as core::any::Any&gt;::type_id (1 samples, 0.03%)</title><rect x="0.1199%" y="229" width="0.0300%" height="15" fill="rgb(221,193,54)" fg:x="4" fg:w="1"/><text x="0.3699%" y="239.50"></text></g><g><title>nn`&lt;tensor_rs::TensorBase&lt;S,A&gt; as tensor_rs::impl_reduce_ops::ReduceOps&gt;::sum (1 samples, 0.03%)</title><rect x="0.1498%" y="229" width="0.0300%" height="15" fill="rgb(248,212,6)" fg:x="5" fg:w="1"/><text x="0.3998%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (1 samples, 0.03%)</title><rect x="0.8091%" y="213" width="0.0300%" height="15" fill="rgb(208,68,35)" fg:x="27" fg:w="1"/><text x="1.0591%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (1 samples, 0.03%)</title><rect x="0.8091%" y="197" width="0.0300%" height="15" fill="rgb(232,128,0)" fg:x="27" fg:w="1"/><text x="1.0591%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.03%)</title><rect x="0.8091%" y="181" width="0.0300%" height="15" fill="rgb(207,160,47)" fg:x="27" fg:w="1"/><text x="1.0591%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.03%)</title><rect x="0.8091%" y="165" width="0.0300%" height="15" fill="rgb(228,23,34)" fg:x="27" fg:w="1"/><text x="1.0591%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (1 samples, 0.03%)</title><rect x="0.8391%" y="213" width="0.0300%" height="15" fill="rgb(218,30,26)" fg:x="28" fg:w="1"/><text x="1.0891%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (7 samples, 0.21%)</title><rect x="1.1987%" y="197" width="0.2098%" height="15" fill="rgb(220,122,19)" fg:x="40" fg:w="7"/><text x="1.4487%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (19 samples, 0.57%)</title><rect x="0.8690%" y="213" width="0.5694%" height="15" fill="rgb(250,228,42)" fg:x="29" fg:w="19"/><text x="1.1190%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.03%)</title><rect x="1.4085%" y="197" width="0.0300%" height="15" fill="rgb(240,193,28)" fg:x="47" fg:w="1"/><text x="1.6585%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.03%)</title><rect x="1.4085%" y="181" width="0.0300%" height="15" fill="rgb(216,20,37)" fg:x="47" fg:w="1"/><text x="1.6585%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.03%)</title><rect x="1.4684%" y="181" width="0.0300%" height="15" fill="rgb(206,188,39)" fg:x="49" fg:w="1"/><text x="1.7184%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (3 samples, 0.09%)</title><rect x="1.4384%" y="213" width="0.0899%" height="15" fill="rgb(217,207,13)" fg:x="48" fg:w="3"/><text x="1.6884%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (3 samples, 0.09%)</title><rect x="1.4384%" y="197" width="0.0899%" height="15" fill="rgb(231,73,38)" fg:x="48" fg:w="3"/><text x="1.6884%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.03%)</title><rect x="1.4984%" y="181" width="0.0300%" height="15" fill="rgb(225,20,46)" fg:x="50" fg:w="1"/><text x="1.7484%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.03%)</title><rect x="1.5283%" y="213" width="0.0300%" height="15" fill="rgb(210,31,41)" fg:x="51" fg:w="1"/><text x="1.7783%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (2 samples, 0.06%)</title><rect x="1.5583%" y="213" width="0.0599%" height="15" fill="rgb(221,200,47)" fg:x="52" fg:w="2"/><text x="1.8083%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset_pattern16 (3 samples, 0.09%)</title><rect x="1.6182%" y="213" width="0.0899%" height="15" fill="rgb(226,26,5)" fg:x="54" fg:w="3"/><text x="1.8682%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (12 samples, 0.36%)</title><rect x="1.8280%" y="197" width="0.3596%" height="15" fill="rgb(249,33,26)" fg:x="61" fg:w="12"/><text x="2.0780%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (6 samples, 0.18%)</title><rect x="2.0078%" y="181" width="0.1798%" height="15" fill="rgb(235,183,28)" fg:x="67" fg:w="6"/><text x="2.2578%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (3 samples, 0.09%)</title><rect x="2.1876%" y="197" width="0.0899%" height="15" fill="rgb(221,5,38)" fg:x="73" fg:w="3"/><text x="2.4376%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (2 samples, 0.06%)</title><rect x="2.2775%" y="197" width="0.0599%" height="15" fill="rgb(247,18,42)" fg:x="76" fg:w="2"/><text x="2.5275%" y="207.50"></text></g><g><title>nn`DYLD-STUB$$free (1 samples, 0.03%)</title><rect x="2.3374%" y="197" width="0.0300%" height="15" fill="rgb(241,131,45)" fg:x="78" fg:w="1"/><text x="2.5874%" y="207.50"></text></g><g><title> 0]&gt;&gt; (5 samples, 0.15%)</title><rect x="2.3674%" y="181" width="0.1498%" height="15" fill="rgb(249,31,29)" fg:x="79" fg:w="5"/><text x="2.6174%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.06%)</title><rect x="2.4573%" y="165" width="0.0599%" height="15" fill="rgb(225,111,53)" fg:x="82" fg:w="2"/><text x="2.7073%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.03%)</title><rect x="2.4873%" y="149" width="0.0300%" height="15" fill="rgb(238,160,17)" fg:x="83" fg:w="1"/><text x="2.7373%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (10 samples, 0.30%)</title><rect x="2.8768%" y="149" width="0.2997%" height="15" fill="rgb(214,148,48)" fg:x="96" fg:w="10"/><text x="3.1268%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (22 samples, 0.66%)</title><rect x="2.5772%" y="165" width="0.6593%" height="15" fill="rgb(232,36,49)" fg:x="86" fg:w="22"/><text x="2.8272%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_size (2 samples, 0.06%)</title><rect x="3.1765%" y="149" width="0.0599%" height="15" fill="rgb(209,103,24)" fg:x="106" fg:w="2"/><text x="3.4265%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_small (3 samples, 0.09%)</title><rect x="3.2364%" y="165" width="0.0899%" height="15" fill="rgb(229,88,8)" fg:x="108" fg:w="3"/><text x="3.4864%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (2 samples, 0.06%)</title><rect x="3.2664%" y="149" width="0.0599%" height="15" fill="rgb(213,181,19)" fg:x="109" fg:w="2"/><text x="3.5164%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (6 samples, 0.18%)</title><rect x="3.3263%" y="165" width="0.1798%" height="15" fill="rgb(254,191,54)" fg:x="111" fg:w="6"/><text x="3.5763%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.03%)</title><rect x="3.5061%" y="165" width="0.0300%" height="15" fill="rgb(241,83,37)" fg:x="117" fg:w="1"/><text x="3.7561%" y="175.50"></text></g><g><title>nn`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (62 samples, 1.86%)</title><rect x="1.7081%" y="213" width="1.8580%" height="15" fill="rgb(233,36,39)" fg:x="57" fg:w="62"/><text x="1.9581%" y="223.50">n..</text></g><g><title>nn`core::ptr::drop_in_place&lt;tensor_rs::TensorBase&lt;[usize (40 samples, 1.20%)</title><rect x="2.3674%" y="197" width="1.1987%" height="15" fill="rgb(226,3,54)" fg:x="79" fg:w="40"/><text x="2.6174%" y="207.50"></text></g><g><title> 2]&gt;&gt; (35 samples, 1.05%)</title><rect x="2.5172%" y="181" width="1.0488%" height="15" fill="rgb(245,192,40)" fg:x="84" fg:w="35"/><text x="2.7672%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.03%)</title><rect x="3.5361%" y="165" width="0.0300%" height="15" fill="rgb(238,167,29)" fg:x="118" fg:w="1"/><text x="3.7861%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.09%)</title><rect x="3.5960%" y="197" width="0.0899%" height="15" fill="rgb(232,182,51)" fg:x="120" fg:w="3"/><text x="3.8460%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.09%)</title><rect x="3.5960%" y="181" width="0.0899%" height="15" fill="rgb(231,60,39)" fg:x="120" fg:w="3"/><text x="3.8460%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.09%)</title><rect x="3.5960%" y="165" width="0.0899%" height="15" fill="rgb(208,69,12)" fg:x="120" fg:w="3"/><text x="3.8460%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.06%)</title><rect x="3.6260%" y="149" width="0.0599%" height="15" fill="rgb(235,93,37)" fg:x="121" fg:w="2"/><text x="3.8760%" y="159.50"></text></g><g><title>nn`&lt;core::option::Option&lt;tensor_rs::gradient::BackwardOps&gt; as tensor_rs::gradient::Merge&gt;::merge (1 samples, 0.03%)</title><rect x="3.6859%" y="197" width="0.0300%" height="15" fill="rgb(213,116,39)" fg:x="123" fg:w="1"/><text x="3.9359%" y="207.50"></text></g><g><title>nn`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.03%)</title><rect x="3.7159%" y="197" width="0.0300%" height="15" fill="rgb(222,207,29)" fg:x="124" fg:w="1"/><text x="3.9659%" y="207.50"></text></g><g><title>nn`alloc::raw_vec::finish_grow (1 samples, 0.03%)</title><rect x="3.7159%" y="181" width="0.0300%" height="15" fill="rgb(206,96,30)" fg:x="124" fg:w="1"/><text x="3.9659%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.03%)</title><rect x="3.7159%" y="165" width="0.0300%" height="15" fill="rgb(218,138,4)" fg:x="124" fg:w="1"/><text x="3.9659%" y="175.50"></text></g><g><title>nn`&lt;tensor_rs::TensorBase&lt;L,tensor_rs::OwnedData&lt;Dtype&gt;&gt; as tensor_rs::impl_binary_ops::TensorBinaryOps&lt;tensor_rs::TensorBase&lt;R,tensor_rs::OwnedData&lt;Dtype&gt;&gt;&gt;&gt;::add (8 samples, 0.24%)</title><rect x="3.5661%" y="213" width="0.2397%" height="15" fill="rgb(250,191,14)" fg:x="119" fg:w="8"/><text x="3.8161%" y="223.50"></text></g><g><title>nn`tensor_rs::utils::merge_backward_ops (2 samples, 0.06%)</title><rect x="3.7459%" y="197" width="0.0599%" height="15" fill="rgb(239,60,40)" fg:x="125" fg:w="2"/><text x="3.9959%" y="207.50"></text></g><g><title>nn`&lt;core::option::Option&lt;tensor_rs::gradient::BackwardOps&gt; as tensor_rs::gradient::Merge&gt;::merge (1 samples, 0.03%)</title><rect x="3.7758%" y="181" width="0.0300%" height="15" fill="rgb(206,27,48)" fg:x="126" fg:w="1"/><text x="4.0258%" y="191.50"></text></g><g><title>nn`__rdl_alloc (1 samples, 0.03%)</title><rect x="3.8358%" y="197" width="0.0300%" height="15" fill="rgb(225,35,8)" fg:x="128" fg:w="1"/><text x="4.0858%" y="207.50"></text></g><g><title>nn`tensor_rs::impl_binary_ops::_&lt;impl core::ops::arith::Mul&lt;&amp;tensor_rs::TensorBase&lt;S,A&gt;&gt; for &amp;tensor_rs::TensorBase&lt;S,B&gt;&gt;::mul (1 samples, 0.03%)</title><rect x="3.8657%" y="197" width="0.0300%" height="15" fill="rgb(250,213,24)" fg:x="129" fg:w="1"/><text x="4.1157%" y="207.50"></text></g><g><title>nn`&lt;tensor_rs::TensorBase&lt;L,tensor_rs::OwnedData&lt;Dtype&gt;&gt; as tensor_rs::impl_binary_ops::TensorBinaryOps&lt;tensor_rs::TensorBase&lt;R,tensor_rs::OwnedData&lt;Dtype&gt;&gt;&gt;&gt;::mul (4 samples, 0.12%)</title><rect x="3.8058%" y="213" width="0.1199%" height="15" fill="rgb(247,123,22)" fg:x="127" fg:w="4"/><text x="4.0558%" y="223.50"></text></g><g><title>nn`tensor_rs::utils::merge_backward_ops (1 samples, 0.03%)</title><rect x="3.8957%" y="197" width="0.0300%" height="15" fill="rgb(231,138,38)" fg:x="130" fg:w="1"/><text x="4.1457%" y="207.50"></text></g><g><title>nn`&lt;tensor_rs::TensorBase&lt;L,tensor_rs::OwnedData&lt;Dtype&gt;&gt; as tensor_rs::impl_binary_ops::TensorBinaryOps&lt;tensor_rs::TensorBase&lt;R,tensor_rs::OwnedData&lt;Dtype&gt;&gt;&gt;&gt;::sub (6 samples, 0.18%)</title><rect x="3.9257%" y="213" width="0.1798%" height="15" fill="rgb(231,145,46)" fg:x="131" fg:w="6"/><text x="4.1757%" y="223.50"></text></g><g><title>nn`tensor_rs::impl_methods::_&lt;impl tensor_rs::TensorBase&lt;S,tensor_rs::OwnedData&lt;Dtype&gt;&gt;&gt;::from_vec (1 samples, 0.03%)</title><rect x="4.0755%" y="197" width="0.0300%" height="15" fill="rgb(251,118,11)" fg:x="136" fg:w="1"/><text x="4.3255%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.06%)</title><rect x="4.1355%" y="165" width="0.0599%" height="15" fill="rgb(217,147,25)" fg:x="138" fg:w="2"/><text x="4.3855%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.09%)</title><rect x="4.1355%" y="197" width="0.0899%" height="15" fill="rgb(247,81,37)" fg:x="138" fg:w="3"/><text x="4.3855%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.09%)</title><rect x="4.1355%" y="181" width="0.0899%" height="15" fill="rgb(209,12,38)" fg:x="138" fg:w="3"/><text x="4.3855%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.03%)</title><rect x="4.1954%" y="165" width="0.0300%" height="15" fill="rgb(227,1,9)" fg:x="140" fg:w="1"/><text x="4.4454%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.03%)</title><rect x="4.3153%" y="117" width="0.0300%" height="15" fill="rgb(248,47,43)" fg:x="144" fg:w="1"/><text x="4.5653%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (2 samples, 0.06%)</title><rect x="4.3452%" y="117" width="0.0599%" height="15" fill="rgb(221,10,30)" fg:x="145" fg:w="2"/><text x="4.5952%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.06%)</title><rect x="4.3452%" y="101" width="0.0599%" height="15" fill="rgb(210,229,1)" fg:x="145" fg:w="2"/><text x="4.5952%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.03%)</title><rect x="4.3752%" y="85" width="0.0300%" height="15" fill="rgb(222,148,37)" fg:x="146" fg:w="1"/><text x="4.6252%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (4 samples, 0.12%)</title><rect x="4.3153%" y="133" width="0.1199%" height="15" fill="rgb(234,67,33)" fg:x="144" fg:w="4"/><text x="4.5653%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.03%)</title><rect x="4.4052%" y="117" width="0.0300%" height="15" fill="rgb(247,98,35)" fg:x="147" fg:w="1"/><text x="4.6552%" y="127.50"></text></g><g><title>nn`&lt;tensor_rs::TensorBase&lt;S,A&gt; as tensor_rs::impl_reduce_ops::ReduceOps&gt;::sum (12 samples, 0.36%)</title><rect x="4.1055%" y="213" width="0.3596%" height="15" fill="rgb(247,138,52)" fg:x="137" fg:w="12"/><text x="4.3555%" y="223.50"></text></g><g><title>nn`tensor_rs::gradient::BackwardOps::add_backward_op (8 samples, 0.24%)</title><rect x="4.2254%" y="197" width="0.2397%" height="15" fill="rgb(213,79,30)" fg:x="141" fg:w="8"/><text x="4.4754%" y="207.50"></text></g><g><title>nn`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (6 samples, 0.18%)</title><rect x="4.2853%" y="181" width="0.1798%" height="15" fill="rgb(246,177,23)" fg:x="143" fg:w="6"/><text x="4.5353%" y="191.50"></text></g><g><title>nn`alloc::raw_vec::finish_grow (6 samples, 0.18%)</title><rect x="4.2853%" y="165" width="0.1798%" height="15" fill="rgb(230,62,27)" fg:x="143" fg:w="6"/><text x="4.5353%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`realloc (6 samples, 0.18%)</title><rect x="4.2853%" y="149" width="0.1798%" height="15" fill="rgb(216,154,8)" fg:x="143" fg:w="6"/><text x="4.5353%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.03%)</title><rect x="4.4351%" y="133" width="0.0300%" height="15" fill="rgb(244,35,45)" fg:x="148" fg:w="1"/><text x="4.6851%" y="143.50"></text></g><g><title>nn`&lt;f32 as tensor_rs::DataElement&gt;::sigmoid (11 samples, 0.33%)</title><rect x="4.4651%" y="181" width="0.3296%" height="15" fill="rgb(251,115,12)" fg:x="149" fg:w="11"/><text x="4.7151%" y="191.50"></text></g><g><title>libsystem_m.dylib`expf (11 samples, 0.33%)</title><rect x="4.4651%" y="165" width="0.3296%" height="15" fill="rgb(240,54,50)" fg:x="149" fg:w="11"/><text x="4.7151%" y="175.50"></text></g><g><title>nn`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (12 samples, 0.36%)</title><rect x="4.4651%" y="197" width="0.3596%" height="15" fill="rgb(233,84,52)" fg:x="149" fg:w="12"/><text x="4.7151%" y="207.50"></text></g><g><title>nn`DYLD-STUB$$expf (1 samples, 0.03%)</title><rect x="4.7947%" y="181" width="0.0300%" height="15" fill="rgb(207,117,47)" fg:x="160" fg:w="1"/><text x="5.0447%" y="191.50"></text></g><g><title>nn`tensor_rs::gradient::BackwardOps::add_backward_op (3 samples, 0.09%)</title><rect x="4.8247%" y="197" width="0.0899%" height="15" fill="rgb(249,43,39)" fg:x="161" fg:w="3"/><text x="5.0747%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.06%)</title><rect x="4.8547%" y="181" width="0.0599%" height="15" fill="rgb(209,38,44)" fg:x="162" fg:w="2"/><text x="5.1047%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.06%)</title><rect x="4.8547%" y="165" width="0.0599%" height="15" fill="rgb(236,212,23)" fg:x="162" fg:w="2"/><text x="5.1047%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.06%)</title><rect x="4.8547%" y="149" width="0.0599%" height="15" fill="rgb(242,79,21)" fg:x="162" fg:w="2"/><text x="5.1047%" y="159.50"></text></g><g><title>nn`&lt;tensor_rs::TensorBase&lt;S&gt; as tensor_rs::impl_unary_ops::TensorUnaryOps&gt;::sigmoid (19 samples, 0.57%)</title><rect x="4.4651%" y="213" width="0.5694%" height="15" fill="rgb(211,96,35)" fg:x="149" fg:w="19"/><text x="4.7151%" y="223.50"></text></g><g><title>nn`tensor_rs::impl_methods::_&lt;impl tensor_rs::TensorBase&lt;S,tensor_rs::OwnedData&lt;Dtype&gt;&gt;&gt;::from_vec (4 samples, 0.12%)</title><rect x="4.9146%" y="197" width="0.1199%" height="15" fill="rgb(253,215,40)" fg:x="164" fg:w="4"/><text x="5.1646%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.09%)</title><rect x="4.9446%" y="181" width="0.0899%" height="15" fill="rgb(211,81,21)" fg:x="165" fg:w="3"/><text x="5.1946%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.09%)</title><rect x="4.9446%" y="165" width="0.0899%" height="15" fill="rgb(208,190,38)" fg:x="165" fg:w="3"/><text x="5.1946%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.09%)</title><rect x="4.9446%" y="149" width="0.0899%" height="15" fill="rgb(235,213,38)" fg:x="165" fg:w="3"/><text x="5.1946%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.03%)</title><rect x="5.0045%" y="133" width="0.0300%" height="15" fill="rgb(237,122,38)" fg:x="167" fg:w="1"/><text x="5.2545%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (3 samples, 0.09%)</title><rect x="5.0345%" y="165" width="0.0899%" height="15" fill="rgb(244,218,35)" fg:x="168" fg:w="3"/><text x="5.2845%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (3 samples, 0.09%)</title><rect x="5.0345%" y="149" width="0.0899%" height="15" fill="rgb(240,68,47)" fg:x="168" fg:w="3"/><text x="5.2845%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.06%)</title><rect x="5.0644%" y="133" width="0.0599%" height="15" fill="rgb(210,16,53)" fg:x="169" fg:w="2"/><text x="5.3144%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (1 samples, 0.03%)</title><rect x="5.1244%" y="165" width="0.0300%" height="15" fill="rgb(235,124,12)" fg:x="171" fg:w="1"/><text x="5.3744%" y="175.50"></text></g><g><title>nn`DYLD-STUB$$free (1 samples, 0.03%)</title><rect x="5.1543%" y="165" width="0.0300%" height="15" fill="rgb(224,169,11)" fg:x="172" fg:w="1"/><text x="5.4043%" y="175.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (4 samples, 0.12%)</title><rect x="5.8735%" y="149" width="0.1199%" height="15" fill="rgb(250,166,2)" fg:x="196" fg:w="4"/><text x="6.1235%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`medium_malloc_should_clear (1 samples, 0.03%)</title><rect x="5.9934%" y="117" width="0.0300%" height="15" fill="rgb(242,216,29)" fg:x="200" fg:w="1"/><text x="6.2434%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`medium_malloc_from_free_list (1 samples, 0.03%)</title><rect x="5.9934%" y="101" width="0.0300%" height="15" fill="rgb(230,116,27)" fg:x="200" fg:w="1"/><text x="6.2434%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`medium_free_list_remove_ptr_no_clear (1 samples, 0.03%)</title><rect x="5.9934%" y="85" width="0.0300%" height="15" fill="rgb(228,99,48)" fg:x="200" fg:w="1"/><text x="6.2434%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.06%)</title><rect x="5.9934%" y="149" width="0.0599%" height="15" fill="rgb(253,11,6)" fg:x="200" fg:w="2"/><text x="6.2434%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.06%)</title><rect x="5.9934%" y="133" width="0.0599%" height="15" fill="rgb(247,143,39)" fg:x="200" fg:w="2"/><text x="6.2434%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (1 samples, 0.03%)</title><rect x="6.0234%" y="117" width="0.0300%" height="15" fill="rgb(236,97,10)" fg:x="201" fg:w="1"/><text x="6.2734%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (1 samples, 0.03%)</title><rect x="6.0234%" y="101" width="0.0300%" height="15" fill="rgb(233,208,19)" fg:x="201" fg:w="1"/><text x="6.2734%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (1 samples, 0.03%)</title><rect x="6.0234%" y="85" width="0.0300%" height="15" fill="rgb(216,164,2)" fg:x="201" fg:w="1"/><text x="6.2734%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.03%)</title><rect x="6.0533%" y="133" width="0.0300%" height="15" fill="rgb(220,129,5)" fg:x="202" fg:w="1"/><text x="6.3033%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.06%)</title><rect x="6.0533%" y="149" width="0.0599%" height="15" fill="rgb(242,17,10)" fg:x="202" fg:w="2"/><text x="6.3033%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.03%)</title><rect x="6.0833%" y="133" width="0.0300%" height="15" fill="rgb(242,107,0)" fg:x="203" fg:w="1"/><text x="6.3333%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.03%)</title><rect x="6.0833%" y="117" width="0.0300%" height="15" fill="rgb(251,28,31)" fg:x="203" fg:w="1"/><text x="6.3333%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (4 samples, 0.12%)</title><rect x="6.1133%" y="149" width="0.1199%" height="15" fill="rgb(233,223,10)" fg:x="204" fg:w="4"/><text x="6.3633%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_small (2 samples, 0.06%)</title><rect x="6.2331%" y="149" width="0.0599%" height="15" fill="rgb(215,21,27)" fg:x="208" fg:w="2"/><text x="6.4831%" y="159.50"></text></g><g><title>nn`matrixmultiply::gemm::gemm_loop (38 samples, 1.14%)</title><rect x="5.1843%" y="165" width="1.1387%" height="15" fill="rgb(232,23,21)" fg:x="173" fg:w="38"/><text x="5.4343%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`medium_free_list_remove_ptr_no_clear (1 samples, 0.03%)</title><rect x="6.2931%" y="149" width="0.0300%" height="15" fill="rgb(244,5,23)" fg:x="210" fg:w="1"/><text x="6.5431%" y="159.50"></text></g><g><title>nn`matrixmultiply::gemm::masked_kernel (433 samples, 12.98%)</title><rect x="6.3230%" y="165" width="12.9757%" height="15" fill="rgb(226,81,46)" fg:x="211" fg:w="433"/><text x="6.5730%" y="175.50">nn`matrixmultiply::..</text></g><g><title>nn`matrixmultiply::gemm::pack (278 samples, 8.33%)</title><rect x="19.2988%" y="165" width="8.3308%" height="15" fill="rgb(247,70,30)" fg:x="644" fg:w="278"/><text x="19.5488%" y="175.50">nn`matrixmul..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.06%)</title><rect x="27.6895%" y="117" width="0.0599%" height="15" fill="rgb(212,68,19)" fg:x="924" fg:w="2"/><text x="27.9395%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.03%)</title><rect x="27.7195%" y="101" width="0.0300%" height="15" fill="rgb(240,187,13)" fg:x="925" fg:w="1"/><text x="27.9695%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.09%)</title><rect x="27.6895%" y="149" width="0.0899%" height="15" fill="rgb(223,113,26)" fg:x="924" fg:w="3"/><text x="27.9395%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.09%)</title><rect x="27.6895%" y="133" width="0.0899%" height="15" fill="rgb(206,192,2)" fg:x="924" fg:w="3"/><text x="27.9395%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.03%)</title><rect x="27.7495%" y="117" width="0.0300%" height="15" fill="rgb(241,108,4)" fg:x="926" fg:w="1"/><text x="27.9995%" y="127.50"></text></g><g><title>nn`tensor_rs::gradient::BackwardOps::add_backward_op (7 samples, 0.21%)</title><rect x="27.6296%" y="165" width="0.2098%" height="15" fill="rgb(247,173,49)" fg:x="922" fg:w="7"/><text x="27.8796%" y="175.50"></text></g><g><title>nn`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.06%)</title><rect x="27.7794%" y="149" width="0.0599%" height="15" fill="rgb(224,114,35)" fg:x="927" fg:w="2"/><text x="28.0294%" y="159.50"></text></g><g><title>nn`alloc::raw_vec::finish_grow (2 samples, 0.06%)</title><rect x="27.7794%" y="133" width="0.0599%" height="15" fill="rgb(245,159,27)" fg:x="927" fg:w="2"/><text x="28.0294%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.06%)</title><rect x="27.7794%" y="117" width="0.0599%" height="15" fill="rgb(245,172,44)" fg:x="927" fg:w="2"/><text x="28.0294%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.03%)</title><rect x="27.8094%" y="101" width="0.0300%" height="15" fill="rgb(236,23,11)" fg:x="928" fg:w="1"/><text x="28.0594%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.03%)</title><rect x="27.8094%" y="85" width="0.0300%" height="15" fill="rgb(205,117,38)" fg:x="928" fg:w="1"/><text x="28.0594%" y="95.50"></text></g><g><title>nn`&lt;tensor_rs::TensorBase&lt;[usize (764 samples, 22.89%)</title><rect x="5.0345%" y="213" width="22.8948%" height="15" fill="rgb(237,72,25)" fg:x="168" fg:w="764"/><text x="5.2845%" y="223.50">nn`&lt;tensor_rs::TensorBase&lt;[usize</text></g><g><title> 2],A&gt; as tensor_rs::impl_processing_ops::Matmul&lt;tensor_rs::TensorBase&lt;[usize (764 samples, 22.89%)</title><rect x="5.0345%" y="197" width="22.8948%" height="15" fill="rgb(244,70,9)" fg:x="168" fg:w="764"/><text x="5.2845%" y="207.50"> 2],A&gt; as tensor_rs::impl_processing..</text></g><g><title> 2],A&gt;&gt;&gt;::matmul (764 samples, 22.89%)</title><rect x="5.0345%" y="181" width="22.8948%" height="15" fill="rgb(217,125,39)" fg:x="168" fg:w="764"/><text x="5.2845%" y="191.50"> 2],A&gt;&gt;&gt;::matmul</text></g><g><title>nn`tensor_rs::impl_methods::_&lt;impl tensor_rs::TensorBase&lt;S,tensor_rs::OwnedData&lt;Dtype&gt;&gt;&gt;::from_vec (3 samples, 0.09%)</title><rect x="27.8394%" y="165" width="0.0899%" height="15" fill="rgb(235,36,10)" fg:x="929" fg:w="3"/><text x="28.0894%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.09%)</title><rect x="27.8394%" y="149" width="0.0899%" height="15" fill="rgb(251,123,47)" fg:x="929" fg:w="3"/><text x="28.0894%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.03%)</title><rect x="27.8993%" y="133" width="0.0300%" height="15" fill="rgb(221,13,13)" fg:x="931" fg:w="1"/><text x="28.1493%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.03%)</title><rect x="27.8993%" y="117" width="0.0300%" height="15" fill="rgb(238,131,9)" fg:x="931" fg:w="1"/><text x="28.1493%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.03%)</title><rect x="27.9592%" y="165" width="0.0300%" height="15" fill="rgb(211,50,8)" fg:x="933" fg:w="1"/><text x="28.2092%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (2 samples, 0.06%)</title><rect x="27.9592%" y="181" width="0.0599%" height="15" fill="rgb(245,182,24)" fg:x="933" fg:w="2"/><text x="28.2092%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (1 samples, 0.03%)</title><rect x="27.9892%" y="165" width="0.0300%" height="15" fill="rgb(242,14,37)" fg:x="934" fg:w="1"/><text x="28.2392%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.03%)</title><rect x="27.9892%" y="149" width="0.0300%" height="15" fill="rgb(246,228,12)" fg:x="934" fg:w="1"/><text x="28.2392%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.03%)</title><rect x="28.0192%" y="181" width="0.0300%" height="15" fill="rgb(213,55,15)" fg:x="935" fg:w="1"/><text x="28.2692%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (3 samples, 0.09%)</title><rect x="28.2589%" y="133" width="0.0899%" height="15" fill="rgb(209,9,3)" fg:x="943" fg:w="3"/><text x="28.5089%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (2 samples, 0.06%)</title><rect x="28.2889%" y="117" width="0.0599%" height="15" fill="rgb(230,59,30)" fg:x="944" fg:w="2"/><text x="28.5389%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.12%)</title><rect x="28.2589%" y="165" width="0.1199%" height="15" fill="rgb(209,121,21)" fg:x="943" fg:w="4"/><text x="28.5089%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (4 samples, 0.12%)</title><rect x="28.2589%" y="149" width="0.1199%" height="15" fill="rgb(220,109,13)" fg:x="943" fg:w="4"/><text x="28.5089%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.03%)</title><rect x="28.3488%" y="133" width="0.0300%" height="15" fill="rgb(232,18,1)" fg:x="946" fg:w="1"/><text x="28.5988%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (1 samples, 0.03%)</title><rect x="28.3488%" y="117" width="0.0300%" height="15" fill="rgb(215,41,42)" fg:x="946" fg:w="1"/><text x="28.5988%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (3 samples, 0.09%)</title><rect x="28.3788%" y="165" width="0.0899%" height="15" fill="rgb(224,123,36)" fg:x="947" fg:w="3"/><text x="28.6288%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (3 samples, 0.09%)</title><rect x="28.3788%" y="149" width="0.0899%" height="15" fill="rgb(240,125,3)" fg:x="947" fg:w="3"/><text x="28.6288%" y="159.50"></text></g><g><title>nn`&lt;tensor_rs::mnist::mnist::MnistData as tensor_rs::mnist::Dataloader&gt;::get_by_idx (20 samples, 0.60%)</title><rect x="27.9293%" y="197" width="0.5993%" height="15" fill="rgb(205,98,50)" fg:x="932" fg:w="20"/><text x="28.1793%" y="207.50"></text></g><g><title>nn`tensor_rs::mnist::mnist::MnistData::get_image_nn_input (16 samples, 0.48%)</title><rect x="28.0491%" y="181" width="0.4795%" height="15" fill="rgb(205,185,37)" fg:x="936" fg:w="16"/><text x="28.2991%" y="191.50"></text></g><g><title>nn`tensor_rs::impl_methods::_&lt;impl tensor_rs::TensorBase&lt;S,tensor_rs::OwnedData&lt;Dtype&gt;&gt;&gt;::from_vec (2 samples, 0.06%)</title><rect x="28.4687%" y="165" width="0.0599%" height="15" fill="rgb(238,207,15)" fg:x="950" fg:w="2"/><text x="28.7187%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.03%)</title><rect x="28.4987%" y="149" width="0.0300%" height="15" fill="rgb(213,199,42)" fg:x="951" fg:w="1"/><text x="28.7487%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.03%)</title><rect x="28.4987%" y="133" width="0.0300%" height="15" fill="rgb(235,201,11)" fg:x="951" fg:w="1"/><text x="28.7487%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.03%)</title><rect x="28.4987%" y="117" width="0.0300%" height="15" fill="rgb(207,46,11)" fg:x="951" fg:w="1"/><text x="28.7487%" y="127.50"></text></g><g><title>nn`__rdl_alloc (1 samples, 0.03%)</title><rect x="28.5286%" y="181" width="0.0300%" height="15" fill="rgb(241,35,35)" fg:x="952" fg:w="1"/><text x="28.7786%" y="191.50"></text></g><g><title>nn`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.06%)</title><rect x="28.5286%" y="197" width="0.0599%" height="15" fill="rgb(243,32,47)" fg:x="952" fg:w="2"/><text x="28.7786%" y="207.50"></text></g><g><title>nn`alloc::raw_vec::finish_grow (1 samples, 0.03%)</title><rect x="28.5586%" y="181" width="0.0300%" height="15" fill="rgb(247,202,23)" fg:x="953" fg:w="1"/><text x="28.8086%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.03%)</title><rect x="28.5586%" y="165" width="0.0300%" height="15" fill="rgb(219,102,11)" fg:x="953" fg:w="1"/><text x="28.8086%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.03%)</title><rect x="28.5586%" y="149" width="0.0300%" height="15" fill="rgb(243,110,44)" fg:x="953" fg:w="1"/><text x="28.8086%" y="159.50"></text></g><g><title>nn`&lt;tensor_rs::mnist::mnist::MnistData as tensor_rs::mnist::Dataloader&gt;::get_batch (23 samples, 0.69%)</title><rect x="27.9293%" y="213" width="0.6892%" height="15" fill="rgb(222,74,54)" fg:x="932" fg:w="23"/><text x="28.1793%" y="223.50"></text></g><g><title>nn`std::sys::unix::time::inner::_&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.03%)</title><rect x="28.5886%" y="197" width="0.0300%" height="15" fill="rgb(216,99,12)" fg:x="954" fg:w="1"/><text x="28.8386%" y="207.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (1 samples, 0.03%)</title><rect x="28.5886%" y="181" width="0.0300%" height="15" fill="rgb(226,22,26)" fg:x="954" fg:w="1"/><text x="28.8386%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (1 samples, 0.03%)</title><rect x="28.5886%" y="165" width="0.0300%" height="15" fill="rgb(217,163,10)" fg:x="954" fg:w="1"/><text x="28.8386%" y="175.50"></text></g><g><title>nn`&lt;tensor_rs::unique_id::UniqueId as core::hash::Hash&gt;::hash (3 samples, 0.09%)</title><rect x="28.6185%" y="213" width="0.0899%" height="15" fill="rgb(213,25,53)" fg:x="955" fg:w="3"/><text x="28.8685%" y="223.50"></text></g><g><title>nn`DYLD-STUB$$free (2 samples, 0.06%)</title><rect x="28.7084%" y="213" width="0.0599%" height="15" fill="rgb(252,105,26)" fg:x="958" fg:w="2"/><text x="28.9584%" y="223.50"></text></g><g><title>nn`DYLD-STUB$$malloc (1 samples, 0.03%)</title><rect x="28.7684%" y="213" width="0.0300%" height="15" fill="rgb(220,39,43)" fg:x="960" fg:w="1"/><text x="29.0184%" y="223.50"></text></g><g><title>nn`DYLD-STUB$$memset_pattern16 (1 samples, 0.03%)</title><rect x="28.7983%" y="213" width="0.0300%" height="15" fill="rgb(229,68,48)" fg:x="961" fg:w="1"/><text x="29.0483%" y="223.50"></text></g><g><title>nn`alloc::vec::from_elem (11 samples, 0.33%)</title><rect x="28.8283%" y="213" width="0.3296%" height="15" fill="rgb(252,8,32)" fg:x="962" fg:w="11"/><text x="29.0783%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (11 samples, 0.33%)</title><rect x="28.8283%" y="197" width="0.3296%" height="15" fill="rgb(223,20,43)" fg:x="962" fg:w="11"/><text x="29.0783%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (11 samples, 0.33%)</title><rect x="28.8283%" y="181" width="0.3296%" height="15" fill="rgb(229,81,49)" fg:x="962" fg:w="11"/><text x="29.0783%" y="191.50"></text></g><g><title>libsystem_platform.dylib`__bzero (11 samples, 0.33%)</title><rect x="28.8283%" y="165" width="0.3296%" height="15" fill="rgb(236,28,36)" fg:x="962" fg:w="11"/><text x="29.0783%" y="175.50"></text></g><g><title>nn`core::hash::BuildHasher::hash_one (4 samples, 0.12%)</title><rect x="29.1579%" y="213" width="0.1199%" height="15" fill="rgb(249,185,26)" fg:x="973" fg:w="4"/><text x="29.4079%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.06%)</title><rect x="29.2778%" y="165" width="0.0599%" height="15" fill="rgb(249,174,33)" fg:x="977" fg:w="2"/><text x="29.5278%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.03%)</title><rect x="29.3078%" y="149" width="0.0300%" height="15" fill="rgb(233,201,37)" fg:x="978" fg:w="1"/><text x="29.5578%" y="159.50"></text></g><g><title>nn`core::ptr::drop_in_place&lt;(tensor_rs::TensorBase&lt;[usize (3 samples, 0.09%)</title><rect x="29.2778%" y="213" width="0.0899%" height="15" fill="rgb(221,78,26)" fg:x="977" fg:w="3"/><text x="29.5278%" y="223.50"></text></g><g><title> 2]&gt;,tensor_rs::TensorBase&lt;[usize (3 samples, 0.09%)</title><rect x="29.2778%" y="197" width="0.0899%" height="15" fill="rgb(250,127,30)" fg:x="977" fg:w="3"/><text x="29.5278%" y="207.50"></text></g><g><title> 2]&gt;)&gt; (3 samples, 0.09%)</title><rect x="29.2778%" y="181" width="0.0899%" height="15" fill="rgb(230,49,44)" fg:x="977" fg:w="3"/><text x="29.5278%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.03%)</title><rect x="29.3377%" y="165" width="0.0300%" height="15" fill="rgb(229,67,23)" fg:x="979" fg:w="1"/><text x="29.5877%" y="175.50"></text></g><g><title>nn`core::ptr::drop_in_place&lt;tensor_rs::TensorBase&lt;[usize (4 samples, 0.12%)</title><rect x="29.3677%" y="213" width="0.1199%" height="15" fill="rgb(249,83,47)" fg:x="980" fg:w="4"/><text x="29.6177%" y="223.50"></text></g><g><title> 0]&gt;&gt; (4 samples, 0.12%)</title><rect x="29.3677%" y="197" width="0.1199%" height="15" fill="rgb(215,43,3)" fg:x="980" fg:w="4"/><text x="29.6177%" y="207.50"></text></g><g><title>nn`matrixmultiply::gemm::gemm_loop (1 samples, 0.03%)</title><rect x="29.4876%" y="213" width="0.0300%" height="15" fill="rgb(238,154,13)" fg:x="984" fg:w="1"/><text x="29.7376%" y="223.50"></text></g><g><title>nn`std::sys::unix::time::inner::_&lt;impl std::sys::unix::time::Timespec&gt;::now (7 samples, 0.21%)</title><rect x="29.5175%" y="213" width="0.2098%" height="15" fill="rgb(219,56,2)" fg:x="985" fg:w="7"/><text x="29.7675%" y="223.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (7 samples, 0.21%)</title><rect x="29.5175%" y="197" width="0.2098%" height="15" fill="rgb(233,0,4)" fg:x="985" fg:w="7"/><text x="29.7675%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (6 samples, 0.18%)</title><rect x="29.5475%" y="181" width="0.1798%" height="15" fill="rgb(235,30,7)" fg:x="986" fg:w="6"/><text x="29.7975%" y="191.50"></text></g><g><title>nn`tensor_rs::gradient::BackwardOps::add_backward_op (2 samples, 0.06%)</title><rect x="29.7273%" y="213" width="0.0599%" height="15" fill="rgb(250,79,13)" fg:x="992" fg:w="2"/><text x="29.9773%" y="223.50"></text></g><g><title>nn`tensor_rs::impl_binary_ops::_&lt;impl core::ops::arith::AddAssign&lt;&amp;tensor_rs::TensorBase&lt;S,B&gt;&gt; for tensor_rs::TensorBase&lt;S,A&gt;&gt;::add_assign (217 samples, 6.50%)</title><rect x="29.7872%" y="213" width="6.5028%" height="15" fill="rgb(211,146,34)" fg:x="994" fg:w="217"/><text x="30.0372%" y="223.50">nn`tensor..</text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.03%)</title><rect x="36.2901%" y="197" width="0.0300%" height="15" fill="rgb(228,22,38)" fg:x="1211" fg:w="1"/><text x="36.5401%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.03%)</title><rect x="36.2901%" y="181" width="0.0300%" height="15" fill="rgb(235,168,5)" fg:x="1211" fg:w="1"/><text x="36.5401%" y="191.50"></text></g><g><title>nn`tensor_rs::impl_binary_ops::_&lt;impl core::ops::arith::AddAssign&lt;tensor_rs::TensorBase&lt;S,B&gt;&gt; for tensor_rs::TensorBase&lt;S,A&gt;&gt;::add_assign (2 samples, 0.06%)</title><rect x="36.2901%" y="213" width="0.0599%" height="15" fill="rgb(221,155,16)" fg:x="1211" fg:w="2"/><text x="36.5401%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.03%)</title><rect x="36.3200%" y="197" width="0.0300%" height="15" fill="rgb(215,215,53)" fg:x="1212" fg:w="1"/><text x="36.5700%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (1 samples, 0.03%)</title><rect x="37.0093%" y="197" width="0.0300%" height="15" fill="rgb(223,4,10)" fg:x="1235" fg:w="1"/><text x="37.2593%" y="207.50"></text></g><g><title>nn`tensor_rs::impl_binary_ops::_&lt;impl core::ops::arith::SubAssign&lt;tensor_rs::TensorBase&lt;S,B&gt;&gt; for tensor_rs::TensorBase&lt;S,A&gt;&gt;::sub_assign (24 samples, 0.72%)</title><rect x="36.3500%" y="213" width="0.7192%" height="15" fill="rgb(234,103,6)" fg:x="1213" fg:w="24"/><text x="36.6000%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.03%)</title><rect x="37.0393%" y="197" width="0.0300%" height="15" fill="rgb(227,97,0)" fg:x="1236" fg:w="1"/><text x="37.2893%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.09%)</title><rect x="37.0692%" y="181" width="0.0899%" height="15" fill="rgb(234,150,53)" fg:x="1237" fg:w="3"/><text x="37.3192%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.06%)</title><rect x="37.0992%" y="165" width="0.0599%" height="15" fill="rgb(228,201,54)" fg:x="1238" fg:w="2"/><text x="37.3492%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.06%)</title><rect x="37.1591%" y="181" width="0.0599%" height="15" fill="rgb(222,22,37)" fg:x="1240" fg:w="2"/><text x="37.4091%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (2 samples, 0.06%)</title><rect x="37.2191%" y="181" width="0.0599%" height="15" fill="rgb(237,53,32)" fg:x="1242" fg:w="2"/><text x="37.4691%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.03%)</title><rect x="37.2790%" y="181" width="0.0300%" height="15" fill="rgb(233,25,53)" fg:x="1244" fg:w="1"/><text x="37.5290%" y="191.50"></text></g><g><title>nn`DYLD-STUB$$free (3 samples, 0.09%)</title><rect x="37.3090%" y="181" width="0.0899%" height="15" fill="rgb(210,40,34)" fg:x="1245" fg:w="3"/><text x="37.5590%" y="191.50"></text></g><g><title>nn`core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 0.03%)</title><rect x="37.3989%" y="181" width="0.0300%" height="15" fill="rgb(241,220,44)" fg:x="1248" fg:w="1"/><text x="37.6489%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (2 samples, 0.06%)</title><rect x="37.4588%" y="165" width="0.0599%" height="15" fill="rgb(235,28,35)" fg:x="1250" fg:w="2"/><text x="37.7088%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (10 samples, 0.30%)</title><rect x="37.5187%" y="165" width="0.2997%" height="15" fill="rgb(210,56,17)" fg:x="1252" fg:w="10"/><text x="37.7687%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.06%)</title><rect x="37.7585%" y="149" width="0.0599%" height="15" fill="rgb(224,130,29)" fg:x="1260" fg:w="2"/><text x="38.0085%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (2 samples, 0.06%)</title><rect x="37.8184%" y="165" width="0.0599%" height="15" fill="rgb(235,212,8)" fg:x="1262" fg:w="2"/><text x="38.0684%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (4 samples, 0.12%)</title><rect x="37.8783%" y="165" width="0.1199%" height="15" fill="rgb(223,33,50)" fg:x="1264" fg:w="4"/><text x="38.1283%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (1 samples, 0.03%)</title><rect x="38.0282%" y="149" width="0.0300%" height="15" fill="rgb(219,149,13)" fg:x="1269" fg:w="1"/><text x="38.2782%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.03%)</title><rect x="38.0581%" y="149" width="0.0300%" height="15" fill="rgb(250,156,29)" fg:x="1270" fg:w="1"/><text x="38.3081%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (2 samples, 0.06%)</title><rect x="38.0881%" y="149" width="0.0599%" height="15" fill="rgb(216,193,19)" fg:x="1271" fg:w="2"/><text x="38.3381%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (12 samples, 0.36%)</title><rect x="38.1480%" y="149" width="0.3596%" height="15" fill="rgb(216,135,14)" fg:x="1273" fg:w="12"/><text x="38.3980%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.06%)</title><rect x="38.4477%" y="133" width="0.0599%" height="15" fill="rgb(241,47,5)" fg:x="1283" fg:w="2"/><text x="38.6977%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (1 samples, 0.03%)</title><rect x="38.5076%" y="149" width="0.0300%" height="15" fill="rgb(233,42,35)" fg:x="1285" fg:w="1"/><text x="38.7576%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (1 samples, 0.03%)</title><rect x="38.5676%" y="133" width="0.0300%" height="15" fill="rgb(231,13,6)" fg:x="1287" fg:w="1"/><text x="38.8176%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_small (3 samples, 0.09%)</title><rect x="38.5376%" y="149" width="0.0899%" height="15" fill="rgb(207,181,40)" fg:x="1286" fg:w="3"/><text x="38.7876%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (1 samples, 0.03%)</title><rect x="38.5975%" y="133" width="0.0300%" height="15" fill="rgb(254,173,49)" fg:x="1288" fg:w="1"/><text x="38.8475%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (3 samples, 0.09%)</title><rect x="38.6275%" y="149" width="0.0899%" height="15" fill="rgb(221,1,38)" fg:x="1289" fg:w="3"/><text x="38.8775%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (4 samples, 0.12%)</title><rect x="38.7174%" y="149" width="0.1199%" height="15" fill="rgb(206,124,46)" fg:x="1292" fg:w="4"/><text x="38.9674%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (1 samples, 0.03%)</title><rect x="38.8373%" y="149" width="0.0300%" height="15" fill="rgb(249,21,11)" fg:x="1296" fg:w="1"/><text x="39.0873%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset_pattern16 (4 samples, 0.12%)</title><rect x="38.8672%" y="149" width="0.1199%" height="15" fill="rgb(222,201,40)" fg:x="1297" fg:w="4"/><text x="39.1172%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.03%)</title><rect x="38.9871%" y="133" width="0.0300%" height="15" fill="rgb(235,61,29)" fg:x="1301" fg:w="1"/><text x="39.2371%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.03%)</title><rect x="38.9871%" y="117" width="0.0300%" height="15" fill="rgb(219,207,3)" fg:x="1301" fg:w="1"/><text x="39.2371%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.03%)</title><rect x="38.9871%" y="101" width="0.0300%" height="15" fill="rgb(222,56,46)" fg:x="1301" fg:w="1"/><text x="39.2371%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.03%)</title><rect x="38.9871%" y="85" width="0.0300%" height="15" fill="rgb(239,76,54)" fg:x="1301" fg:w="1"/><text x="39.2371%" y="95.50"></text></g><g><title>nn`&lt;tensor_rs::TensorBase&lt;S,tensor_rs::OwnedData&lt;Dtype&gt;&gt; as tensor_rs::impl_constructors::TensorConstructors&lt;Dtype&gt;&gt;::ones (2 samples, 0.06%)</title><rect x="38.9871%" y="149" width="0.0599%" height="15" fill="rgb(231,124,27)" fg:x="1301" fg:w="2"/><text x="39.2371%" y="159.50"></text></g><g><title>nn`__rust_alloc (1 samples, 0.03%)</title><rect x="39.0171%" y="133" width="0.0300%" height="15" fill="rgb(249,195,6)" fg:x="1302" fg:w="1"/><text x="39.2671%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.03%)</title><rect x="39.0470%" y="101" width="0.0300%" height="15" fill="rgb(237,174,47)" fg:x="1303" fg:w="1"/><text x="39.2970%" y="111.50"></text></g><g><title>nn`&lt;tensor_rs::TensorBase&lt;S,tensor_rs::OwnedData&lt;Dtype&gt;&gt; as tensor_rs::impl_constructors::TensorConstructors&lt;Dtype&gt;&gt;::zeros (3 samples, 0.09%)</title><rect x="39.0470%" y="149" width="0.0899%" height="15" fill="rgb(206,201,31)" fg:x="1303" fg:w="3"/><text x="39.2970%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (3 samples, 0.09%)</title><rect x="39.0470%" y="133" width="0.0899%" height="15" fill="rgb(231,57,52)" fg:x="1303" fg:w="3"/><text x="39.2970%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (3 samples, 0.09%)</title><rect x="39.0470%" y="117" width="0.0899%" height="15" fill="rgb(248,177,22)" fg:x="1303" fg:w="3"/><text x="39.2970%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (2 samples, 0.06%)</title><rect x="39.0770%" y="101" width="0.0599%" height="15" fill="rgb(215,211,37)" fg:x="1304" fg:w="2"/><text x="39.3270%" y="111.50"></text></g><g><title>nn`&lt;tensor_rs::unique_id::UniqueId as core::hash::Hash&gt;::hash (1 samples, 0.03%)</title><rect x="39.1369%" y="149" width="0.0300%" height="15" fill="rgb(241,128,51)" fg:x="1306" fg:w="1"/><text x="39.3869%" y="159.50"></text></g><g><title>nn`DYLD-STUB$$malloc (1 samples, 0.03%)</title><rect x="39.1669%" y="149" width="0.0300%" height="15" fill="rgb(227,165,31)" fg:x="1307" fg:w="1"/><text x="39.4169%" y="159.50"></text></g><g><title>nn`DYLD-STUB$$memset_pattern16 (2 samples, 0.06%)</title><rect x="39.1969%" y="149" width="0.0599%" height="15" fill="rgb(228,167,24)" fg:x="1308" fg:w="2"/><text x="39.4469%" y="159.50"></text></g><g><title>nn`__rdl_alloc (2 samples, 0.06%)</title><rect x="39.2568%" y="149" width="0.0599%" height="15" fill="rgb(228,143,12)" fg:x="1310" fg:w="2"/><text x="39.5068%" y="159.50"></text></g><g><title>nn`matrixmultiply::gemm::gemm_loop (3 samples, 0.09%)</title><rect x="39.3168%" y="149" width="0.0899%" height="15" fill="rgb(249,149,8)" fg:x="1312" fg:w="3"/><text x="39.5668%" y="159.50"></text></g><g><title>nn`matrixmultiply::gemm::sgemm (3 samples, 0.09%)</title><rect x="39.4067%" y="149" width="0.0899%" height="15" fill="rgb(243,35,44)" fg:x="1315" fg:w="3"/><text x="39.6567%" y="159.50"></text></g><g><title>nn`&lt;tensor_rs::unique_id::UniqueId as core::hash::Hash&gt;::hash (1 samples, 0.03%)</title><rect x="39.5565%" y="133" width="0.0300%" height="15" fill="rgb(246,89,9)" fg:x="1320" fg:w="1"/><text x="39.8065%" y="143.50"></text></g><g><title>nn`tensor_rs::gradient::GradientMap::grad_by_id (7 samples, 0.21%)</title><rect x="39.4966%" y="149" width="0.2098%" height="15" fill="rgb(233,213,13)" fg:x="1318" fg:w="7"/><text x="39.7466%" y="159.50"></text></g><g><title>nn`core::hash::BuildHasher::hash_one (4 samples, 0.12%)</title><rect x="39.5865%" y="133" width="0.1199%" height="15" fill="rgb(233,141,41)" fg:x="1321" fg:w="4"/><text x="39.8365%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.03%)</title><rect x="40.4255%" y="117" width="0.0300%" height="15" fill="rgb(239,167,4)" fg:x="1349" fg:w="1"/><text x="40.6755%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (7 samples, 0.21%)</title><rect x="40.5154%" y="101" width="0.2098%" height="15" fill="rgb(209,217,16)" fg:x="1352" fg:w="7"/><text x="40.7654%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.06%)</title><rect x="40.6653%" y="85" width="0.0599%" height="15" fill="rgb(219,88,35)" fg:x="1357" fg:w="2"/><text x="40.9153%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (19 samples, 0.57%)</title><rect x="40.1858%" y="133" width="0.5694%" height="15" fill="rgb(220,193,23)" fg:x="1341" fg:w="19"/><text x="40.4358%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (10 samples, 0.30%)</title><rect x="40.4555%" y="117" width="0.2997%" height="15" fill="rgb(230,90,52)" fg:x="1350" fg:w="10"/><text x="40.7055%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.03%)</title><rect x="40.7252%" y="101" width="0.0300%" height="15" fill="rgb(252,106,19)" fg:x="1359" fg:w="1"/><text x="40.9752%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (1 samples, 0.03%)</title><rect x="40.7552%" y="133" width="0.0300%" height="15" fill="rgb(206,74,20)" fg:x="1360" fg:w="1"/><text x="41.0052%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (2 samples, 0.06%)</title><rect x="40.7851%" y="133" width="0.0599%" height="15" fill="rgb(230,138,44)" fg:x="1361" fg:w="2"/><text x="41.0351%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.06%)</title><rect x="40.8451%" y="133" width="0.0599%" height="15" fill="rgb(235,182,43)" fg:x="1363" fg:w="2"/><text x="41.0951%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (2 samples, 0.06%)</title><rect x="40.9050%" y="133" width="0.0599%" height="15" fill="rgb(242,16,51)" fg:x="1365" fg:w="2"/><text x="41.1550%" y="143.50"></text></g><g><title>nn`&lt;tensor_rs::unique_id::UniqueId as core::hash::Hash&gt;::hash (4 samples, 0.12%)</title><rect x="40.9649%" y="133" width="0.1199%" height="15" fill="rgb(248,9,4)" fg:x="1367" fg:w="4"/><text x="41.2149%" y="143.50"></text></g><g><title>nn`DYLD-STUB$$memset (1 samples, 0.03%)</title><rect x="41.0848%" y="133" width="0.0300%" height="15" fill="rgb(210,31,22)" fg:x="1371" fg:w="1"/><text x="41.3348%" y="143.50"></text></g><g><title>nn`DYLD-STUB$$memset_pattern16 (1 samples, 0.03%)</title><rect x="41.1148%" y="133" width="0.0300%" height="15" fill="rgb(239,54,39)" fg:x="1372" fg:w="1"/><text x="41.3648%" y="143.50"></text></g><g><title>nn`__rdl_alloc (1 samples, 0.03%)</title><rect x="41.1447%" y="133" width="0.0300%" height="15" fill="rgb(230,99,41)" fg:x="1373" fg:w="1"/><text x="41.3947%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.06%)</title><rect x="41.2346%" y="101" width="0.0599%" height="15" fill="rgb(253,106,12)" fg:x="1376" fg:w="2"/><text x="41.4846%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.09%)</title><rect x="41.3245%" y="85" width="0.0899%" height="15" fill="rgb(213,46,41)" fg:x="1379" fg:w="3"/><text x="41.5745%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (5 samples, 0.15%)</title><rect x="41.2946%" y="101" width="0.1498%" height="15" fill="rgb(215,133,35)" fg:x="1378" fg:w="5"/><text x="41.5446%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.03%)</title><rect x="41.4144%" y="85" width="0.0300%" height="15" fill="rgb(213,28,5)" fg:x="1382" fg:w="1"/><text x="41.6644%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (3 samples, 0.09%)</title><rect x="41.4444%" y="85" width="0.0899%" height="15" fill="rgb(215,77,49)" fg:x="1383" fg:w="3"/><text x="41.6944%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (1 samples, 0.03%)</title><rect x="41.5043%" y="69" width="0.0300%" height="15" fill="rgb(248,100,22)" fg:x="1385" fg:w="1"/><text x="41.7543%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (1 samples, 0.03%)</title><rect x="41.5043%" y="53" width="0.0300%" height="15" fill="rgb(208,67,9)" fg:x="1385" fg:w="1"/><text x="41.7543%" y="63.50"></text></g><g><title>libsystem_platform.dylib`__bzero (49 samples, 1.47%)</title><rect x="41.5343%" y="85" width="1.4684%" height="15" fill="rgb(219,133,21)" fg:x="1386" fg:w="49"/><text x="41.7843%" y="95.50"></text></g><g><title>nn`alloc::vec::from_elem (65 samples, 1.95%)</title><rect x="41.1747%" y="133" width="1.9479%" height="15" fill="rgb(246,46,29)" fg:x="1374" fg:w="65"/><text x="41.4247%" y="143.50">n..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (63 samples, 1.89%)</title><rect x="41.2346%" y="117" width="1.8879%" height="15" fill="rgb(246,185,52)" fg:x="1376" fg:w="63"/><text x="41.4846%" y="127.50">l..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (56 samples, 1.68%)</title><rect x="41.4444%" y="101" width="1.6782%" height="15" fill="rgb(252,136,11)" fg:x="1383" fg:w="56"/><text x="41.6944%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (4 samples, 0.12%)</title><rect x="43.0027%" y="85" width="0.1199%" height="15" fill="rgb(219,138,53)" fg:x="1435" fg:w="4"/><text x="43.2527%" y="95.50"></text></g><g><title>nn`core::hash::BuildHasher::hash_one (5 samples, 0.15%)</title><rect x="43.1226%" y="133" width="0.1498%" height="15" fill="rgb(211,51,23)" fg:x="1439" fg:w="5"/><text x="43.3726%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.03%)</title><rect x="43.7219%" y="101" width="0.0300%" height="15" fill="rgb(247,221,28)" fg:x="1459" fg:w="1"/><text x="43.9719%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.03%)</title><rect x="43.7219%" y="85" width="0.0300%" height="15" fill="rgb(251,222,45)" fg:x="1459" fg:w="1"/><text x="43.9719%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.03%)</title><rect x="43.7219%" y="69" width="0.0300%" height="15" fill="rgb(217,162,53)" fg:x="1459" fg:w="1"/><text x="43.9719%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.06%)</title><rect x="43.7519%" y="101" width="0.0599%" height="15" fill="rgb(229,93,14)" fg:x="1460" fg:w="2"/><text x="44.0019%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.06%)</title><rect x="43.7519%" y="85" width="0.0599%" height="15" fill="rgb(209,67,49)" fg:x="1460" fg:w="2"/><text x="44.0019%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (6 samples, 0.18%)</title><rect x="43.6620%" y="117" width="0.1798%" height="15" fill="rgb(213,87,29)" fg:x="1457" fg:w="6"/><text x="43.9120%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.03%)</title><rect x="43.8118%" y="101" width="0.0300%" height="15" fill="rgb(205,151,52)" fg:x="1462" fg:w="1"/><text x="44.0618%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.06%)</title><rect x="43.8418%" y="101" width="0.0599%" height="15" fill="rgb(253,215,39)" fg:x="1463" fg:w="2"/><text x="44.0918%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.09%)</title><rect x="43.8418%" y="117" width="0.0899%" height="15" fill="rgb(221,220,41)" fg:x="1463" fg:w="3"/><text x="44.0918%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.03%)</title><rect x="43.9017%" y="101" width="0.0300%" height="15" fill="rgb(218,133,21)" fg:x="1465" fg:w="1"/><text x="44.1517%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.03%)</title><rect x="43.9017%" y="85" width="0.0300%" height="15" fill="rgb(221,193,43)" fg:x="1465" fg:w="1"/><text x="44.1517%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 0.06%)</title><rect x="43.9317%" y="117" width="0.0599%" height="15" fill="rgb(240,128,52)" fg:x="1466" fg:w="2"/><text x="44.1817%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2 samples, 0.06%)</title><rect x="43.9317%" y="101" width="0.0599%" height="15" fill="rgb(253,114,12)" fg:x="1466" fg:w="2"/><text x="44.1817%" y="111.50"></text></g><g><title>nn`&lt;tensor_rs::unique_id::UniqueId as core::hash::Hash&gt;::hash (12 samples, 0.36%)</title><rect x="43.9916%" y="117" width="0.3596%" height="15" fill="rgb(215,223,47)" fg:x="1468" fg:w="12"/><text x="44.2416%" y="127.50"></text></g><g><title>nn`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (47 samples, 1.41%)</title><rect x="43.2724%" y="133" width="1.4085%" height="15" fill="rgb(248,225,23)" fg:x="1444" fg:w="47"/><text x="43.5224%" y="143.50"></text></g><g><title>nn`core::hash::BuildHasher::hash_one (11 samples, 0.33%)</title><rect x="44.3512%" y="117" width="0.3296%" height="15" fill="rgb(250,108,0)" fg:x="1480" fg:w="11"/><text x="44.6012%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.03%)</title><rect x="44.9206%" y="101" width="0.0300%" height="15" fill="rgb(228,208,7)" fg:x="1499" fg:w="1"/><text x="45.1706%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (10 samples, 0.30%)</title><rect x="44.8307%" y="117" width="0.2997%" height="15" fill="rgb(244,45,10)" fg:x="1496" fg:w="10"/><text x="45.0807%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (6 samples, 0.18%)</title><rect x="44.9506%" y="101" width="0.1798%" height="15" fill="rgb(207,125,25)" fg:x="1500" fg:w="6"/><text x="45.2006%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (5 samples, 0.15%)</title><rect x="44.9805%" y="85" width="0.1498%" height="15" fill="rgb(210,195,18)" fg:x="1501" fg:w="5"/><text x="45.2305%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (3 samples, 0.09%)</title><rect x="45.0405%" y="69" width="0.0899%" height="15" fill="rgb(249,80,12)" fg:x="1503" fg:w="3"/><text x="45.2905%" y="79.50"></text></g><g><title>nn`tensor_rs::gradient::GradientMap::mut_grad_by_id (182 samples, 5.45%)</title><rect x="39.7063%" y="149" width="5.4540%" height="15" fill="rgb(221,65,9)" fg:x="1325" fg:w="182"/><text x="39.9563%" y="159.50">nn`tens..</text></g><g><title>nn`tensor_rs::impl_methods::_&lt;impl tensor_rs::TensorBase&lt;S,tensor_rs::OwnedData&lt;Dtype&gt;&gt;&gt;::from_vec (16 samples, 0.48%)</title><rect x="44.6809%" y="133" width="0.4795%" height="15" fill="rgb(235,49,36)" fg:x="1491" fg:w="16"/><text x="44.9309%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.03%)</title><rect x="45.1304%" y="117" width="0.0300%" height="15" fill="rgb(225,32,20)" fg:x="1506" fg:w="1"/><text x="45.3804%" y="127.50"></text></g><g><title>nn`tensor_rs::impl_binary_ops::_&lt;impl core::ops::arith::AddAssign&lt;&amp;tensor_rs::TensorBase&lt;S,B&gt;&gt; for tensor_rs::TensorBase&lt;S,A&gt;&gt;::add_assign (6 samples, 0.18%)</title><rect x="45.1603%" y="149" width="0.1798%" height="15" fill="rgb(215,141,46)" fg:x="1507" fg:w="6"/><text x="45.4103%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.06%)</title><rect x="52.2026%" y="117" width="0.0599%" height="15" fill="rgb(250,160,47)" fg:x="1742" fg:w="2"/><text x="52.4526%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.03%)</title><rect x="52.2625%" y="117" width="0.0300%" height="15" fill="rgb(216,222,40)" fg:x="1744" fg:w="1"/><text x="52.5125%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free (7 samples, 0.21%)</title><rect x="52.1127%" y="133" width="0.2098%" height="15" fill="rgb(234,217,39)" fg:x="1739" fg:w="7"/><text x="52.3627%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.03%)</title><rect x="52.2925%" y="117" width="0.0300%" height="15" fill="rgb(207,178,40)" fg:x="1745" fg:w="1"/><text x="52.5425%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.03%)</title><rect x="52.2925%" y="101" width="0.0300%" height="15" fill="rgb(221,136,13)" fg:x="1745" fg:w="1"/><text x="52.5425%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (2 samples, 0.06%)</title><rect x="52.3224%" y="133" width="0.0599%" height="15" fill="rgb(249,199,10)" fg:x="1746" fg:w="2"/><text x="52.5724%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_small (2 samples, 0.06%)</title><rect x="52.3824%" y="133" width="0.0599%" height="15" fill="rgb(249,222,13)" fg:x="1748" fg:w="2"/><text x="52.6324%" y="143.50"></text></g><g><title>nn`tensor_rs::impl_binary_ops::_&lt;impl core::ops::arith::AddAssign&lt;tensor_rs::TensorBase&lt;S,B&gt;&gt; for tensor_rs::TensorBase&lt;S,A&gt;&gt;::add_assign (240 samples, 7.19%)</title><rect x="45.3401%" y="149" width="7.1921%" height="15" fill="rgb(244,185,38)" fg:x="1513" fg:w="240"/><text x="45.5901%" y="159.50">nn`tensor_..</text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (3 samples, 0.09%)</title><rect x="52.4423%" y="133" width="0.0899%" height="15" fill="rgb(236,202,9)" fg:x="1750" fg:w="3"/><text x="52.6923%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.03%)</title><rect x="52.6221%" y="133" width="0.0300%" height="15" fill="rgb(250,229,37)" fg:x="1756" fg:w="1"/><text x="52.8721%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.03%)</title><rect x="52.6221%" y="117" width="0.0300%" height="15" fill="rgb(206,174,23)" fg:x="1756" fg:w="1"/><text x="52.8721%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.03%)</title><rect x="52.6221%" y="101" width="0.0300%" height="15" fill="rgb(211,33,43)" fg:x="1756" fg:w="1"/><text x="52.8721%" y="111.50"></text></g><g><title>nn`tensor_rs::impl_binary_ops::_&lt;impl core::ops::arith::Mul&lt;&amp;tensor_rs::TensorBase&lt;S,A&gt;&gt; for &amp;tensor_rs::TensorBase&lt;S,B&gt;&gt;::mul (6 samples, 0.18%)</title><rect x="52.5322%" y="149" width="0.1798%" height="15" fill="rgb(245,58,50)" fg:x="1753" fg:w="6"/><text x="52.7822%" y="159.50"></text></g><g><title>nn`tensor_rs::impl_methods::_&lt;impl tensor_rs::TensorBase&lt;S,tensor_rs::OwnedData&lt;Dtype&gt;&gt;&gt;::from_vec (2 samples, 0.06%)</title><rect x="52.6521%" y="133" width="0.0599%" height="15" fill="rgb(244,68,36)" fg:x="1757" fg:w="2"/><text x="52.9021%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.06%)</title><rect x="52.6521%" y="117" width="0.0599%" height="15" fill="rgb(232,229,15)" fg:x="1757" fg:w="2"/><text x="52.9021%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.03%)</title><rect x="52.6820%" y="101" width="0.0300%" height="15" fill="rgb(254,30,23)" fg:x="1758" fg:w="1"/><text x="52.9320%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.03%)</title><rect x="52.6820%" y="85" width="0.0300%" height="15" fill="rgb(235,160,14)" fg:x="1758" fg:w="1"/><text x="52.9320%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.06%)</title><rect x="52.8619%" y="133" width="0.0599%" height="15" fill="rgb(212,155,44)" fg:x="1764" fg:w="2"/><text x="53.1119%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.03%)</title><rect x="52.8918%" y="117" width="0.0300%" height="15" fill="rgb(226,2,50)" fg:x="1765" fg:w="1"/><text x="53.1418%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.03%)</title><rect x="52.8918%" y="101" width="0.0300%" height="15" fill="rgb(234,177,6)" fg:x="1765" fg:w="1"/><text x="53.1418%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.03%)</title><rect x="52.8918%" y="85" width="0.0300%" height="15" fill="rgb(217,24,9)" fg:x="1765" fg:w="1"/><text x="53.1418%" y="95.50"></text></g><g><title>nn`tensor_rs::impl_binary_ops::_&lt;impl core::ops::arith::Mul&lt;&amp;tensor_rs::TensorBase&lt;S,A&gt;&gt; for tensor_rs::TensorBase&lt;S,B&gt;&gt;::mul (11 samples, 0.33%)</title><rect x="52.7120%" y="149" width="0.3296%" height="15" fill="rgb(220,13,46)" fg:x="1759" fg:w="11"/><text x="52.9620%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (4 samples, 0.12%)</title><rect x="52.9218%" y="133" width="0.1199%" height="15" fill="rgb(239,221,27)" fg:x="1766" fg:w="4"/><text x="53.1718%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.03%)</title><rect x="53.0117%" y="117" width="0.0300%" height="15" fill="rgb(222,198,25)" fg:x="1769" fg:w="1"/><text x="53.2617%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.06%)</title><rect x="53.1316%" y="133" width="0.0599%" height="15" fill="rgb(211,99,13)" fg:x="1773" fg:w="2"/><text x="53.3816%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.06%)</title><rect x="53.1316%" y="117" width="0.0599%" height="15" fill="rgb(232,111,31)" fg:x="1773" fg:w="2"/><text x="53.3816%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.06%)</title><rect x="53.1316%" y="101" width="0.0599%" height="15" fill="rgb(245,82,37)" fg:x="1773" fg:w="2"/><text x="53.3816%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.03%)</title><rect x="53.1615%" y="85" width="0.0300%" height="15" fill="rgb(227,149,46)" fg:x="1774" fg:w="1"/><text x="53.4115%" y="95.50"></text></g><g><title>nn`DYLD-STUB$$memset_pattern16 (1 samples, 0.03%)</title><rect x="53.1915%" y="133" width="0.0300%" height="15" fill="rgb(218,36,50)" fg:x="1775" fg:w="1"/><text x="53.4415%" y="143.50"></text></g><g><title>nn`tensor_rs::impl_methods::_&lt;impl tensor_rs::TensorBase&lt;S,A&gt;&gt;::map (7 samples, 0.21%)</title><rect x="53.0417%" y="149" width="0.2098%" height="15" fill="rgb(226,80,48)" fg:x="1770" fg:w="7"/><text x="53.2917%" y="159.50"></text></g><g><title>nn`tensor_rs::impl_methods::_&lt;impl tensor_rs::TensorBase&lt;S,tensor_rs::OwnedData&lt;Dtype&gt;&gt;&gt;::from_vec (1 samples, 0.03%)</title><rect x="53.2215%" y="133" width="0.0300%" height="15" fill="rgb(238,224,15)" fg:x="1776" fg:w="1"/><text x="53.4715%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.03%)</title><rect x="53.2215%" y="117" width="0.0300%" height="15" fill="rgb(241,136,10)" fg:x="1776" fg:w="1"/><text x="53.4715%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.03%)</title><rect x="53.2215%" y="101" width="0.0300%" height="15" fill="rgb(208,32,45)" fg:x="1776" fg:w="1"/><text x="53.4715%" y="111.50"></text></g><g><title>nn`tensor_rs::impl_methods::_&lt;impl tensor_rs::TensorBase&lt;S,tensor_rs::OwnedData&lt;Dtype&gt;&gt;&gt;::from_vec (3 samples, 0.09%)</title><rect x="53.2514%" y="149" width="0.0899%" height="15" fill="rgb(207,135,9)" fg:x="1777" fg:w="3"/><text x="53.5014%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.03%)</title><rect x="53.3713%" y="101" width="0.0300%" height="15" fill="rgb(206,86,44)" fg:x="1781" fg:w="1"/><text x="53.6213%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (1 samples, 0.03%)</title><rect x="53.4013%" y="101" width="0.0300%" height="15" fill="rgb(245,177,15)" fg:x="1782" fg:w="1"/><text x="53.6513%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`medium_malloc_should_clear (2 samples, 0.06%)</title><rect x="53.4312%" y="85" width="0.0599%" height="15" fill="rgb(206,64,50)" fg:x="1783" fg:w="2"/><text x="53.6812%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`medium_malloc_from_free_list (1 samples, 0.03%)</title><rect x="53.4612%" y="69" width="0.0300%" height="15" fill="rgb(234,36,40)" fg:x="1784" fg:w="1"/><text x="53.7112%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`medium_free_list_remove_ptr_no_clear (1 samples, 0.03%)</title><rect x="53.4612%" y="53" width="0.0300%" height="15" fill="rgb(213,64,8)" fg:x="1784" fg:w="1"/><text x="53.7112%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (3 samples, 0.09%)</title><rect x="53.4912%" y="85" width="0.0899%" height="15" fill="rgb(210,75,36)" fg:x="1785" fg:w="3"/><text x="53.7412%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (2 samples, 0.06%)</title><rect x="53.5211%" y="69" width="0.0599%" height="15" fill="rgb(229,88,21)" fg:x="1786" fg:w="2"/><text x="53.7711%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (2 samples, 0.06%)</title><rect x="53.5211%" y="53" width="0.0599%" height="15" fill="rgb(252,204,47)" fg:x="1786" fg:w="2"/><text x="53.7711%" y="63.50"></text></g><g><title>libsystem_platform.dylib`__bzero (48 samples, 1.44%)</title><rect x="53.5811%" y="85" width="1.4384%" height="15" fill="rgb(208,77,27)" fg:x="1788" fg:w="48"/><text x="53.8311%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (60 samples, 1.80%)</title><rect x="53.3713%" y="117" width="1.7980%" height="15" fill="rgb(221,76,26)" fg:x="1781" fg:w="60"/><text x="53.6213%" y="127.50">l..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (58 samples, 1.74%)</title><rect x="53.4312%" y="101" width="1.7381%" height="15" fill="rgb(225,139,18)" fg:x="1783" fg:w="58"/><text x="53.6812%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (5 samples, 0.15%)</title><rect x="55.0195%" y="85" width="0.1498%" height="15" fill="rgb(230,137,11)" fg:x="1836" fg:w="5"/><text x="55.2695%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (1 samples, 0.03%)</title><rect x="55.1693%" y="117" width="0.0300%" height="15" fill="rgb(212,28,1)" fg:x="1841" fg:w="1"/><text x="55.4193%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (1 samples, 0.03%)</title><rect x="55.1993%" y="117" width="0.0300%" height="15" fill="rgb(248,164,17)" fg:x="1842" fg:w="1"/><text x="55.4493%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.03%)</title><rect x="55.2292%" y="117" width="0.0300%" height="15" fill="rgb(222,171,42)" fg:x="1843" fg:w="1"/><text x="55.4792%" y="127.50"></text></g><g><title>nn`DYLD-STUB$$free (1 samples, 0.03%)</title><rect x="55.2592%" y="117" width="0.0300%" height="15" fill="rgb(243,84,45)" fg:x="1844" fg:w="1"/><text x="55.5092%" y="127.50"></text></g><g><title>nn`DYLD-STUB$$malloc (1 samples, 0.03%)</title><rect x="55.2892%" y="117" width="0.0300%" height="15" fill="rgb(252,49,23)" fg:x="1845" fg:w="1"/><text x="55.5392%" y="127.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (4 samples, 0.12%)</title><rect x="58.9152%" y="101" width="0.1199%" height="15" fill="rgb(215,19,7)" fg:x="1966" fg:w="4"/><text x="59.1652%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.03%)</title><rect x="59.0351%" y="85" width="0.0300%" height="15" fill="rgb(238,81,41)" fg:x="1970" fg:w="1"/><text x="59.2851%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.03%)</title><rect x="59.0351%" y="69" width="0.0300%" height="15" fill="rgb(210,199,37)" fg:x="1970" fg:w="1"/><text x="59.2851%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (1 samples, 0.03%)</title><rect x="59.1250%" y="53" width="0.0300%" height="15" fill="rgb(244,192,49)" fg:x="1973" fg:w="1"/><text x="59.3750%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (6 samples, 0.18%)</title><rect x="59.0351%" y="101" width="0.1798%" height="15" fill="rgb(226,211,11)" fg:x="1970" fg:w="6"/><text x="59.2851%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (5 samples, 0.15%)</title><rect x="59.0650%" y="85" width="0.1498%" height="15" fill="rgb(236,162,54)" fg:x="1971" fg:w="5"/><text x="59.3150%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (4 samples, 0.12%)</title><rect x="59.0950%" y="69" width="0.1199%" height="15" fill="rgb(220,229,9)" fg:x="1972" fg:w="4"/><text x="59.3450%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (2 samples, 0.06%)</title><rect x="59.1549%" y="53" width="0.0599%" height="15" fill="rgb(250,87,22)" fg:x="1974" fg:w="2"/><text x="59.4049%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (2 samples, 0.06%)</title><rect x="59.1549%" y="37" width="0.0599%" height="15" fill="rgb(239,43,17)" fg:x="1974" fg:w="2"/><text x="59.4049%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.03%)</title><rect x="59.2149%" y="101" width="0.0300%" height="15" fill="rgb(231,177,25)" fg:x="1976" fg:w="1"/><text x="59.4649%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.03%)</title><rect x="59.3048%" y="85" width="0.0300%" height="15" fill="rgb(219,179,1)" fg:x="1979" fg:w="1"/><text x="59.5548%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free (5 samples, 0.15%)</title><rect x="59.2448%" y="101" width="0.1498%" height="15" fill="rgb(238,219,53)" fg:x="1977" fg:w="5"/><text x="59.4948%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_size (2 samples, 0.06%)</title><rect x="59.3347%" y="85" width="0.0599%" height="15" fill="rgb(232,167,36)" fg:x="1980" fg:w="2"/><text x="59.5847%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_small (3 samples, 0.09%)</title><rect x="59.3947%" y="101" width="0.0899%" height="15" fill="rgb(244,19,51)" fg:x="1982" fg:w="3"/><text x="59.6447%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_find_by_ptr (1 samples, 0.03%)</title><rect x="59.4546%" y="85" width="0.0300%" height="15" fill="rgb(224,6,22)" fg:x="1984" fg:w="1"/><text x="59.7046%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.03%)</title><rect x="59.4846%" y="101" width="0.0300%" height="15" fill="rgb(224,145,5)" fg:x="1985" fg:w="1"/><text x="59.7346%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (1 samples, 0.03%)</title><rect x="59.5145%" y="101" width="0.0300%" height="15" fill="rgb(234,130,49)" fg:x="1986" fg:w="1"/><text x="59.7645%" y="111.50"></text></g><g><title>nn`matrixmultiply::gemm::gemm_loop (142 samples, 4.26%)</title><rect x="55.3191%" y="117" width="4.2553%" height="15" fill="rgb(254,6,2)" fg:x="1846" fg:w="142"/><text x="55.5691%" y="127.50">nn`ma..</text></g><g><title>nn`matrixmultiply::gemm::MASK_BUF::__getit (1 samples, 0.03%)</title><rect x="59.5445%" y="101" width="0.0300%" height="15" fill="rgb(208,96,46)" fg:x="1987" fg:w="1"/><text x="59.7945%" y="111.50"></text></g><g><title>nn`matrixmultiply::gemm::masked_kernel (1,153 samples, 34.55%)</title><rect x="59.5745%" y="117" width="34.5520%" height="15" fill="rgb(239,3,39)" fg:x="1988" fg:w="1153"/><text x="59.8245%" y="127.50">nn`matrixmultiply::gemm::masked_kernel</text></g><g><title>nn`matrixmultiply::gemm::pack (176 samples, 5.27%)</title><rect x="94.1265%" y="117" width="5.2742%" height="15" fill="rgb(233,210,1)" fg:x="3141" fg:w="176"/><text x="94.3765%" y="127.50">nn`mat..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.03%)</title><rect x="99.4306%" y="85" width="0.0300%" height="15" fill="rgb(244,137,37)" fg:x="3318" fg:w="1"/><text x="99.6806%" y="95.50"></text></g><g><title>nn`core::ops::function::FnOnce::call_once{{vtable.shim}} (2,054 samples, 61.55%)</title><rect x="37.9982%" y="165" width="61.5523%" height="15" fill="rgb(240,136,2)" fg:x="1268" fg:w="2054"/><text x="38.2482%" y="175.50">nn`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>nn`tensor_rs::impl_processing_ops::_&lt;impl tensor_rs::TensorBase&lt;[usize (1,542 samples, 46.21%)</title><rect x="53.3413%" y="149" width="46.2092%" height="15" fill="rgb(239,18,37)" fg:x="1780" fg:w="1542"/><text x="53.5913%" y="159.50">nn`tensor_rs::impl_processing_ops::_&lt;impl tensor_rs::TensorBase&lt;[usize</text></g><g><title> 2],A&gt;&gt;::dot (1,542 samples, 46.21%)</title><rect x="53.3413%" y="133" width="46.2092%" height="15" fill="rgb(218,185,22)" fg:x="1780" fg:w="1542"/><text x="53.5913%" y="143.50"> 2],A&gt;&gt;::dot</text></g><g><title>nn`tensor_rs::impl_methods::_&lt;impl tensor_rs::TensorBase&lt;S,tensor_rs::OwnedData&lt;Dtype&gt;&gt;&gt;::from_vec (5 samples, 0.15%)</title><rect x="99.4007%" y="117" width="0.1498%" height="15" fill="rgb(225,218,4)" fg:x="3317" fg:w="5"/><text x="99.6507%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.12%)</title><rect x="99.4306%" y="101" width="0.1199%" height="15" fill="rgb(230,182,32)" fg:x="3318" fg:w="4"/><text x="99.6806%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.09%)</title><rect x="99.4606%" y="85" width="0.0899%" height="15" fill="rgb(242,56,43)" fg:x="3319" fg:w="3"/><text x="99.7106%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.09%)</title><rect x="99.4606%" y="69" width="0.0899%" height="15" fill="rgb(233,99,24)" fg:x="3319" fg:w="3"/><text x="99.7106%" y="79.50"></text></g><g><title>nn`tensor_rs::impl_binary_ops::_&lt;impl core::ops::arith::AddAssign&lt;tensor_rs::TensorBase&lt;S,B&gt;&gt; for tensor_rs::TensorBase&lt;S,A&gt;&gt;::add_assign (1 samples, 0.03%)</title><rect x="99.5505%" y="165" width="0.0300%" height="15" fill="rgb(234,209,42)" fg:x="3322" fg:w="1"/><text x="99.8005%" y="175.50"></text></g><g><title>nn`tensor_rs::impl_binary_ops::_&lt;impl core::ops::arith::Mul&lt;&amp;tensor_rs::TensorBase&lt;S,A&gt;&gt; for &amp;tensor_rs::TensorBase&lt;S,B&gt;&gt;::mul (1 samples, 0.03%)</title><rect x="99.5805%" y="165" width="0.0300%" height="15" fill="rgb(227,7,12)" fg:x="3323" fg:w="1"/><text x="99.8305%" y="175.50"></text></g><g><title>nn`tensor_rs::impl_methods::_&lt;impl tensor_rs::TensorBase&lt;[usize (2,088 samples, 62.57%)</title><rect x="37.0692%" y="213" width="62.5712%" height="15" fill="rgb(245,203,43)" fg:x="1237" fg:w="2088"/><text x="37.3192%" y="223.50">nn`tensor_rs::impl_methods::_&lt;impl tensor_rs::TensorBase&lt;[usize</text></g><g><title> 0],A&gt;&gt;::backward (2,088 samples, 62.57%)</title><rect x="37.0692%" y="197" width="62.5712%" height="15" fill="rgb(238,205,33)" fg:x="1237" fg:w="2088"/><text x="37.3192%" y="207.50"> 0],A&gt;&gt;::backward</text></g><g><title>nn`tensor_rs::gradient::BackwardOps::execute (2,076 samples, 62.21%)</title><rect x="37.4288%" y="181" width="62.2116%" height="15" fill="rgb(231,56,7)" fg:x="1249" fg:w="2076"/><text x="37.6788%" y="191.50">nn`tensor_rs::gradient::BackwardOps::execute</text></g><g><title>nn`tensor_rs::impl_binary_ops::_&lt;impl core::ops::arith::SubAssign&lt;&amp;tensor_rs::TensorBase&lt;S,B&gt;&gt; for tensor_rs::TensorBase&lt;S,A&gt;&gt;::sub_assign (1 samples, 0.03%)</title><rect x="99.6104%" y="165" width="0.0300%" height="15" fill="rgb(244,186,29)" fg:x="3324" fg:w="1"/><text x="99.8604%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`read (11 samples, 0.33%)</title><rect x="99.6404%" y="181" width="0.3296%" height="15" fill="rgb(234,111,31)" fg:x="3325" fg:w="11"/><text x="99.8904%" y="191.50"></text></g><g><title>all (3,337 samples, 100%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(241,149,10)" fg:x="0" fg:w="3337"/><text x="0.2500%" y="335.50"></text></g><g><title>dyld`start (3,337 samples, 100.00%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(249,206,44)" fg:x="0" fg:w="3337"/><text x="0.2500%" y="319.50">dyld`start</text></g><g><title>nn`main (3,337 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(251,153,30)" fg:x="0" fg:w="3337"/><text x="0.2500%" y="303.50">nn`main</text></g><g><title>nn`std::rt::lang_start_internal (3,337 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(239,152,38)" fg:x="0" fg:w="3337"/><text x="0.2500%" y="287.50">nn`std::rt::lang_start_internal</text></g><g><title>nn`std::rt::lang_start::_{{closure}} (3,337 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(249,139,47)" fg:x="0" fg:w="3337"/><text x="0.2500%" y="271.50">nn`std::rt::lang_start::_{{closure}}</text></g><g><title>nn`std::sys_common::backtrace::__rust_begin_short_backtrace (3,337 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(244,64,35)" fg:x="0" fg:w="3337"/><text x="0.2500%" y="255.50">nn`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>nn`nn::main (3,331 samples, 99.82%)</title><rect x="0.1798%" y="229" width="99.8202%" height="15" fill="rgb(216,46,15)" fg:x="6" fg:w="3331"/><text x="0.4298%" y="239.50">nn`nn::main</text></g><g><title>nn`tensor_rs::mnist::mnist::load_data (12 samples, 0.36%)</title><rect x="99.6404%" y="213" width="0.3596%" height="15" fill="rgb(250,74,19)" fg:x="3325" fg:w="12"/><text x="99.8904%" y="223.50"></text></g><g><title>nn`std::fs::read::inner (12 samples, 0.36%)</title><rect x="99.6404%" y="197" width="0.3596%" height="15" fill="rgb(249,42,33)" fg:x="3325" fg:w="12"/><text x="99.8904%" y="207.50"></text></g><g><title>nn`std::sys::unix::fs::File::open_c (1 samples, 0.03%)</title><rect x="99.9700%" y="181" width="0.0300%" height="15" fill="rgb(242,149,17)" fg:x="3336" fg:w="1"/><text x="100.2200%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`__open (1 samples, 0.03%)</title><rect x="99.9700%" y="165" width="0.0300%" height="15" fill="rgb(244,29,21)" fg:x="3336" fg:w="1"/><text x="100.2200%" y="175.50"></text></g></svg></svg>