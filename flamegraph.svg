<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="374" onload="init(evt)" viewBox="0 0 1200 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="374" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="357.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="357.00"> </text><svg id="frames" x="10" width="1180" total_samples="22962"><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (4 samples, 0.02%)</title><rect x="0.6184%" y="213" width="0.0174%" height="15" fill="rgb(227,0,7)" fg:x="142" fg:w="4"/><text x="0.8684%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (8 samples, 0.03%)</title><rect x="0.7447%" y="197" width="0.0348%" height="15" fill="rgb(217,0,24)" fg:x="171" fg:w="8"/><text x="0.9947%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (38 samples, 0.17%)</title><rect x="0.6358%" y="213" width="0.1655%" height="15" fill="rgb(221,193,54)" fg:x="146" fg:w="38"/><text x="0.8858%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (4 samples, 0.02%)</title><rect x="0.7839%" y="197" width="0.0174%" height="15" fill="rgb(248,212,6)" fg:x="180" fg:w="4"/><text x="1.0339%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (4 samples, 0.02%)</title><rect x="0.7839%" y="181" width="0.0174%" height="15" fill="rgb(208,68,35)" fg:x="180" fg:w="4"/><text x="1.0339%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (6 samples, 0.03%)</title><rect x="0.8100%" y="213" width="0.0261%" height="15" fill="rgb(232,128,0)" fg:x="186" fg:w="6"/><text x="1.0600%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (3 samples, 0.01%)</title><rect x="0.8231%" y="197" width="0.0131%" height="15" fill="rgb(207,160,47)" fg:x="189" fg:w="3"/><text x="1.0731%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (9 samples, 0.04%)</title><rect x="0.8362%" y="213" width="0.0392%" height="15" fill="rgb(228,23,34)" fg:x="192" fg:w="9"/><text x="1.0862%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (15 samples, 0.07%)</title><rect x="0.8754%" y="213" width="0.0653%" height="15" fill="rgb(218,30,26)" fg:x="201" fg:w="15"/><text x="1.1254%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (5 samples, 0.02%)</title><rect x="0.9407%" y="213" width="0.0218%" height="15" fill="rgb(220,122,19)" fg:x="216" fg:w="5"/><text x="1.1907%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset_pattern16 (10 samples, 0.04%)</title><rect x="0.9712%" y="213" width="0.0436%" height="15" fill="rgb(250,228,42)" fg:x="223" fg:w="10"/><text x="1.2212%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (10 samples, 0.04%)</title><rect x="1.0670%" y="197" width="0.0436%" height="15" fill="rgb(240,193,28)" fg:x="245" fg:w="10"/><text x="1.3170%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (53 samples, 0.23%)</title><rect x="1.1105%" y="197" width="0.2308%" height="15" fill="rgb(216,20,37)" fg:x="255" fg:w="53"/><text x="1.3605%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (15 samples, 0.07%)</title><rect x="1.2760%" y="181" width="0.0653%" height="15" fill="rgb(206,188,39)" fg:x="293" fg:w="15"/><text x="1.5260%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (13 samples, 0.06%)</title><rect x="1.3413%" y="197" width="0.0566%" height="15" fill="rgb(217,207,13)" fg:x="308" fg:w="13"/><text x="1.5913%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (38 samples, 0.17%)</title><rect x="1.3980%" y="197" width="0.1655%" height="15" fill="rgb(231,73,38)" fg:x="321" fg:w="38"/><text x="1.6480%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (3 samples, 0.01%)</title><rect x="1.5635%" y="197" width="0.0131%" height="15" fill="rgb(225,20,46)" fg:x="359" fg:w="3"/><text x="1.8135%" y="207.50"></text></g><g><title>nn`DYLD-STUB$$free (5 samples, 0.02%)</title><rect x="1.5765%" y="197" width="0.0218%" height="15" fill="rgb(210,31,41)" fg:x="362" fg:w="5"/><text x="1.8265%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.01%)</title><rect x="1.5983%" y="165" width="0.0131%" height="15" fill="rgb(221,200,47)" fg:x="367" fg:w="3"/><text x="1.8483%" y="175.50"></text></g><g><title> 0]&gt;&gt; (6 samples, 0.03%)</title><rect x="1.5983%" y="181" width="0.0261%" height="15" fill="rgb(226,26,5)" fg:x="367" fg:w="6"/><text x="1.8483%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (48 samples, 0.21%)</title><rect x="1.8465%" y="149" width="0.2090%" height="15" fill="rgb(249,33,26)" fg:x="424" fg:w="48"/><text x="2.0965%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_size (9 samples, 0.04%)</title><rect x="2.0599%" y="149" width="0.0392%" height="15" fill="rgb(235,183,28)" fg:x="473" fg:w="9"/><text x="2.3099%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (106 samples, 0.46%)</title><rect x="1.6506%" y="165" width="0.4616%" height="15" fill="rgb(221,5,38)" fg:x="379" fg:w="106"/><text x="1.9006%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (3 samples, 0.01%)</title><rect x="2.0991%" y="149" width="0.0131%" height="15" fill="rgb(247,18,42)" fg:x="482" fg:w="3"/><text x="2.3491%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (13 samples, 0.06%)</title><rect x="2.1122%" y="165" width="0.0566%" height="15" fill="rgb(241,131,45)" fg:x="485" fg:w="13"/><text x="2.3622%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`medium_free_list_add_ptr (3 samples, 0.01%)</title><rect x="2.1557%" y="149" width="0.0131%" height="15" fill="rgb(249,31,29)" fg:x="495" fg:w="3"/><text x="2.4057%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (5 samples, 0.02%)</title><rect x="2.2211%" y="149" width="0.0218%" height="15" fill="rgb(225,111,53)" fg:x="510" fg:w="5"/><text x="2.4711%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_small (24 samples, 0.10%)</title><rect x="2.1688%" y="165" width="0.1045%" height="15" fill="rgb(238,160,17)" fg:x="498" fg:w="24"/><text x="2.4188%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (4 samples, 0.02%)</title><rect x="2.2559%" y="149" width="0.0174%" height="15" fill="rgb(214,148,48)" fg:x="518" fg:w="4"/><text x="2.5059%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (3 samples, 0.01%)</title><rect x="2.2733%" y="165" width="0.0131%" height="15" fill="rgb(232,36,49)" fg:x="522" fg:w="3"/><text x="2.5233%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (18 samples, 0.08%)</title><rect x="2.2864%" y="165" width="0.0784%" height="15" fill="rgb(209,103,24)" fg:x="525" fg:w="18"/><text x="2.5364%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (6 samples, 0.03%)</title><rect x="2.3648%" y="165" width="0.0261%" height="15" fill="rgb(229,88,8)" fg:x="543" fg:w="6"/><text x="2.6148%" y="175.50"></text></g><g><title>nn`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (317 samples, 1.38%)</title><rect x="1.0234%" y="213" width="1.3805%" height="15" fill="rgb(213,181,19)" fg:x="235" fg:w="317"/><text x="1.2734%" y="223.50"></text></g><g><title>nn`core::ptr::drop_in_place&lt;tensor_rs::TensorBase&lt;[usize (185 samples, 0.81%)</title><rect x="1.5983%" y="197" width="0.8057%" height="15" fill="rgb(254,191,54)" fg:x="367" fg:w="185"/><text x="1.8483%" y="207.50"></text></g><g><title> 2]&gt;&gt; (179 samples, 0.78%)</title><rect x="1.6244%" y="181" width="0.7795%" height="15" fill="rgb(241,83,37)" fg:x="373" fg:w="179"/><text x="1.8744%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (9 samples, 0.04%)</title><rect x="2.4737%" y="197" width="0.0392%" height="15" fill="rgb(233,36,39)" fg:x="568" fg:w="9"/><text x="2.7237%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (9 samples, 0.04%)</title><rect x="2.4737%" y="181" width="0.0392%" height="15" fill="rgb(226,3,54)" fg:x="568" fg:w="9"/><text x="2.7237%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (7 samples, 0.03%)</title><rect x="2.4824%" y="165" width="0.0305%" height="15" fill="rgb(245,192,40)" fg:x="570" fg:w="7"/><text x="2.7324%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (5 samples, 0.02%)</title><rect x="2.5695%" y="133" width="0.0218%" height="15" fill="rgb(238,167,29)" fg:x="590" fg:w="5"/><text x="2.8195%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.02%)</title><rect x="2.5999%" y="117" width="0.0174%" height="15" fill="rgb(232,182,51)" fg:x="597" fg:w="4"/><text x="2.8499%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.01%)</title><rect x="2.6043%" y="101" width="0.0131%" height="15" fill="rgb(231,60,39)" fg:x="598" fg:w="3"/><text x="2.8543%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (14 samples, 0.06%)</title><rect x="2.5608%" y="149" width="0.0610%" height="15" fill="rgb(208,69,12)" fg:x="588" fg:w="14"/><text x="2.8108%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (7 samples, 0.03%)</title><rect x="2.5912%" y="133" width="0.0305%" height="15" fill="rgb(235,93,37)" fg:x="595" fg:w="7"/><text x="2.8412%" y="143.50"></text></g><g><title>nn`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (24 samples, 0.10%)</title><rect x="2.5216%" y="197" width="0.1045%" height="15" fill="rgb(213,116,39)" fg:x="579" fg:w="24"/><text x="2.7716%" y="207.50"></text></g><g><title>nn`alloc::raw_vec::finish_grow (22 samples, 0.10%)</title><rect x="2.5303%" y="181" width="0.0958%" height="15" fill="rgb(222,207,29)" fg:x="581" fg:w="22"/><text x="2.7803%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (18 samples, 0.08%)</title><rect x="2.5477%" y="165" width="0.0784%" height="15" fill="rgb(206,96,30)" fg:x="585" fg:w="18"/><text x="2.7977%" y="175.50"></text></g><g><title>nn`&lt;tensor_rs::TensorBase&lt;L,tensor_rs::OwnedData&lt;Dtype&gt;&gt; as tensor_rs::impl_binary_ops::TensorBinaryOps&lt;tensor_rs::TensorBase&lt;R,tensor_rs::OwnedData&lt;Dtype&gt;&gt;&gt;&gt;::add (57 samples, 0.25%)</title><rect x="2.4040%" y="213" width="0.2482%" height="15" fill="rgb(218,138,4)" fg:x="552" fg:w="57"/><text x="2.6540%" y="223.50"></text></g><g><title>nn`tensor_rs::utils::merge_backward_ops (4 samples, 0.02%)</title><rect x="2.6348%" y="197" width="0.0174%" height="15" fill="rgb(250,191,14)" fg:x="605" fg:w="4"/><text x="2.8848%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.01%)</title><rect x="2.7524%" y="149" width="0.0131%" height="15" fill="rgb(239,60,40)" fg:x="632" fg:w="3"/><text x="3.0024%" y="159.50"></text></g><g><title>nn`tensor_rs::gradient::BackwardOps::add_backward_op (11 samples, 0.05%)</title><rect x="2.7219%" y="197" width="0.0479%" height="15" fill="rgb(206,27,48)" fg:x="625" fg:w="11"/><text x="2.9719%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (8 samples, 0.03%)</title><rect x="2.7350%" y="181" width="0.0348%" height="15" fill="rgb(225,35,8)" fg:x="628" fg:w="8"/><text x="2.9850%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (5 samples, 0.02%)</title><rect x="2.7480%" y="165" width="0.0218%" height="15" fill="rgb(250,213,24)" fg:x="631" fg:w="5"/><text x="2.9980%" y="175.50"></text></g><g><title>nn`&lt;tensor_rs::TensorBase&lt;L,tensor_rs::OwnedData&lt;Dtype&gt;&gt; as tensor_rs::impl_binary_ops::TensorBinaryOps&lt;tensor_rs::TensorBase&lt;R,tensor_rs::OwnedData&lt;Dtype&gt;&gt;&gt;&gt;::mul (30 samples, 0.13%)</title><rect x="2.6522%" y="213" width="0.1307%" height="15" fill="rgb(247,123,22)" fg:x="609" fg:w="30"/><text x="2.9022%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (6 samples, 0.03%)</title><rect x="2.8351%" y="165" width="0.0261%" height="15" fill="rgb(231,138,38)" fg:x="651" fg:w="6"/><text x="3.0851%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (3 samples, 0.01%)</title><rect x="2.8482%" y="149" width="0.0131%" height="15" fill="rgb(231,145,46)" fg:x="654" fg:w="3"/><text x="3.0982%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (11 samples, 0.05%)</title><rect x="2.8177%" y="197" width="0.0479%" height="15" fill="rgb(251,118,11)" fg:x="647" fg:w="11"/><text x="3.0677%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (9 samples, 0.04%)</title><rect x="2.8264%" y="181" width="0.0392%" height="15" fill="rgb(217,147,25)" fg:x="649" fg:w="9"/><text x="3.0764%" y="191.50"></text></g><g><title>nn`&lt;tensor_rs::TensorBase&lt;L,tensor_rs::OwnedData&lt;Dtype&gt;&gt; as tensor_rs::impl_binary_ops::TensorBinaryOps&lt;tensor_rs::TensorBase&lt;R,tensor_rs::OwnedData&lt;Dtype&gt;&gt;&gt;&gt;::sub (23 samples, 0.10%)</title><rect x="2.7829%" y="213" width="0.1002%" height="15" fill="rgb(247,81,37)" fg:x="639" fg:w="23"/><text x="3.0329%" y="223.50"></text></g><g><title>nn`tensor_rs::utils::merge_backward_ops (3 samples, 0.01%)</title><rect x="2.8700%" y="197" width="0.0131%" height="15" fill="rgb(209,12,38)" fg:x="659" fg:w="3"/><text x="3.1200%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (7 samples, 0.03%)</title><rect x="2.9440%" y="197" width="0.0305%" height="15" fill="rgb(227,1,9)" fg:x="676" fg:w="7"/><text x="3.1940%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (5 samples, 0.02%)</title><rect x="2.9527%" y="181" width="0.0218%" height="15" fill="rgb(248,47,43)" fg:x="678" fg:w="5"/><text x="3.2027%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (5 samples, 0.02%)</title><rect x="2.9527%" y="165" width="0.0218%" height="15" fill="rgb(221,10,30)" fg:x="678" fg:w="5"/><text x="3.2027%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (9 samples, 0.04%)</title><rect x="3.0180%" y="181" width="0.0392%" height="15" fill="rgb(210,229,1)" fg:x="693" fg:w="9"/><text x="3.2680%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.02%)</title><rect x="3.0398%" y="165" width="0.0174%" height="15" fill="rgb(222,148,37)" fg:x="698" fg:w="4"/><text x="3.2898%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (4 samples, 0.02%)</title><rect x="3.0398%" y="149" width="0.0174%" height="15" fill="rgb(234,67,33)" fg:x="698" fg:w="4"/><text x="3.2898%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (3 samples, 0.01%)</title><rect x="3.0921%" y="101" width="0.0131%" height="15" fill="rgb(247,98,35)" fg:x="710" fg:w="3"/><text x="3.3421%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.01%)</title><rect x="3.1051%" y="101" width="0.0131%" height="15" fill="rgb(247,138,52)" fg:x="713" fg:w="3"/><text x="3.3551%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (9 samples, 0.04%)</title><rect x="3.0877%" y="117" width="0.0392%" height="15" fill="rgb(213,79,30)" fg:x="709" fg:w="9"/><text x="3.3377%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (15 samples, 0.07%)</title><rect x="3.0746%" y="133" width="0.0653%" height="15" fill="rgb(246,177,23)" fg:x="706" fg:w="15"/><text x="3.3246%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.01%)</title><rect x="3.1269%" y="117" width="0.0131%" height="15" fill="rgb(230,62,27)" fg:x="718" fg:w="3"/><text x="3.3769%" y="127.50"></text></g><g><title>nn`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (23 samples, 0.10%)</title><rect x="3.0572%" y="181" width="0.1002%" height="15" fill="rgb(216,154,8)" fg:x="702" fg:w="23"/><text x="3.3072%" y="191.50"></text></g><g><title>nn`alloc::raw_vec::finish_grow (20 samples, 0.09%)</title><rect x="3.0703%" y="165" width="0.0871%" height="15" fill="rgb(244,35,45)" fg:x="705" fg:w="20"/><text x="3.3203%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`realloc (20 samples, 0.09%)</title><rect x="3.0703%" y="149" width="0.0871%" height="15" fill="rgb(251,115,12)" fg:x="705" fg:w="20"/><text x="3.3203%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (4 samples, 0.02%)</title><rect x="3.1400%" y="133" width="0.0174%" height="15" fill="rgb(240,54,50)" fg:x="721" fg:w="4"/><text x="3.3900%" y="143.50"></text></g><g><title>nn`tensor_rs::gradient::BackwardOps::add_backward_op (42 samples, 0.18%)</title><rect x="2.9788%" y="197" width="0.1829%" height="15" fill="rgb(233,84,52)" fg:x="684" fg:w="42"/><text x="3.2288%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (9 samples, 0.04%)</title><rect x="3.1705%" y="181" width="0.0392%" height="15" fill="rgb(207,117,47)" fg:x="728" fg:w="9"/><text x="3.4205%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (6 samples, 0.03%)</title><rect x="3.1835%" y="165" width="0.0261%" height="15" fill="rgb(249,43,39)" fg:x="731" fg:w="6"/><text x="3.4335%" y="175.50"></text></g><g><title>nn`&lt;tensor_rs::TensorBase&lt;S,A&gt; as tensor_rs::impl_reduce_ops::ReduceOps&gt;::sum (76 samples, 0.33%)</title><rect x="2.8830%" y="213" width="0.3310%" height="15" fill="rgb(209,38,44)" fg:x="662" fg:w="76"/><text x="3.1330%" y="223.50"></text></g><g><title>nn`tensor_rs::impl_methods::_&lt;impl tensor_rs::TensorBase&lt;S,tensor_rs::OwnedData&lt;Dtype&gt;&gt;&gt;::from_vec (12 samples, 0.05%)</title><rect x="3.1617%" y="197" width="0.0523%" height="15" fill="rgb(236,212,23)" fg:x="726" fg:w="12"/><text x="3.4117%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (16 samples, 0.07%)</title><rect x="3.3185%" y="181" width="0.0697%" height="15" fill="rgb(242,79,21)" fg:x="762" fg:w="16"/><text x="3.5685%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (10 samples, 0.04%)</title><rect x="3.3447%" y="165" width="0.0436%" height="15" fill="rgb(211,96,35)" fg:x="768" fg:w="10"/><text x="3.5947%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (7 samples, 0.03%)</title><rect x="3.3577%" y="149" width="0.0305%" height="15" fill="rgb(253,215,40)" fg:x="771" fg:w="7"/><text x="3.6077%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (3 samples, 0.01%)</title><rect x="3.3751%" y="133" width="0.0131%" height="15" fill="rgb(211,81,21)" fg:x="775" fg:w="3"/><text x="3.6251%" y="143.50"></text></g><g><title>nn`&lt;f32 as tensor_rs::DataElement&gt;::sigmoid (59 samples, 0.26%)</title><rect x="3.4013%" y="181" width="0.2569%" height="15" fill="rgb(208,190,38)" fg:x="781" fg:w="59"/><text x="3.6513%" y="191.50"></text></g><g><title>libsystem_m.dylib`expf (47 samples, 0.20%)</title><rect x="3.4535%" y="165" width="0.2047%" height="15" fill="rgb(235,213,38)" fg:x="793" fg:w="47"/><text x="3.7035%" y="175.50"></text></g><g><title>nn`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (100 samples, 0.44%)</title><rect x="3.2619%" y="197" width="0.4355%" height="15" fill="rgb(237,122,38)" fg:x="749" fg:w="100"/><text x="3.5119%" y="207.50"></text></g><g><title>nn`DYLD-STUB$$expf (9 samples, 0.04%)</title><rect x="3.6582%" y="181" width="0.0392%" height="15" fill="rgb(244,218,35)" fg:x="840" fg:w="9"/><text x="3.9082%" y="191.50"></text></g><g><title>nn`DYLD-STUB$$malloc (3 samples, 0.01%)</title><rect x="3.6974%" y="197" width="0.0131%" height="15" fill="rgb(240,68,47)" fg:x="849" fg:w="3"/><text x="3.9474%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (9 samples, 0.04%)</title><rect x="3.7497%" y="181" width="0.0392%" height="15" fill="rgb(210,16,53)" fg:x="861" fg:w="9"/><text x="3.9997%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (8 samples, 0.03%)</title><rect x="3.7540%" y="165" width="0.0348%" height="15" fill="rgb(235,124,12)" fg:x="862" fg:w="8"/><text x="4.0040%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (5 samples, 0.02%)</title><rect x="3.7671%" y="149" width="0.0218%" height="15" fill="rgb(224,169,11)" fg:x="865" fg:w="5"/><text x="4.0171%" y="159.50"></text></g><g><title>nn`tensor_rs::gradient::BackwardOps::add_backward_op (16 samples, 0.07%)</title><rect x="3.7235%" y="197" width="0.0697%" height="15" fill="rgb(250,166,2)" fg:x="855" fg:w="16"/><text x="3.9735%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (10 samples, 0.04%)</title><rect x="3.8411%" y="149" width="0.0436%" height="15" fill="rgb(242,216,29)" fg:x="882" fg:w="10"/><text x="4.0911%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (5 samples, 0.02%)</title><rect x="3.8629%" y="133" width="0.0218%" height="15" fill="rgb(230,116,27)" fg:x="887" fg:w="5"/><text x="4.1129%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (19 samples, 0.08%)</title><rect x="3.8063%" y="181" width="0.0827%" height="15" fill="rgb(228,99,48)" fg:x="874" fg:w="19"/><text x="4.0563%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (12 samples, 0.05%)</title><rect x="3.8368%" y="165" width="0.0523%" height="15" fill="rgb(253,11,6)" fg:x="881" fg:w="12"/><text x="4.0868%" y="175.50"></text></g><g><title>nn`&lt;tensor_rs::TensorBase&lt;S&gt; as tensor_rs::impl_unary_ops::TensorUnaryOps&gt;::sigmoid (156 samples, 0.68%)</title><rect x="3.2140%" y="213" width="0.6794%" height="15" fill="rgb(247,143,39)" fg:x="738" fg:w="156"/><text x="3.4640%" y="223.50"></text></g><g><title>nn`tensor_rs::impl_methods::_&lt;impl tensor_rs::TensorBase&lt;S,tensor_rs::OwnedData&lt;Dtype&gt;&gt;&gt;::from_vec (23 samples, 0.10%)</title><rect x="3.7932%" y="197" width="0.1002%" height="15" fill="rgb(236,97,10)" fg:x="871" fg:w="23"/><text x="4.0432%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.01%)</title><rect x="3.9761%" y="133" width="0.0131%" height="15" fill="rgb(233,208,19)" fg:x="913" fg:w="3"/><text x="4.2261%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (14 samples, 0.06%)</title><rect x="3.9413%" y="165" width="0.0610%" height="15" fill="rgb(216,164,2)" fg:x="905" fg:w="14"/><text x="4.1913%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (10 samples, 0.04%)</title><rect x="3.9587%" y="149" width="0.0436%" height="15" fill="rgb(220,129,5)" fg:x="909" fg:w="10"/><text x="4.2087%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (3 samples, 0.01%)</title><rect x="3.9892%" y="133" width="0.0131%" height="15" fill="rgb(242,17,10)" fg:x="916" fg:w="3"/><text x="4.2392%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.02%)</title><rect x="4.0023%" y="165" width="0.0174%" height="15" fill="rgb(242,107,0)" fg:x="919" fg:w="4"/><text x="4.2523%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.01%)</title><rect x="4.0197%" y="165" width="0.0131%" height="15" fill="rgb(251,28,31)" fg:x="923" fg:w="3"/><text x="4.2697%" y="175.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (12 samples, 0.05%)</title><rect x="4.7992%" y="149" width="0.0523%" height="15" fill="rgb(233,223,10)" fg:x="1102" fg:w="12"/><text x="5.0492%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`medium_malloc_should_clear (3 samples, 0.01%)</title><rect x="4.8907%" y="117" width="0.0131%" height="15" fill="rgb(215,21,27)" fg:x="1123" fg:w="3"/><text x="5.1407%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (28 samples, 0.12%)</title><rect x="4.8515%" y="149" width="0.1219%" height="15" fill="rgb(232,23,21)" fg:x="1114" fg:w="28"/><text x="5.1015%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (22 samples, 0.10%)</title><rect x="4.8776%" y="133" width="0.0958%" height="15" fill="rgb(244,5,23)" fg:x="1120" fg:w="22"/><text x="5.1276%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (16 samples, 0.07%)</title><rect x="4.9038%" y="117" width="0.0697%" height="15" fill="rgb(226,81,46)" fg:x="1126" fg:w="16"/><text x="5.1538%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (15 samples, 0.07%)</title><rect x="4.9081%" y="101" width="0.0653%" height="15" fill="rgb(247,70,30)" fg:x="1127" fg:w="15"/><text x="5.1581%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (5 samples, 0.02%)</title><rect x="4.9517%" y="85" width="0.0218%" height="15" fill="rgb(212,68,19)" fg:x="1137" fg:w="5"/><text x="5.2017%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_size (5 samples, 0.02%)</title><rect x="4.9952%" y="133" width="0.0218%" height="15" fill="rgb(240,187,13)" fg:x="1147" fg:w="5"/><text x="5.2452%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (20 samples, 0.09%)</title><rect x="4.9778%" y="149" width="0.0871%" height="15" fill="rgb(223,113,26)" fg:x="1143" fg:w="20"/><text x="5.2278%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (11 samples, 0.05%)</title><rect x="5.0170%" y="133" width="0.0479%" height="15" fill="rgb(206,192,2)" fg:x="1152" fg:w="11"/><text x="5.2670%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (6 samples, 0.03%)</title><rect x="5.0388%" y="117" width="0.0261%" height="15" fill="rgb(241,108,4)" fg:x="1157" fg:w="6"/><text x="5.2888%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`medium_free_list_add_ptr (9 samples, 0.04%)</title><rect x="5.1215%" y="133" width="0.0392%" height="15" fill="rgb(247,173,49)" fg:x="1176" fg:w="9"/><text x="5.3715%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`medium_free_list_find_by_ptr (3 samples, 0.01%)</title><rect x="5.1607%" y="133" width="0.0131%" height="15" fill="rgb(224,114,35)" fg:x="1185" fg:w="3"/><text x="5.4107%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (30 samples, 0.13%)</title><rect x="5.0649%" y="149" width="0.1307%" height="15" fill="rgb(245,159,27)" fg:x="1163" fg:w="30"/><text x="5.3149%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`medium_free_list_remove_ptr_no_clear (3 samples, 0.01%)</title><rect x="5.1825%" y="133" width="0.0131%" height="15" fill="rgb(245,172,44)" fg:x="1190" fg:w="3"/><text x="5.4325%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_small (13 samples, 0.06%)</title><rect x="5.1955%" y="149" width="0.0566%" height="15" fill="rgb(236,23,11)" fg:x="1193" fg:w="13"/><text x="5.4455%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (3 samples, 0.01%)</title><rect x="5.2391%" y="133" width="0.0131%" height="15" fill="rgb(205,117,38)" fg:x="1203" fg:w="3"/><text x="5.4891%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (4 samples, 0.02%)</title><rect x="5.2652%" y="149" width="0.0174%" height="15" fill="rgb(237,72,25)" fg:x="1209" fg:w="4"/><text x="5.5152%" y="159.50"></text></g><g><title>nn`matrixmultiply::gemm::gemm_loop (284 samples, 1.24%)</title><rect x="4.0545%" y="165" width="1.2368%" height="15" fill="rgb(244,70,9)" fg:x="931" fg:w="284"/><text x="4.3045%" y="175.50"></text></g><g><title>nn`matrixmultiply::gemm::masked_kernel (3,059 samples, 13.32%)</title><rect x="5.2914%" y="165" width="13.3220%" height="15" fill="rgb(217,125,39)" fg:x="1215" fg:w="3059"/><text x="5.5414%" y="175.50">nn`matrixmultiply::g..</text></g><g><title>nn`matrixmultiply::gemm::pack (1,946 samples, 8.47%)</title><rect x="18.6134%" y="165" width="8.4749%" height="15" fill="rgb(235,36,10)" fg:x="4274" fg:w="1946"/><text x="18.8634%" y="175.50">nn`matrixmul..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (8 samples, 0.03%)</title><rect x="27.1274%" y="133" width="0.0348%" height="15" fill="rgb(251,123,47)" fg:x="6229" fg:w="8"/><text x="27.3774%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (20 samples, 0.09%)</title><rect x="27.1144%" y="149" width="0.0871%" height="15" fill="rgb(221,13,13)" fg:x="6226" fg:w="20"/><text x="27.3644%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (9 samples, 0.04%)</title><rect x="27.1623%" y="133" width="0.0392%" height="15" fill="rgb(238,131,9)" fg:x="6237" fg:w="9"/><text x="27.4123%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (7 samples, 0.03%)</title><rect x="27.1710%" y="117" width="0.0305%" height="15" fill="rgb(211,50,8)" fg:x="6239" fg:w="7"/><text x="27.4210%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (4 samples, 0.02%)</title><rect x="27.1840%" y="101" width="0.0174%" height="15" fill="rgb(245,182,24)" fg:x="6242" fg:w="4"/><text x="27.4340%" y="111.50"></text></g><g><title>nn`tensor_rs::gradient::BackwardOps::add_backward_op (40 samples, 0.17%)</title><rect x="27.0882%" y="165" width="0.1742%" height="15" fill="rgb(242,14,37)" fg:x="6220" fg:w="40"/><text x="27.3382%" y="175.50"></text></g><g><title>nn`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (13 samples, 0.06%)</title><rect x="27.2058%" y="149" width="0.0566%" height="15" fill="rgb(246,228,12)" fg:x="6247" fg:w="13"/><text x="27.4558%" y="159.50"></text></g><g><title>nn`alloc::raw_vec::finish_grow (11 samples, 0.05%)</title><rect x="27.2145%" y="133" width="0.0479%" height="15" fill="rgb(213,55,15)" fg:x="6249" fg:w="11"/><text x="27.4645%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (9 samples, 0.04%)</title><rect x="27.2232%" y="117" width="0.0392%" height="15" fill="rgb(209,9,3)" fg:x="6251" fg:w="9"/><text x="27.4732%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (7 samples, 0.03%)</title><rect x="27.2319%" y="101" width="0.0305%" height="15" fill="rgb(230,59,30)" fg:x="6253" fg:w="7"/><text x="27.4819%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (6 samples, 0.03%)</title><rect x="27.2363%" y="85" width="0.0261%" height="15" fill="rgb(209,121,21)" fg:x="6254" fg:w="6"/><text x="27.4863%" y="95.50"></text></g><g><title>nn`tensor_rs::impl_methods::_&lt;impl tensor_rs::TensorBase&lt;S,tensor_rs::OwnedData&lt;Dtype&gt;&gt;&gt;::from_vec (15 samples, 0.07%)</title><rect x="27.2668%" y="165" width="0.0653%" height="15" fill="rgb(220,109,13)" fg:x="6261" fg:w="15"/><text x="27.5168%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (11 samples, 0.05%)</title><rect x="27.2842%" y="149" width="0.0479%" height="15" fill="rgb(232,18,1)" fg:x="6265" fg:w="11"/><text x="27.5342%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (9 samples, 0.04%)</title><rect x="27.2929%" y="133" width="0.0392%" height="15" fill="rgb(215,41,42)" fg:x="6267" fg:w="9"/><text x="27.5429%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (5 samples, 0.02%)</title><rect x="27.3103%" y="117" width="0.0218%" height="15" fill="rgb(224,123,36)" fg:x="6271" fg:w="5"/><text x="27.5603%" y="127.50"></text></g><g><title>nn`&lt;tensor_rs::TensorBase&lt;[usize (5,389 samples, 23.47%)</title><rect x="3.8934%" y="213" width="23.4692%" height="15" fill="rgb(240,125,3)" fg:x="894" fg:w="5389"/><text x="4.1434%" y="223.50">nn`&lt;tensor_rs::TensorBase&lt;[usize</text></g><g><title> 2],A&gt; as tensor_rs::impl_processing_ops::Matmul&lt;tensor_rs::TensorBase&lt;[usize (5,389 samples, 23.47%)</title><rect x="3.8934%" y="197" width="23.4692%" height="15" fill="rgb(205,98,50)" fg:x="894" fg:w="5389"/><text x="4.1434%" y="207.50"> 2],A&gt; as tensor_rs::impl_processing_..</text></g><g><title> 2],A&gt;&gt;&gt;::matmul (5,389 samples, 23.47%)</title><rect x="3.8934%" y="181" width="23.4692%" height="15" fill="rgb(205,185,37)" fg:x="894" fg:w="5389"/><text x="4.1434%" y="191.50"> 2],A&gt;&gt;&gt;::matmul</text></g><g><title>nn`tensor_rs::utils::merge_backward_ops (6 samples, 0.03%)</title><rect x="27.3365%" y="165" width="0.0261%" height="15" fill="rgb(238,207,15)" fg:x="6277" fg:w="6"/><text x="27.5865%" y="175.50"></text></g><g><title>nn`&lt;core::option::Option&lt;tensor_rs::gradient::BackwardOps&gt; as tensor_rs::gradient::Merge&gt;::merge (3 samples, 0.01%)</title><rect x="27.3495%" y="149" width="0.0131%" height="15" fill="rgb(213,199,42)" fg:x="6280" fg:w="3"/><text x="27.5995%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (4 samples, 0.02%)</title><rect x="27.3931%" y="149" width="0.0174%" height="15" fill="rgb(235,201,11)" fg:x="6290" fg:w="4"/><text x="27.6431%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (9 samples, 0.04%)</title><rect x="27.3757%" y="181" width="0.0392%" height="15" fill="rgb(207,46,11)" fg:x="6286" fg:w="9"/><text x="27.6257%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (6 samples, 0.03%)</title><rect x="27.3887%" y="165" width="0.0261%" height="15" fill="rgb(241,35,35)" fg:x="6289" fg:w="6"/><text x="27.6387%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (6 samples, 0.03%)</title><rect x="27.4279%" y="181" width="0.0261%" height="15" fill="rgb(243,32,47)" fg:x="6298" fg:w="6"/><text x="27.6779%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.01%)</title><rect x="27.4715%" y="165" width="0.0131%" height="15" fill="rgb(247,202,23)" fg:x="6308" fg:w="3"/><text x="27.7215%" y="175.50"></text></g><g><title>nn`tensor_rs::impl_methods::_&lt;impl tensor_rs::TensorBase&lt;S,tensor_rs::OwnedData&lt;Dtype&gt;&gt;&gt;::from_vec (5 samples, 0.02%)</title><rect x="27.4671%" y="181" width="0.0218%" height="15" fill="rgb(219,102,11)" fg:x="6307" fg:w="5"/><text x="27.7171%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.01%)</title><rect x="27.7154%" y="149" width="0.0131%" height="15" fill="rgb(243,110,44)" fg:x="6364" fg:w="3"/><text x="27.9654%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (5 samples, 0.02%)</title><rect x="27.7546%" y="101" width="0.0218%" height="15" fill="rgb(222,74,54)" fg:x="6373" fg:w="5"/><text x="28.0046%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (13 samples, 0.06%)</title><rect x="27.7328%" y="133" width="0.0566%" height="15" fill="rgb(216,99,12)" fg:x="6368" fg:w="13"/><text x="27.9828%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (12 samples, 0.05%)</title><rect x="27.7371%" y="117" width="0.0523%" height="15" fill="rgb(226,22,26)" fg:x="6369" fg:w="12"/><text x="27.9871%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (3 samples, 0.01%)</title><rect x="27.7763%" y="101" width="0.0131%" height="15" fill="rgb(217,163,10)" fg:x="6378" fg:w="3"/><text x="28.0263%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (29 samples, 0.13%)</title><rect x="27.7284%" y="149" width="0.1263%" height="15" fill="rgb(213,25,53)" fg:x="6367" fg:w="29"/><text x="27.9784%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (15 samples, 0.07%)</title><rect x="27.7894%" y="133" width="0.0653%" height="15" fill="rgb(252,105,26)" fg:x="6381" fg:w="15"/><text x="28.0394%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (9 samples, 0.04%)</title><rect x="27.8155%" y="117" width="0.0392%" height="15" fill="rgb(220,39,43)" fg:x="6387" fg:w="9"/><text x="28.0655%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (6 samples, 0.03%)</title><rect x="27.8286%" y="101" width="0.0261%" height="15" fill="rgb(229,68,48)" fg:x="6390" fg:w="6"/><text x="28.0786%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (37 samples, 0.16%)</title><rect x="27.6979%" y="165" width="0.1611%" height="15" fill="rgb(252,8,32)" fg:x="6360" fg:w="37"/><text x="27.9479%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (7 samples, 0.03%)</title><rect x="27.8678%" y="165" width="0.0305%" height="15" fill="rgb(223,20,43)" fg:x="6399" fg:w="7"/><text x="28.1178%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (4 samples, 0.02%)</title><rect x="27.8808%" y="149" width="0.0174%" height="15" fill="rgb(229,81,49)" fg:x="6402" fg:w="4"/><text x="28.1308%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (4 samples, 0.02%)</title><rect x="27.8808%" y="133" width="0.0174%" height="15" fill="rgb(236,28,36)" fg:x="6402" fg:w="4"/><text x="28.1308%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (6 samples, 0.03%)</title><rect x="27.8983%" y="165" width="0.0261%" height="15" fill="rgb(249,185,26)" fg:x="6406" fg:w="6"/><text x="28.1483%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (4 samples, 0.02%)</title><rect x="27.9070%" y="149" width="0.0174%" height="15" fill="rgb(249,174,33)" fg:x="6408" fg:w="4"/><text x="28.1570%" y="159.50"></text></g><g><title>nn`&lt;tensor_rs::mnist::mnist::MnistData as tensor_rs::mnist::Dataloader&gt;::get_by_idx (134 samples, 0.58%)</title><rect x="27.3713%" y="197" width="0.5836%" height="15" fill="rgb(233,201,37)" fg:x="6285" fg:w="134"/><text x="27.6213%" y="207.50"></text></g><g><title>nn`tensor_rs::mnist::mnist::MnistData::get_image_nn_input (107 samples, 0.47%)</title><rect x="27.4889%" y="181" width="0.4660%" height="15" fill="rgb(221,78,26)" fg:x="6312" fg:w="107"/><text x="27.7389%" y="191.50"></text></g><g><title>nn`tensor_rs::impl_methods::_&lt;impl tensor_rs::TensorBase&lt;S,tensor_rs::OwnedData&lt;Dtype&gt;&gt;&gt;::from_vec (3 samples, 0.01%)</title><rect x="27.9418%" y="165" width="0.0131%" height="15" fill="rgb(250,127,30)" fg:x="6416" fg:w="3"/><text x="28.1918%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.01%)</title><rect x="27.9418%" y="149" width="0.0131%" height="15" fill="rgb(230,49,44)" fg:x="6416" fg:w="3"/><text x="28.1918%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (5 samples, 0.02%)</title><rect x="27.9723%" y="133" width="0.0218%" height="15" fill="rgb(229,67,23)" fg:x="6423" fg:w="5"/><text x="28.2223%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (10 samples, 0.04%)</title><rect x="27.9723%" y="149" width="0.0436%" height="15" fill="rgb(249,83,47)" fg:x="6423" fg:w="10"/><text x="28.2223%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (5 samples, 0.02%)</title><rect x="27.9941%" y="133" width="0.0218%" height="15" fill="rgb(215,43,3)" fg:x="6428" fg:w="5"/><text x="28.2441%" y="143.50"></text></g><g><title>nn`&lt;tensor_rs::mnist::mnist::MnistData as tensor_rs::mnist::Dataloader&gt;::get_batch (152 samples, 0.66%)</title><rect x="27.3626%" y="213" width="0.6620%" height="15" fill="rgb(238,154,13)" fg:x="6283" fg:w="152"/><text x="27.6126%" y="223.50"></text></g><g><title>nn`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (16 samples, 0.07%)</title><rect x="27.9549%" y="197" width="0.0697%" height="15" fill="rgb(219,56,2)" fg:x="6419" fg:w="16"/><text x="28.2049%" y="207.50"></text></g><g><title>nn`alloc::raw_vec::finish_grow (16 samples, 0.07%)</title><rect x="27.9549%" y="181" width="0.0697%" height="15" fill="rgb(233,0,4)" fg:x="6419" fg:w="16"/><text x="28.2049%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (13 samples, 0.06%)</title><rect x="27.9679%" y="165" width="0.0566%" height="15" fill="rgb(235,30,7)" fg:x="6422" fg:w="13"/><text x="28.2179%" y="175.50"></text></g><g><title>nn`&lt;tensor_rs::unique_id::UniqueId as core::hash::Hash&gt;::hash (4 samples, 0.02%)</title><rect x="28.0246%" y="213" width="0.0174%" height="15" fill="rgb(250,79,13)" fg:x="6435" fg:w="4"/><text x="28.2746%" y="223.50"></text></g><g><title>nn`DYLD-STUB$$free (6 samples, 0.03%)</title><rect x="28.0420%" y="213" width="0.0261%" height="15" fill="rgb(211,146,34)" fg:x="6439" fg:w="6"/><text x="28.2920%" y="223.50"></text></g><g><title>nn`DYLD-STUB$$memset_pattern16 (7 samples, 0.03%)</title><rect x="28.0768%" y="213" width="0.0305%" height="15" fill="rgb(228,22,38)" fg:x="6447" fg:w="7"/><text x="28.3268%" y="223.50"></text></g><g><title>libsystem_platform.dylib`__bzero (41 samples, 0.18%)</title><rect x="28.1204%" y="165" width="0.1786%" height="15" fill="rgb(235,168,5)" fg:x="6457" fg:w="41"/><text x="28.3704%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (46 samples, 0.20%)</title><rect x="28.1073%" y="197" width="0.2003%" height="15" fill="rgb(221,155,16)" fg:x="6454" fg:w="46"/><text x="28.3573%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (43 samples, 0.19%)</title><rect x="28.1204%" y="181" width="0.1873%" height="15" fill="rgb(215,215,53)" fg:x="6457" fg:w="43"/><text x="28.3704%" y="191.50"></text></g><g><title>nn`alloc::vec::from_elem (47 samples, 0.20%)</title><rect x="28.1073%" y="213" width="0.2047%" height="15" fill="rgb(223,4,10)" fg:x="6454" fg:w="47"/><text x="28.3573%" y="223.50"></text></g><g><title>nn`core::hash::BuildHasher::hash_one (7 samples, 0.03%)</title><rect x="28.3120%" y="213" width="0.0305%" height="15" fill="rgb(234,103,6)" fg:x="6501" fg:w="7"/><text x="28.5620%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (20 samples, 0.09%)</title><rect x="28.3512%" y="165" width="0.0871%" height="15" fill="rgb(227,97,0)" fg:x="6510" fg:w="20"/><text x="28.6012%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (11 samples, 0.05%)</title><rect x="28.3904%" y="149" width="0.0479%" height="15" fill="rgb(234,150,53)" fg:x="6519" fg:w="11"/><text x="28.6404%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (3 samples, 0.01%)</title><rect x="28.4731%" y="149" width="0.0131%" height="15" fill="rgb(228,201,54)" fg:x="6538" fg:w="3"/><text x="28.7231%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_small (16 samples, 0.07%)</title><rect x="28.4383%" y="165" width="0.0697%" height="15" fill="rgb(222,22,37)" fg:x="6530" fg:w="16"/><text x="28.6883%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (4 samples, 0.02%)</title><rect x="28.4905%" y="149" width="0.0174%" height="15" fill="rgb(237,53,32)" fg:x="6542" fg:w="4"/><text x="28.7405%" y="159.50"></text></g><g><title>nn`core::ptr::drop_in_place&lt;(tensor_rs::TensorBase&lt;[usize (43 samples, 0.19%)</title><rect x="28.3425%" y="213" width="0.1873%" height="15" fill="rgb(233,25,53)" fg:x="6508" fg:w="43"/><text x="28.5925%" y="223.50"></text></g><g><title> 2]&gt;,tensor_rs::TensorBase&lt;[usize (43 samples, 0.19%)</title><rect x="28.3425%" y="197" width="0.1873%" height="15" fill="rgb(210,40,34)" fg:x="6508" fg:w="43"/><text x="28.5925%" y="207.50"></text></g><g><title> 2]&gt;)&gt; (43 samples, 0.19%)</title><rect x="28.3425%" y="181" width="0.1873%" height="15" fill="rgb(241,220,44)" fg:x="6508" fg:w="43"/><text x="28.5925%" y="191.50"></text></g><g><title> 0]&gt;&gt; (6 samples, 0.03%)</title><rect x="28.5297%" y="197" width="0.0261%" height="15" fill="rgb(235,28,35)" fg:x="6551" fg:w="6"/><text x="28.7797%" y="207.50"></text></g><g><title>nn`core::ptr::drop_in_place&lt;tensor_rs::TensorBase&lt;[usize (9 samples, 0.04%)</title><rect x="28.5297%" y="213" width="0.0392%" height="15" fill="rgb(210,56,17)" fg:x="6551" fg:w="9"/><text x="28.7797%" y="223.50"></text></g><g><title> 2]&gt;&gt; (3 samples, 0.01%)</title><rect x="28.5559%" y="197" width="0.0131%" height="15" fill="rgb(224,130,29)" fg:x="6557" fg:w="3"/><text x="28.8059%" y="207.50"></text></g><g><title>nn`matrixmultiply::gemm::sgemm (6 samples, 0.03%)</title><rect x="28.5777%" y="213" width="0.0261%" height="15" fill="rgb(235,212,8)" fg:x="6562" fg:w="6"/><text x="28.8277%" y="223.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (21 samples, 0.09%)</title><rect x="28.6038%" y="197" width="0.0915%" height="15" fill="rgb(223,33,50)" fg:x="6568" fg:w="21"/><text x="28.8538%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (20 samples, 0.09%)</title><rect x="28.6081%" y="181" width="0.0871%" height="15" fill="rgb(219,149,13)" fg:x="6569" fg:w="20"/><text x="28.8581%" y="191.50"></text></g><g><title>nn`std::sys::unix::time::inner::_&lt;impl std::sys::unix::time::Timespec&gt;::now (22 samples, 0.10%)</title><rect x="28.6038%" y="213" width="0.0958%" height="15" fill="rgb(250,156,29)" fg:x="6568" fg:w="22"/><text x="28.8538%" y="223.50"></text></g><g><title>nn`tensor_rs::gradient::BackwardOps::add_backward_op (5 samples, 0.02%)</title><rect x="28.6996%" y="213" width="0.0218%" height="15" fill="rgb(216,193,19)" fg:x="6590" fg:w="5"/><text x="28.9496%" y="223.50"></text></g><g><title>nn`tensor_rs::impl_binary_ops::_&lt;impl core::ops::arith::AddAssign&lt;&amp;tensor_rs::TensorBase&lt;S,B&gt;&gt; for tensor_rs::TensorBase&lt;S,A&gt;&gt;::add_assign (1,629 samples, 7.09%)</title><rect x="28.7214%" y="213" width="7.0943%" height="15" fill="rgb(216,135,14)" fg:x="6595" fg:w="1629"/><text x="28.9714%" y="223.50">nn`tensor_..</text></g><g><title>libsystem_malloc.dylib`free (12 samples, 0.05%)</title><rect x="35.8288%" y="197" width="0.0523%" height="15" fill="rgb(241,47,5)" fg:x="8227" fg:w="12"/><text x="36.0788%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (7 samples, 0.03%)</title><rect x="35.8505%" y="181" width="0.0305%" height="15" fill="rgb(233,42,35)" fg:x="8232" fg:w="7"/><text x="36.1005%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (8 samples, 0.03%)</title><rect x="35.8854%" y="197" width="0.0348%" height="15" fill="rgb(231,13,6)" fg:x="8240" fg:w="8"/><text x="36.1354%" y="207.50"></text></g><g><title>nn`tensor_rs::impl_binary_ops::_&lt;impl core::ops::arith::AddAssign&lt;tensor_rs::TensorBase&lt;S,B&gt;&gt; for tensor_rs::TensorBase&lt;S,A&gt;&gt;::add_assign (25 samples, 0.11%)</title><rect x="35.8157%" y="213" width="0.1089%" height="15" fill="rgb(207,181,40)" fg:x="8224" fg:w="25"/><text x="36.0657%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_small (3 samples, 0.01%)</title><rect x="36.7215%" y="197" width="0.0131%" height="15" fill="rgb(254,173,49)" fg:x="8432" fg:w="3"/><text x="36.9715%" y="207.50"></text></g><g><title>nn`tensor_rs::impl_binary_ops::_&lt;impl core::ops::arith::SubAssign&lt;tensor_rs::TensorBase&lt;S,B&gt;&gt; for tensor_rs::TensorBase&lt;S,A&gt;&gt;::sub_assign (188 samples, 0.82%)</title><rect x="35.9246%" y="213" width="0.8187%" height="15" fill="rgb(221,1,38)" fg:x="8249" fg:w="188"/><text x="36.1746%" y="223.50"></text></g><g><title>nn`tensor_rs::impl_methods::_&lt;impl tensor_rs::TensorBase&lt;S,A&gt;&gt;::put_backward_ops (3 samples, 0.01%)</title><rect x="36.7433%" y="213" width="0.0131%" height="15" fill="rgb(206,124,46)" fg:x="8437" fg:w="3"/><text x="36.9933%" y="223.50"></text></g><g><title>nn`tensor_rs::impl_methods::_&lt;impl tensor_rs::TensorBase&lt;S,tensor_rs::OwnedData&lt;Dtype&gt;&gt;&gt;::from_vec (4 samples, 0.02%)</title><rect x="36.7564%" y="213" width="0.0174%" height="15" fill="rgb(249,21,11)" fg:x="8440" fg:w="4"/><text x="37.0064%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (8 samples, 0.03%)</title><rect x="36.7825%" y="181" width="0.0348%" height="15" fill="rgb(222,201,40)" fg:x="8446" fg:w="8"/><text x="37.0325%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (5 samples, 0.02%)</title><rect x="36.7956%" y="165" width="0.0218%" height="15" fill="rgb(235,61,29)" fg:x="8449" fg:w="5"/><text x="37.0456%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (5 samples, 0.02%)</title><rect x="36.7956%" y="149" width="0.0218%" height="15" fill="rgb(219,207,3)" fg:x="8449" fg:w="5"/><text x="37.0456%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (3 samples, 0.01%)</title><rect x="36.8043%" y="133" width="0.0131%" height="15" fill="rgb(222,56,46)" fg:x="8451" fg:w="3"/><text x="37.0543%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (4 samples, 0.02%)</title><rect x="36.8174%" y="181" width="0.0174%" height="15" fill="rgb(239,76,54)" fg:x="8454" fg:w="4"/><text x="37.0674%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (5 samples, 0.02%)</title><rect x="36.8348%" y="181" width="0.0218%" height="15" fill="rgb(231,124,27)" fg:x="8458" fg:w="5"/><text x="37.0848%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (3 samples, 0.01%)</title><rect x="36.8653%" y="181" width="0.0131%" height="15" fill="rgb(249,195,6)" fg:x="8465" fg:w="3"/><text x="37.1153%" y="191.50"></text></g><g><title>nn`DYLD-STUB$$free (4 samples, 0.02%)</title><rect x="36.8783%" y="181" width="0.0174%" height="15" fill="rgb(237,174,47)" fg:x="8468" fg:w="4"/><text x="37.1283%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (5 samples, 0.02%)</title><rect x="36.9436%" y="165" width="0.0218%" height="15" fill="rgb(206,201,31)" fg:x="8483" fg:w="5"/><text x="37.1936%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (20 samples, 0.09%)</title><rect x="37.1309%" y="149" width="0.0871%" height="15" fill="rgb(231,57,52)" fg:x="8526" fg:w="20"/><text x="37.3809%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (59 samples, 0.26%)</title><rect x="36.9654%" y="165" width="0.2569%" height="15" fill="rgb(248,177,22)" fg:x="8488" fg:w="59"/><text x="37.2154%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (9 samples, 0.04%)</title><rect x="37.2224%" y="165" width="0.0392%" height="15" fill="rgb(215,211,37)" fg:x="8547" fg:w="9"/><text x="37.4724%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (23 samples, 0.10%)</title><rect x="37.2616%" y="165" width="0.1002%" height="15" fill="rgb(241,128,51)" fg:x="8556" fg:w="23"/><text x="37.5116%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (6 samples, 0.03%)</title><rect x="37.3617%" y="165" width="0.0261%" height="15" fill="rgb(227,165,31)" fg:x="8579" fg:w="6"/><text x="37.6117%" y="175.50"></text></g><g><title>nn`DYLD-STUB$$free (3 samples, 0.01%)</title><rect x="37.3966%" y="165" width="0.0131%" height="15" fill="rgb(228,167,24)" fg:x="8587" fg:w="3"/><text x="37.6466%" y="175.50"></text></g><g><title>nn`DYLD-STUB$$memset_pattern16 (3 samples, 0.01%)</title><rect x="37.4140%" y="165" width="0.0131%" height="15" fill="rgb(228,143,12)" fg:x="8591" fg:w="3"/><text x="37.6640%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (5 samples, 0.02%)</title><rect x="37.5577%" y="117" width="0.0218%" height="15" fill="rgb(249,149,8)" fg:x="8624" fg:w="5"/><text x="37.8077%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (15 samples, 0.07%)</title><rect x="37.5229%" y="149" width="0.0653%" height="15" fill="rgb(243,35,44)" fg:x="8616" fg:w="15"/><text x="37.7729%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (10 samples, 0.04%)</title><rect x="37.5446%" y="133" width="0.0436%" height="15" fill="rgb(246,89,9)" fg:x="8621" fg:w="10"/><text x="37.7946%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (7 samples, 0.03%)</title><rect x="37.5882%" y="149" width="0.0305%" height="15" fill="rgb(233,213,13)" fg:x="8631" fg:w="7"/><text x="37.8382%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (16 samples, 0.07%)</title><rect x="37.7363%" y="133" width="0.0697%" height="15" fill="rgb(233,141,41)" fg:x="8665" fg:w="16"/><text x="37.9863%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (44 samples, 0.19%)</title><rect x="37.6187%" y="149" width="0.1916%" height="15" fill="rgb(239,167,4)" fg:x="8638" fg:w="44"/><text x="37.8687%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (11 samples, 0.05%)</title><rect x="37.8408%" y="133" width="0.0479%" height="15" fill="rgb(209,217,16)" fg:x="8689" fg:w="11"/><text x="38.0908%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_small (28 samples, 0.12%)</title><rect x="37.8103%" y="149" width="0.1219%" height="15" fill="rgb(219,88,35)" fg:x="8682" fg:w="28"/><text x="38.0603%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (9 samples, 0.04%)</title><rect x="37.8930%" y="133" width="0.0392%" height="15" fill="rgb(220,193,23)" fg:x="8701" fg:w="9"/><text x="38.1430%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (13 samples, 0.06%)</title><rect x="37.9322%" y="149" width="0.0566%" height="15" fill="rgb(230,90,52)" fg:x="8710" fg:w="13"/><text x="38.1822%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (14 samples, 0.06%)</title><rect x="37.9889%" y="149" width="0.0610%" height="15" fill="rgb(252,106,19)" fg:x="8723" fg:w="14"/><text x="38.2389%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset_pattern16 (28 samples, 0.12%)</title><rect x="38.0803%" y="149" width="0.1219%" height="15" fill="rgb(206,74,20)" fg:x="8744" fg:w="28"/><text x="38.3303%" y="159.50"></text></g><g><title>nn`&lt;T as core::any::Any&gt;::type_id (4 samples, 0.02%)</title><rect x="38.2022%" y="149" width="0.0174%" height="15" fill="rgb(230,138,44)" fg:x="8772" fg:w="4"/><text x="38.4522%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.01%)</title><rect x="38.2632%" y="85" width="0.0131%" height="15" fill="rgb(235,182,43)" fg:x="8786" fg:w="3"/><text x="38.5132%" y="95.50"></text></g><g><title>nn`tensor_rs::impl_methods::_&lt;impl tensor_rs::TensorBase&lt;S,tensor_rs::OwnedData&lt;Dtype&gt;&gt;&gt;::from_vec (12 samples, 0.05%)</title><rect x="38.2284%" y="133" width="0.0523%" height="15" fill="rgb(242,16,51)" fg:x="8778" fg:w="12"/><text x="38.4784%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (10 samples, 0.04%)</title><rect x="38.2371%" y="117" width="0.0436%" height="15" fill="rgb(248,9,4)" fg:x="8780" fg:w="10"/><text x="38.4871%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (8 samples, 0.03%)</title><rect x="38.2458%" y="101" width="0.0348%" height="15" fill="rgb(210,31,22)" fg:x="8782" fg:w="8"/><text x="38.4958%" y="111.50"></text></g><g><title>nn`&lt;tensor_rs::TensorBase&lt;S,tensor_rs::OwnedData&lt;Dtype&gt;&gt; as tensor_rs::impl_constructors::TensorConstructors&lt;Dtype&gt;&gt;::ones (15 samples, 0.07%)</title><rect x="38.2197%" y="149" width="0.0653%" height="15" fill="rgb(239,54,39)" fg:x="8776" fg:w="15"/><text x="38.4697%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.01%)</title><rect x="38.3285%" y="101" width="0.0131%" height="15" fill="rgb(230,99,41)" fg:x="8801" fg:w="3"/><text x="38.5785%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (3 samples, 0.01%)</title><rect x="38.3285%" y="85" width="0.0131%" height="15" fill="rgb(253,106,12)" fg:x="8801" fg:w="3"/><text x="38.5785%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (13 samples, 0.06%)</title><rect x="38.2937%" y="133" width="0.0566%" height="15" fill="rgb(213,46,41)" fg:x="8793" fg:w="13"/><text x="38.5437%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (8 samples, 0.03%)</title><rect x="38.3155%" y="117" width="0.0348%" height="15" fill="rgb(215,133,35)" fg:x="8798" fg:w="8"/><text x="38.5655%" y="127.50"></text></g><g><title>nn`&lt;tensor_rs::TensorBase&lt;S,tensor_rs::OwnedData&lt;Dtype&gt;&gt; as tensor_rs::impl_constructors::TensorConstructors&lt;Dtype&gt;&gt;::zeros (19 samples, 0.08%)</title><rect x="38.2850%" y="149" width="0.0827%" height="15" fill="rgb(213,28,5)" fg:x="8791" fg:w="19"/><text x="38.5350%" y="159.50"></text></g><g><title>nn`tensor_rs::impl_methods::_&lt;impl tensor_rs::TensorBase&lt;S,tensor_rs::OwnedData&lt;Dtype&gt;&gt;&gt;::from_vec (3 samples, 0.01%)</title><rect x="38.3547%" y="133" width="0.0131%" height="15" fill="rgb(215,77,49)" fg:x="8807" fg:w="3"/><text x="38.6047%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.01%)</title><rect x="38.3547%" y="117" width="0.0131%" height="15" fill="rgb(248,100,22)" fg:x="8807" fg:w="3"/><text x="38.6047%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.01%)</title><rect x="38.3547%" y="101" width="0.0131%" height="15" fill="rgb(208,67,9)" fg:x="8807" fg:w="3"/><text x="38.6047%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.01%)</title><rect x="38.3547%" y="85" width="0.0131%" height="15" fill="rgb(219,133,21)" fg:x="8807" fg:w="3"/><text x="38.6047%" y="95.50"></text></g><g><title>nn`&lt;tensor_rs::unique_id::UniqueId as core::hash::Hash&gt;::hash (5 samples, 0.02%)</title><rect x="38.3677%" y="149" width="0.0218%" height="15" fill="rgb(246,46,29)" fg:x="8810" fg:w="5"/><text x="38.6177%" y="159.50"></text></g><g><title>nn`DYLD-STUB$$free (9 samples, 0.04%)</title><rect x="38.3939%" y="149" width="0.0392%" height="15" fill="rgb(246,185,52)" fg:x="8816" fg:w="9"/><text x="38.6439%" y="159.50"></text></g><g><title>nn`DYLD-STUB$$malloc (5 samples, 0.02%)</title><rect x="38.4331%" y="149" width="0.0218%" height="15" fill="rgb(252,136,11)" fg:x="8825" fg:w="5"/><text x="38.6831%" y="159.50"></text></g><g><title>nn`DYLD-STUB$$memset_pattern16 (9 samples, 0.04%)</title><rect x="38.4548%" y="149" width="0.0392%" height="15" fill="rgb(219,138,53)" fg:x="8830" fg:w="9"/><text x="38.7048%" y="159.50"></text></g><g><title>nn`__rdl_alloc (6 samples, 0.03%)</title><rect x="38.4940%" y="149" width="0.0261%" height="15" fill="rgb(211,51,23)" fg:x="8839" fg:w="6"/><text x="38.7440%" y="159.50"></text></g><g><title>nn`alloc::vec::from_elem (21 samples, 0.09%)</title><rect x="38.5202%" y="149" width="0.0915%" height="15" fill="rgb(247,221,28)" fg:x="8845" fg:w="21"/><text x="38.7702%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (8 samples, 0.03%)</title><rect x="38.5768%" y="133" width="0.0348%" height="15" fill="rgb(251,222,45)" fg:x="8858" fg:w="8"/><text x="38.8268%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (7 samples, 0.03%)</title><rect x="38.5811%" y="117" width="0.0305%" height="15" fill="rgb(217,162,53)" fg:x="8859" fg:w="7"/><text x="38.8311%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (6 samples, 0.03%)</title><rect x="38.5855%" y="101" width="0.0261%" height="15" fill="rgb(229,93,14)" fg:x="8860" fg:w="6"/><text x="38.8355%" y="111.50"></text></g><g><title>nn`core::hash::BuildHasher::hash_one (6 samples, 0.03%)</title><rect x="38.6116%" y="149" width="0.0261%" height="15" fill="rgb(209,67,49)" fg:x="8866" fg:w="6"/><text x="38.8616%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (4 samples, 0.02%)</title><rect x="38.6726%" y="101" width="0.0174%" height="15" fill="rgb(213,87,29)" fg:x="8880" fg:w="4"/><text x="38.9226%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (3 samples, 0.01%)</title><rect x="38.6769%" y="85" width="0.0131%" height="15" fill="rgb(205,151,52)" fg:x="8881" fg:w="3"/><text x="38.9269%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (10 samples, 0.04%)</title><rect x="38.6508%" y="133" width="0.0436%" height="15" fill="rgb(253,215,39)" fg:x="8875" fg:w="10"/><text x="38.9008%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (7 samples, 0.03%)</title><rect x="38.6639%" y="117" width="0.0305%" height="15" fill="rgb(221,220,41)" fg:x="8878" fg:w="7"/><text x="38.9139%" y="127.50"></text></g><g><title>nn`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (13 samples, 0.06%)</title><rect x="38.6421%" y="149" width="0.0566%" height="15" fill="rgb(218,133,21)" fg:x="8873" fg:w="13"/><text x="38.8921%" y="159.50"></text></g><g><title>nn`matrixmultiply::gemm::gemm_loop (3 samples, 0.01%)</title><rect x="38.6987%" y="149" width="0.0131%" height="15" fill="rgb(221,193,43)" fg:x="8886" fg:w="3"/><text x="38.9487%" y="159.50"></text></g><g><title>nn`matrixmultiply::gemm::sgemm (23 samples, 0.10%)</title><rect x="38.7118%" y="149" width="0.1002%" height="15" fill="rgb(240,128,52)" fg:x="8889" fg:w="23"/><text x="38.9618%" y="159.50"></text></g><g><title>nn`&lt;tensor_rs::unique_id::UniqueId as core::hash::Hash&gt;::hash (11 samples, 0.05%)</title><rect x="38.8903%" y="133" width="0.0479%" height="15" fill="rgb(253,114,12)" fg:x="8930" fg:w="11"/><text x="39.1403%" y="143.50"></text></g><g><title>nn`tensor_rs::gradient::GradientMap::grad_by_id (53 samples, 0.23%)</title><rect x="38.8120%" y="149" width="0.2308%" height="15" fill="rgb(215,223,47)" fg:x="8912" fg:w="53"/><text x="39.0620%" y="159.50"></text></g><g><title>nn`core::hash::BuildHasher::hash_one (24 samples, 0.10%)</title><rect x="38.9382%" y="133" width="0.1045%" height="15" fill="rgb(248,225,23)" fg:x="8941" fg:w="24"/><text x="39.1882%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (3 samples, 0.01%)</title><rect x="39.3433%" y="133" width="0.0131%" height="15" fill="rgb(250,108,0)" fg:x="9034" fg:w="3"/><text x="39.5933%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (5 samples, 0.02%)</title><rect x="39.4434%" y="117" width="0.0218%" height="15" fill="rgb(228,208,7)" fg:x="9057" fg:w="5"/><text x="39.6934%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (13 samples, 0.06%)</title><rect x="39.4870%" y="101" width="0.0566%" height="15" fill="rgb(244,45,10)" fg:x="9067" fg:w="13"/><text x="39.7370%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (46 samples, 0.20%)</title><rect x="39.3563%" y="133" width="0.2003%" height="15" fill="rgb(207,125,25)" fg:x="9037" fg:w="46"/><text x="39.6063%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (21 samples, 0.09%)</title><rect x="39.4652%" y="117" width="0.0915%" height="15" fill="rgb(210,195,18)" fg:x="9062" fg:w="21"/><text x="39.7152%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (3 samples, 0.01%)</title><rect x="39.5436%" y="101" width="0.0131%" height="15" fill="rgb(249,80,12)" fg:x="9080" fg:w="3"/><text x="39.7936%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (7 samples, 0.03%)</title><rect x="39.5567%" y="133" width="0.0305%" height="15" fill="rgb(221,65,9)" fg:x="9083" fg:w="7"/><text x="39.8067%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.01%)</title><rect x="39.5871%" y="133" width="0.0131%" height="15" fill="rgb(235,49,36)" fg:x="9090" fg:w="3"/><text x="39.8371%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.01%)</title><rect x="39.6133%" y="133" width="0.0131%" height="15" fill="rgb(225,32,20)" fg:x="9096" fg:w="3"/><text x="39.8633%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset_pattern16 (4 samples, 0.02%)</title><rect x="39.6307%" y="133" width="0.0174%" height="15" fill="rgb(215,141,46)" fg:x="9100" fg:w="4"/><text x="39.8807%" y="143.50"></text></g><g><title>nn`&lt;tensor_rs::unique_id::UniqueId as core::hash::Hash&gt;::hash (21 samples, 0.09%)</title><rect x="39.6481%" y="133" width="0.0915%" height="15" fill="rgb(250,160,47)" fg:x="9104" fg:w="21"/><text x="39.8981%" y="143.50"></text></g><g><title>nn`DYLD-STUB$$calloc (4 samples, 0.02%)</title><rect x="39.7396%" y="133" width="0.0174%" height="15" fill="rgb(216,222,40)" fg:x="9125" fg:w="4"/><text x="39.9896%" y="143.50"></text></g><g><title>nn`__rdl_alloc (5 samples, 0.02%)</title><rect x="39.7875%" y="133" width="0.0218%" height="15" fill="rgb(234,217,39)" fg:x="9136" fg:w="5"/><text x="40.0375%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`medium_malloc_should_clear (3 samples, 0.01%)</title><rect x="39.8659%" y="101" width="0.0131%" height="15" fill="rgb(207,178,40)" fg:x="9154" fg:w="3"/><text x="40.1159%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (5 samples, 0.02%)</title><rect x="39.8789%" y="101" width="0.0218%" height="15" fill="rgb(221,136,13)" fg:x="9157" fg:w="5"/><text x="40.1289%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (16 samples, 0.07%)</title><rect x="39.9486%" y="85" width="0.0697%" height="15" fill="rgb(249,199,10)" fg:x="9173" fg:w="16"/><text x="40.1986%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (3 samples, 0.01%)</title><rect x="40.0052%" y="69" width="0.0131%" height="15" fill="rgb(249,222,13)" fg:x="9186" fg:w="3"/><text x="40.2552%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (33 samples, 0.14%)</title><rect x="39.9007%" y="101" width="0.1437%" height="15" fill="rgb(244,185,38)" fg:x="9162" fg:w="33"/><text x="40.1507%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (4 samples, 0.02%)</title><rect x="40.0270%" y="85" width="0.0174%" height="15" fill="rgb(236,202,9)" fg:x="9191" fg:w="4"/><text x="40.2770%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`medium_free_list_add_ptr (4 samples, 0.02%)</title><rect x="40.1054%" y="53" width="0.0174%" height="15" fill="rgb(250,229,37)" fg:x="9209" fg:w="4"/><text x="40.3554%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`medium_malloc_should_clear (18 samples, 0.08%)</title><rect x="40.0706%" y="85" width="0.0784%" height="15" fill="rgb(206,174,23)" fg:x="9201" fg:w="18"/><text x="40.3206%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`medium_malloc_from_free_list (15 samples, 0.07%)</title><rect x="40.0836%" y="69" width="0.0653%" height="15" fill="rgb(211,33,43)" fg:x="9204" fg:w="15"/><text x="40.3336%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`medium_free_list_remove_ptr_no_clear (4 samples, 0.02%)</title><rect x="40.1315%" y="53" width="0.0174%" height="15" fill="rgb(245,58,50)" fg:x="9215" fg:w="4"/><text x="40.3815%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (9 samples, 0.04%)</title><rect x="40.1925%" y="53" width="0.0392%" height="15" fill="rgb(244,68,36)" fg:x="9229" fg:w="9"/><text x="40.4425%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (29 samples, 0.13%)</title><rect x="40.1489%" y="85" width="0.1263%" height="15" fill="rgb(232,229,15)" fg:x="9219" fg:w="29"/><text x="40.3989%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (24 samples, 0.10%)</title><rect x="40.1707%" y="69" width="0.1045%" height="15" fill="rgb(254,30,23)" fg:x="9224" fg:w="24"/><text x="40.4207%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (8 samples, 0.03%)</title><rect x="40.2404%" y="53" width="0.0348%" height="15" fill="rgb(235,160,14)" fg:x="9240" fg:w="8"/><text x="40.4904%" y="63.50"></text></g><g><title>libsystem_platform.dylib`__bzero (349 samples, 1.52%)</title><rect x="40.2752%" y="85" width="1.5199%" height="15" fill="rgb(212,155,44)" fg:x="9248" fg:w="349"/><text x="40.5252%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (495 samples, 2.16%)</title><rect x="39.8397%" y="117" width="2.1557%" height="15" fill="rgb(226,2,50)" fg:x="9148" fg:w="495"/><text x="40.0897%" y="127.50">l..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (446 samples, 1.94%)</title><rect x="40.0531%" y="101" width="1.9423%" height="15" fill="rgb(234,177,6)" fg:x="9197" fg:w="446"/><text x="40.3031%" y="111.50">l..</text></g><g><title>libsystem_platform.dylib`_platform_memset (46 samples, 0.20%)</title><rect x="41.7951%" y="85" width="0.2003%" height="15" fill="rgb(217,24,9)" fg:x="9597" fg:w="46"/><text x="42.0451%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_calloc (8 samples, 0.03%)</title><rect x="41.9955%" y="117" width="0.0348%" height="15" fill="rgb(220,13,46)" fg:x="9643" fg:w="8"/><text x="42.2455%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (6 samples, 0.03%)</title><rect x="42.0303%" y="117" width="0.0261%" height="15" fill="rgb(239,221,27)" fg:x="9651" fg:w="6"/><text x="42.2803%" y="127.50"></text></g><g><title>nn`alloc::vec::from_elem (517 samples, 2.25%)</title><rect x="39.8136%" y="133" width="2.2515%" height="15" fill="rgb(222,198,25)" fg:x="9142" fg:w="517"/><text x="40.0636%" y="143.50">n..</text></g><g><title>nn`core::hash::BuildHasher::hash_one (35 samples, 0.15%)</title><rect x="42.0652%" y="133" width="0.1524%" height="15" fill="rgb(211,99,13)" fg:x="9659" fg:w="35"/><text x="42.3152%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.02%)</title><rect x="42.3482%" y="101" width="0.0174%" height="15" fill="rgb(232,111,31)" fg:x="9724" fg:w="4"/><text x="42.5982%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.01%)</title><rect x="42.3526%" y="85" width="0.0131%" height="15" fill="rgb(245,82,37)" fg:x="9725" fg:w="3"/><text x="42.6026%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (3 samples, 0.01%)</title><rect x="42.3831%" y="69" width="0.0131%" height="15" fill="rgb(227,149,46)" fg:x="9732" fg:w="3"/><text x="42.6331%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (23 samples, 0.10%)</title><rect x="42.3308%" y="117" width="0.1002%" height="15" fill="rgb(218,36,50)" fg:x="9720" fg:w="23"/><text x="42.5808%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (15 samples, 0.07%)</title><rect x="42.3656%" y="101" width="0.0653%" height="15" fill="rgb(226,80,48)" fg:x="9728" fg:w="15"/><text x="42.6156%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (14 samples, 0.06%)</title><rect x="42.3700%" y="85" width="0.0610%" height="15" fill="rgb(238,224,15)" fg:x="9729" fg:w="14"/><text x="42.6200%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (8 samples, 0.03%)</title><rect x="42.3961%" y="69" width="0.0348%" height="15" fill="rgb(241,136,10)" fg:x="9735" fg:w="8"/><text x="42.6461%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`free (8 samples, 0.03%)</title><rect x="42.4353%" y="117" width="0.0348%" height="15" fill="rgb(208,32,45)" fg:x="9744" fg:w="8"/><text x="42.6853%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (5 samples, 0.02%)</title><rect x="42.4745%" y="117" width="0.0218%" height="15" fill="rgb(207,135,9)" fg:x="9753" fg:w="5"/><text x="42.7245%" y="127.50"></text></g><g><title>nn`&lt;tensor_rs::unique_id::UniqueId as core::hash::Hash&gt;::hash (14 samples, 0.06%)</title><rect x="42.5050%" y="117" width="0.0610%" height="15" fill="rgb(206,86,44)" fg:x="9760" fg:w="14"/><text x="42.7550%" y="127.50"></text></g><g><title>nn`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (106 samples, 0.46%)</title><rect x="42.2176%" y="133" width="0.4616%" height="15" fill="rgb(245,177,15)" fg:x="9694" fg:w="106"/><text x="42.4676%" y="143.50"></text></g><g><title>nn`core::hash::BuildHasher::hash_one (26 samples, 0.11%)</title><rect x="42.5660%" y="117" width="0.1132%" height="15" fill="rgb(206,64,50)" fg:x="9774" fg:w="26"/><text x="42.8160%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (6 samples, 0.03%)</title><rect x="42.8795%" y="101" width="0.0261%" height="15" fill="rgb(234,36,40)" fg:x="9846" fg:w="6"/><text x="43.1295%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (26 samples, 0.11%)</title><rect x="42.9274%" y="85" width="0.1132%" height="15" fill="rgb(213,64,8)" fg:x="9857" fg:w="26"/><text x="43.1774%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (9 samples, 0.04%)</title><rect x="43.0015%" y="69" width="0.0392%" height="15" fill="rgb(210,75,36)" fg:x="9874" fg:w="9"/><text x="43.2515%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (54 samples, 0.24%)</title><rect x="42.8186%" y="117" width="0.2352%" height="15" fill="rgb(229,88,21)" fg:x="9832" fg:w="54"/><text x="43.0686%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (34 samples, 0.15%)</title><rect x="42.9057%" y="101" width="0.1481%" height="15" fill="rgb(252,204,47)" fg:x="9852" fg:w="34"/><text x="43.1557%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (3 samples, 0.01%)</title><rect x="43.0407%" y="85" width="0.0131%" height="15" fill="rgb(208,77,27)" fg:x="9883" fg:w="3"/><text x="43.2907%" y="95.50"></text></g><g><title>nn`tensor_rs::impl_methods::_&lt;impl tensor_rs::TensorBase&lt;S,tensor_rs::OwnedData&lt;Dtype&gt;&gt;&gt;::from_vec (90 samples, 0.39%)</title><rect x="42.6792%" y="133" width="0.3920%" height="15" fill="rgb(221,76,26)" fg:x="9800" fg:w="90"/><text x="42.9292%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (4 samples, 0.02%)</title><rect x="43.0537%" y="117" width="0.0174%" height="15" fill="rgb(225,139,18)" fg:x="9886" fg:w="4"/><text x="43.3037%" y="127.50"></text></g><g><title>nn`tensor_rs::gradient::GradientMap::mut_grad_by_id (930 samples, 4.05%)</title><rect x="39.0428%" y="149" width="4.0502%" height="15" fill="rgb(230,137,11)" fg:x="8965" fg:w="930"/><text x="39.2928%" y="159.50">nn`t..</text></g><g><title>nn`tensor_rs::unique_id::unique_id (5 samples, 0.02%)</title><rect x="43.0712%" y="133" width="0.0218%" height="15" fill="rgb(212,28,1)" fg:x="9890" fg:w="5"/><text x="43.3212%" y="143.50"></text></g><g><title>nn`tensor_rs::impl_binary_ops::_&lt;impl core::ops::arith::AddAssign&lt;&amp;tensor_rs::TensorBase&lt;S,B&gt;&gt; for tensor_rs::TensorBase&lt;S,A&gt;&gt;::add_assign (97 samples, 0.42%)</title><rect x="43.0929%" y="149" width="0.4224%" height="15" fill="rgb(248,164,17)" fg:x="9895" fg:w="97"/><text x="43.3429%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (29 samples, 0.13%)</title><rect x="51.5896%" y="117" width="0.1263%" height="15" fill="rgb(222,171,42)" fg:x="11846" fg:w="29"/><text x="51.8396%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (5 samples, 0.02%)</title><rect x="51.7159%" y="117" width="0.0218%" height="15" fill="rgb(243,84,45)" fg:x="11875" fg:w="5"/><text x="51.9659%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free (84 samples, 0.37%)</title><rect x="51.3893%" y="133" width="0.3658%" height="15" fill="rgb(252,49,23)" fg:x="11800" fg:w="84"/><text x="51.6393%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (4 samples, 0.02%)</title><rect x="51.7377%" y="117" width="0.0174%" height="15" fill="rgb(215,19,7)" fg:x="11880" fg:w="4"/><text x="51.9877%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (20 samples, 0.09%)</title><rect x="51.7551%" y="133" width="0.0871%" height="15" fill="rgb(238,81,41)" fg:x="11884" fg:w="20"/><text x="52.0051%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`medium_free_list_add_ptr (5 samples, 0.02%)</title><rect x="51.8204%" y="117" width="0.0218%" height="15" fill="rgb(210,199,37)" fg:x="11899" fg:w="5"/><text x="52.0704%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_small (3 samples, 0.01%)</title><rect x="51.8422%" y="133" width="0.0131%" height="15" fill="rgb(244,192,49)" fg:x="11904" fg:w="3"/><text x="52.0922%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (3 samples, 0.01%)</title><rect x="51.8552%" y="133" width="0.0131%" height="15" fill="rgb(226,211,11)" fg:x="11907" fg:w="3"/><text x="52.1052%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (10 samples, 0.04%)</title><rect x="51.8683%" y="133" width="0.0436%" height="15" fill="rgb(236,162,54)" fg:x="11910" fg:w="10"/><text x="52.1183%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (4 samples, 0.02%)</title><rect x="51.9119%" y="133" width="0.0174%" height="15" fill="rgb(220,229,9)" fg:x="11920" fg:w="4"/><text x="52.1619%" y="143.50"></text></g><g><title>nn`tensor_rs::impl_binary_ops::_&lt;impl core::ops::arith::AddAssign&lt;tensor_rs::TensorBase&lt;S,B&gt;&gt; for tensor_rs::TensorBase&lt;S,A&gt;&gt;::add_assign (1,933 samples, 8.42%)</title><rect x="43.5154%" y="149" width="8.4183%" height="15" fill="rgb(250,87,22)" fg:x="9992" fg:w="1933"/><text x="43.7654%" y="159.50">nn`tensor_rs..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (8 samples, 0.03%)</title><rect x="52.0120%" y="101" width="0.0348%" height="15" fill="rgb(239,43,17)" fg:x="11943" fg:w="8"/><text x="52.2620%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (10 samples, 0.04%)</title><rect x="52.0077%" y="133" width="0.0436%" height="15" fill="rgb(231,177,25)" fg:x="11942" fg:w="10"/><text x="52.2577%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (9 samples, 0.04%)</title><rect x="52.0120%" y="117" width="0.0392%" height="15" fill="rgb(219,179,1)" fg:x="11943" fg:w="9"/><text x="52.2620%" y="127.50"></text></g><g><title>nn`tensor_rs::impl_methods::_&lt;impl tensor_rs::TensorBase&lt;S,tensor_rs::OwnedData&lt;Dtype&gt;&gt;&gt;::from_vec (21 samples, 0.09%)</title><rect x="52.0643%" y="133" width="0.0915%" height="15" fill="rgb(238,219,53)" fg:x="11955" fg:w="21"/><text x="52.3143%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (16 samples, 0.07%)</title><rect x="52.0861%" y="117" width="0.0697%" height="15" fill="rgb(232,167,36)" fg:x="11960" fg:w="16"/><text x="52.3361%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (11 samples, 0.05%)</title><rect x="52.1078%" y="101" width="0.0479%" height="15" fill="rgb(244,19,51)" fg:x="11965" fg:w="11"/><text x="52.3578%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (9 samples, 0.04%)</title><rect x="52.1165%" y="85" width="0.0392%" height="15" fill="rgb(224,6,22)" fg:x="11967" fg:w="9"/><text x="52.3665%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (5 samples, 0.02%)</title><rect x="52.1340%" y="69" width="0.0218%" height="15" fill="rgb(224,145,5)" fg:x="11971" fg:w="5"/><text x="52.3840%" y="79.50"></text></g><g><title>nn`tensor_rs::impl_binary_ops::_&lt;impl core::ops::arith::Mul&lt;&amp;tensor_rs::TensorBase&lt;S,A&gt;&gt; for &amp;tensor_rs::TensorBase&lt;S,B&gt;&gt;::mul (53 samples, 0.23%)</title><rect x="51.9336%" y="149" width="0.2308%" height="15" fill="rgb(234,130,49)" fg:x="11925" fg:w="53"/><text x="52.1836%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.01%)</title><rect x="52.3953%" y="101" width="0.0131%" height="15" fill="rgb(254,6,2)" fg:x="12031" fg:w="3"/><text x="52.6453%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (7 samples, 0.03%)</title><rect x="52.3822%" y="133" width="0.0305%" height="15" fill="rgb(208,96,46)" fg:x="12028" fg:w="7"/><text x="52.6322%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (5 samples, 0.02%)</title><rect x="52.3909%" y="117" width="0.0218%" height="15" fill="rgb(239,3,39)" fg:x="12030" fg:w="5"/><text x="52.6409%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free (13 samples, 0.06%)</title><rect x="52.4170%" y="133" width="0.0566%" height="15" fill="rgb(233,210,1)" fg:x="12036" fg:w="13"/><text x="52.6670%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (6 samples, 0.03%)</title><rect x="52.4475%" y="117" width="0.0261%" height="15" fill="rgb(244,137,37)" fg:x="12043" fg:w="6"/><text x="52.6975%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (3 samples, 0.01%)</title><rect x="52.4737%" y="133" width="0.0131%" height="15" fill="rgb(240,136,2)" fg:x="12049" fg:w="3"/><text x="52.7237%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset_pattern16 (3 samples, 0.01%)</title><rect x="52.4954%" y="133" width="0.0131%" height="15" fill="rgb(239,18,37)" fg:x="12054" fg:w="3"/><text x="52.7454%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (6 samples, 0.03%)</title><rect x="52.5477%" y="85" width="0.0261%" height="15" fill="rgb(218,185,22)" fg:x="12066" fg:w="6"/><text x="52.7977%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (9 samples, 0.04%)</title><rect x="52.5390%" y="117" width="0.0392%" height="15" fill="rgb(225,218,4)" fg:x="12064" fg:w="9"/><text x="52.7890%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (9 samples, 0.04%)</title><rect x="52.5390%" y="101" width="0.0392%" height="15" fill="rgb(230,182,32)" fg:x="12064" fg:w="9"/><text x="52.7890%" y="111.50"></text></g><g><title>nn`tensor_rs::impl_binary_ops::_&lt;impl core::ops::arith::Mul&lt;&amp;tensor_rs::TensorBase&lt;S,A&gt;&gt; for tensor_rs::TensorBase&lt;S,B&gt;&gt;::mul (96 samples, 0.42%)</title><rect x="52.1644%" y="149" width="0.4181%" height="15" fill="rgb(242,56,43)" fg:x="11978" fg:w="96"/><text x="52.4144%" y="159.50"></text></g><g><title>nn`tensor_rs::impl_methods::_&lt;impl tensor_rs::TensorBase&lt;S,tensor_rs::OwnedData&lt;Dtype&gt;&gt;&gt;::from_vec (16 samples, 0.07%)</title><rect x="52.5128%" y="133" width="0.0697%" height="15" fill="rgb(233,99,24)" fg:x="12058" fg:w="16"/><text x="52.7628%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (11 samples, 0.05%)</title><rect x="52.6391%" y="133" width="0.0479%" height="15" fill="rgb(234,209,42)" fg:x="12087" fg:w="11"/><text x="52.8891%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (6 samples, 0.03%)</title><rect x="52.6609%" y="117" width="0.0261%" height="15" fill="rgb(227,7,12)" fg:x="12092" fg:w="6"/><text x="52.9109%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (5 samples, 0.02%)</title><rect x="52.6653%" y="101" width="0.0218%" height="15" fill="rgb(245,203,43)" fg:x="12093" fg:w="5"/><text x="52.9153%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (13 samples, 0.06%)</title><rect x="52.7132%" y="117" width="0.0566%" height="15" fill="rgb(238,205,33)" fg:x="12104" fg:w="13"/><text x="52.9632%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (7 samples, 0.03%)</title><rect x="52.7393%" y="101" width="0.0305%" height="15" fill="rgb(231,56,7)" fg:x="12110" fg:w="7"/><text x="52.9893%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (6 samples, 0.03%)</title><rect x="52.7437%" y="85" width="0.0261%" height="15" fill="rgb(244,186,29)" fg:x="12111" fg:w="6"/><text x="52.9937%" y="95.50"></text></g><g><title>nn`tensor_rs::impl_methods::_&lt;impl tensor_rs::TensorBase&lt;S,A&gt;&gt;::map (44 samples, 0.19%)</title><rect x="52.5825%" y="149" width="0.1916%" height="15" fill="rgb(234,111,31)" fg:x="12074" fg:w="44"/><text x="52.8325%" y="159.50"></text></g><g><title>nn`tensor_rs::impl_methods::_&lt;impl tensor_rs::TensorBase&lt;S,tensor_rs::OwnedData&lt;Dtype&gt;&gt;&gt;::from_vec (16 samples, 0.07%)</title><rect x="52.7045%" y="133" width="0.0697%" height="15" fill="rgb(241,149,10)" fg:x="12102" fg:w="16"/><text x="52.9545%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (5 samples, 0.02%)</title><rect x="52.7916%" y="133" width="0.0218%" height="15" fill="rgb(249,206,44)" fg:x="12122" fg:w="5"/><text x="53.0416%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.02%)</title><rect x="52.7959%" y="117" width="0.0174%" height="15" fill="rgb(251,153,30)" fg:x="12123" fg:w="4"/><text x="53.0459%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.01%)</title><rect x="52.8003%" y="101" width="0.0131%" height="15" fill="rgb(239,152,38)" fg:x="12124" fg:w="3"/><text x="53.0503%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (3 samples, 0.01%)</title><rect x="52.8003%" y="85" width="0.0131%" height="15" fill="rgb(249,139,47)" fg:x="12124" fg:w="3"/><text x="53.0503%" y="95.50"></text></g><g><title>nn`tensor_rs::impl_methods::_&lt;impl tensor_rs::TensorBase&lt;S,tensor_rs::OwnedData&lt;Dtype&gt;&gt;&gt;::from_vec (10 samples, 0.04%)</title><rect x="52.7741%" y="149" width="0.0436%" height="15" fill="rgb(244,64,35)" fg:x="12118" fg:w="10"/><text x="53.0241%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (7 samples, 0.03%)</title><rect x="52.8438%" y="101" width="0.0305%" height="15" fill="rgb(216,46,15)" fg:x="12134" fg:w="7"/><text x="53.0938%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (6 samples, 0.03%)</title><rect x="52.8482%" y="85" width="0.0261%" height="15" fill="rgb(250,74,19)" fg:x="12135" fg:w="6"/><text x="53.0982%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_calloc (3 samples, 0.01%)</title><rect x="52.8787%" y="101" width="0.0131%" height="15" fill="rgb(249,42,33)" fg:x="12142" fg:w="3"/><text x="53.1287%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`medium_malloc_should_clear (7 samples, 0.03%)</title><rect x="52.9135%" y="85" width="0.0305%" height="15" fill="rgb(242,149,17)" fg:x="12150" fg:w="7"/><text x="53.1635%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`medium_malloc_from_free_list (3 samples, 0.01%)</title><rect x="52.9309%" y="69" width="0.0131%" height="15" fill="rgb(244,29,21)" fg:x="12154" fg:w="3"/><text x="53.1809%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (5 samples, 0.02%)</title><rect x="52.9658%" y="53" width="0.0218%" height="15" fill="rgb(220,130,37)" fg:x="12162" fg:w="5"/><text x="53.2158%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (20 samples, 0.09%)</title><rect x="52.9483%" y="85" width="0.0871%" height="15" fill="rgb(211,67,2)" fg:x="12158" fg:w="20"/><text x="53.1983%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (17 samples, 0.07%)</title><rect x="52.9614%" y="69" width="0.0740%" height="15" fill="rgb(235,68,52)" fg:x="12161" fg:w="17"/><text x="53.2114%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (11 samples, 0.05%)</title><rect x="52.9875%" y="53" width="0.0479%" height="15" fill="rgb(246,142,3)" fg:x="12167" fg:w="11"/><text x="53.2375%" y="63.50"></text></g><g><title>libsystem_platform.dylib`__bzero (370 samples, 1.61%)</title><rect x="53.0354%" y="85" width="1.6114%" height="15" fill="rgb(241,25,7)" fg:x="12178" fg:w="370"/><text x="53.2854%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (478 samples, 2.08%)</title><rect x="52.8395%" y="117" width="2.0817%" height="15" fill="rgb(242,119,39)" fg:x="12133" fg:w="478"/><text x="53.0895%" y="127.50">l..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (466 samples, 2.03%)</title><rect x="52.8917%" y="101" width="2.0294%" height="15" fill="rgb(241,98,45)" fg:x="12145" fg:w="466"/><text x="53.1417%" y="111.50">l..</text></g><g><title>libsystem_platform.dylib`_platform_memset (63 samples, 0.27%)</title><rect x="54.6468%" y="85" width="0.2744%" height="15" fill="rgb(254,28,30)" fg:x="12548" fg:w="63"/><text x="54.8968%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_calloc (4 samples, 0.02%)</title><rect x="54.9299%" y="117" width="0.0174%" height="15" fill="rgb(241,142,54)" fg:x="12613" fg:w="4"/><text x="55.1799%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (4 samples, 0.02%)</title><rect x="54.9473%" y="117" width="0.0174%" height="15" fill="rgb(222,85,15)" fg:x="12617" fg:w="4"/><text x="55.1973%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.01%)</title><rect x="54.9647%" y="117" width="0.0131%" height="15" fill="rgb(210,85,47)" fg:x="12621" fg:w="3"/><text x="55.2147%" y="127.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (22 samples, 0.10%)</title><rect x="58.9931%" y="101" width="0.0958%" height="15" fill="rgb(224,206,25)" fg:x="13546" fg:w="22"/><text x="59.2431%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (5 samples, 0.02%)</title><rect x="59.1151%" y="85" width="0.0218%" height="15" fill="rgb(243,201,19)" fg:x="13574" fg:w="5"/><text x="59.3651%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (4 samples, 0.02%)</title><rect x="59.1194%" y="69" width="0.0174%" height="15" fill="rgb(236,59,4)" fg:x="13575" fg:w="4"/><text x="59.3694%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (11 samples, 0.05%)</title><rect x="59.1935%" y="37" width="0.0479%" height="15" fill="rgb(254,179,45)" fg:x="13592" fg:w="11"/><text x="59.4435%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (3 samples, 0.01%)</title><rect x="59.2414%" y="37" width="0.0131%" height="15" fill="rgb(226,14,10)" fg:x="13603" fg:w="3"/><text x="59.4914%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (44 samples, 0.19%)</title><rect x="59.0889%" y="101" width="0.1916%" height="15" fill="rgb(244,27,41)" fg:x="13568" fg:w="44"/><text x="59.3389%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (33 samples, 0.14%)</title><rect x="59.1368%" y="85" width="0.1437%" height="15" fill="rgb(235,35,32)" fg:x="13579" fg:w="33"/><text x="59.3868%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (32 samples, 0.14%)</title><rect x="59.1412%" y="69" width="0.1394%" height="15" fill="rgb(218,68,31)" fg:x="13580" fg:w="32"/><text x="59.3912%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (23 samples, 0.10%)</title><rect x="59.1804%" y="53" width="0.1002%" height="15" fill="rgb(207,120,37)" fg:x="13589" fg:w="23"/><text x="59.4304%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (6 samples, 0.03%)</title><rect x="59.2544%" y="37" width="0.0261%" height="15" fill="rgb(227,98,0)" fg:x="13606" fg:w="6"/><text x="59.5044%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (3 samples, 0.01%)</title><rect x="59.3197%" y="85" width="0.0131%" height="15" fill="rgb(207,7,3)" fg:x="13621" fg:w="3"/><text x="59.5697%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_size (5 samples, 0.02%)</title><rect x="59.3372%" y="85" width="0.0218%" height="15" fill="rgb(206,98,19)" fg:x="13625" fg:w="5"/><text x="59.5872%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (5 samples, 0.02%)</title><rect x="59.3589%" y="85" width="0.0218%" height="15" fill="rgb(217,5,26)" fg:x="13630" fg:w="5"/><text x="59.6089%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (3 samples, 0.01%)</title><rect x="59.3677%" y="69" width="0.0131%" height="15" fill="rgb(235,190,38)" fg:x="13632" fg:w="3"/><text x="59.6177%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`free (23 samples, 0.10%)</title><rect x="59.2849%" y="101" width="0.1002%" height="15" fill="rgb(247,86,24)" fg:x="13613" fg:w="23"/><text x="59.5349%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (4 samples, 0.02%)</title><rect x="59.4025%" y="85" width="0.0174%" height="15" fill="rgb(205,101,16)" fg:x="13640" fg:w="4"/><text x="59.6525%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_small (9 samples, 0.04%)</title><rect x="59.3851%" y="101" width="0.0392%" height="15" fill="rgb(246,168,33)" fg:x="13636" fg:w="9"/><text x="59.6351%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (3 samples, 0.01%)</title><rect x="59.4373%" y="101" width="0.0131%" height="15" fill="rgb(231,114,1)" fg:x="13648" fg:w="3"/><text x="59.6873%" y="111.50"></text></g><g><title>nn`matrixmultiply::gemm::gemm_loop (1,018 samples, 4.43%)</title><rect x="55.0475%" y="117" width="4.4334%" height="15" fill="rgb(207,184,53)" fg:x="12640" fg:w="1018"/><text x="55.2975%" y="127.50">nn`ma..</text></g><g><title>nn`matrixmultiply::gemm::MASK_BUF::__getit (7 samples, 0.03%)</title><rect x="59.4504%" y="101" width="0.0305%" height="15" fill="rgb(224,95,51)" fg:x="13651" fg:w="7"/><text x="59.7004%" y="111.50"></text></g><g><title>nn`matrixmultiply::gemm::masked_kernel (8,137 samples, 35.44%)</title><rect x="59.4809%" y="117" width="35.4368%" height="15" fill="rgb(212,188,45)" fg:x="13658" fg:w="8137"/><text x="59.7309%" y="127.50">nn`matrixmultiply::gemm::masked_kernel</text></g><g><title>nn`matrixmultiply::gemm::pack (1,096 samples, 4.77%)</title><rect x="94.9177%" y="117" width="4.7731%" height="15" fill="rgb(223,154,38)" fg:x="21795" fg:w="1096"/><text x="95.1677%" y="127.50">nn`mat..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (26 samples, 0.11%)</title><rect x="99.6995%" y="101" width="0.1132%" height="15" fill="rgb(251,22,52)" fg:x="22893" fg:w="26"/><text x="99.9495%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (16 samples, 0.07%)</title><rect x="99.7431%" y="85" width="0.0697%" height="15" fill="rgb(229,209,22)" fg:x="22903" fg:w="16"/><text x="99.9931%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (11 samples, 0.05%)</title><rect x="99.7648%" y="69" width="0.0479%" height="15" fill="rgb(234,138,34)" fg:x="22908" fg:w="11"/><text x="100.0148%" y="79.50"></text></g><g><title>nn`tensor_rs::impl_methods::_&lt;impl tensor_rs::TensorBase&lt;S,tensor_rs::OwnedData&lt;Dtype&gt;&gt;&gt;::from_vec (30 samples, 0.13%)</title><rect x="99.6908%" y="117" width="0.1307%" height="15" fill="rgb(212,95,11)" fg:x="22891" fg:w="30"/><text x="99.9408%" y="127.50"></text></g><g><title>nn`tensor_rs::impl_processing_ops::_&lt;impl tensor_rs::TensorBase&lt;[usize (10,794 samples, 47.01%)</title><rect x="52.8177%" y="149" width="47.0081%" height="15" fill="rgb(240,179,47)" fg:x="12128" fg:w="10794"/><text x="53.0677%" y="159.50">nn`tensor_rs::impl_processing_ops::_&lt;impl tensor_rs::TensorBase&lt;[usize</text></g><g><title> 2],A&gt;&gt;::dot (10,794 samples, 47.01%)</title><rect x="52.8177%" y="133" width="47.0081%" height="15" fill="rgb(240,163,11)" fg:x="12128" fg:w="10794"/><text x="53.0677%" y="143.50"> 2],A&gt;&gt;::dot</text></g><g><title>nn`core::ops::function::FnOnce::call_once{{vtable.shim}} (14,329 samples, 62.40%)</title><rect x="37.4271%" y="165" width="62.4031%" height="15" fill="rgb(236,37,12)" fg:x="8594" fg:w="14329"/><text x="37.6771%" y="175.50">nn`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>nn`tensor_rs::gradient::GradientMap::mut_grad_by_id (3 samples, 0.01%)</title><rect x="99.8432%" y="165" width="0.0131%" height="15" fill="rgb(232,164,16)" fg:x="22926" fg:w="3"/><text x="100.0932%" y="175.50"></text></g><g><title>nn`tensor_rs::impl_binary_ops::_&lt;impl core::ops::arith::AddAssign&lt;&amp;tensor_rs::TensorBase&lt;S,B&gt;&gt; for tensor_rs::TensorBase&lt;S,A&gt;&gt;::add_assign (6 samples, 0.03%)</title><rect x="99.8563%" y="165" width="0.0261%" height="15" fill="rgb(244,205,15)" fg:x="22929" fg:w="6"/><text x="100.1063%" y="175.50"></text></g><g><title>nn`tensor_rs::impl_methods::_&lt;impl tensor_rs::TensorBase&lt;[usize (14,504 samples, 63.17%)</title><rect x="36.7738%" y="213" width="63.1652%" height="15" fill="rgb(223,117,47)" fg:x="8444" fg:w="14504"/><text x="37.0238%" y="223.50">nn`tensor_rs::impl_methods::_&lt;impl tensor_rs::TensorBase&lt;[usize</text></g><g><title> 0],A&gt;&gt;::backward (14,504 samples, 63.17%)</title><rect x="36.7738%" y="197" width="63.1652%" height="15" fill="rgb(244,107,35)" fg:x="8444" fg:w="14504"/><text x="37.0238%" y="207.50"> 0],A&gt;&gt;::backward</text></g><g><title>nn`tensor_rs::gradient::BackwardOps::execute (14,474 samples, 63.03%)</title><rect x="36.9045%" y="181" width="63.0346%" height="15" fill="rgb(205,140,8)" fg:x="8474" fg:w="14474"/><text x="37.1545%" y="191.50">nn`tensor_rs::gradient::BackwardOps::execute</text></g><g><title>nn`tensor_rs::impl_processing_ops::_&lt;impl tensor_rs::TensorBase&lt;[usize (4 samples, 0.02%)</title><rect x="99.9216%" y="165" width="0.0174%" height="15" fill="rgb(228,84,46)" fg:x="22944" fg:w="4"/><text x="100.1716%" y="175.50"></text></g><g><title> 2],A&gt;&gt;::dot (4 samples, 0.02%)</title><rect x="99.9216%" y="149" width="0.0174%" height="15" fill="rgb(254,188,9)" fg:x="22944" fg:w="4"/><text x="100.1716%" y="159.50"></text></g><g><title>nn`nn::main (22,950 samples, 99.95%)</title><rect x="0.0392%" y="229" width="99.9477%" height="15" fill="rgb(206,112,54)" fg:x="9" fg:w="22950"/><text x="0.2892%" y="239.50">nn`nn::main</text></g><g><title>nn`tensor_rs::mnist::mnist::load_data (11 samples, 0.05%)</title><rect x="99.9390%" y="213" width="0.0479%" height="15" fill="rgb(216,84,49)" fg:x="22948" fg:w="11"/><text x="100.1890%" y="223.50"></text></g><g><title>nn`std::fs::read::inner (11 samples, 0.05%)</title><rect x="99.9390%" y="197" width="0.0479%" height="15" fill="rgb(214,194,35)" fg:x="22948" fg:w="11"/><text x="100.1890%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`read (11 samples, 0.05%)</title><rect x="99.9390%" y="181" width="0.0479%" height="15" fill="rgb(249,28,3)" fg:x="22948" fg:w="11"/><text x="100.1890%" y="191.50"></text></g><g><title>all (22,962 samples, 100%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(222,56,52)" fg:x="0" fg:w="22962"/><text x="0.2500%" y="335.50"></text></g><g><title>dyld`start (22,962 samples, 100.00%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(245,217,50)" fg:x="0" fg:w="22962"/><text x="0.2500%" y="319.50">dyld`start</text></g><g><title>nn`main (22,962 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(213,201,24)" fg:x="0" fg:w="22962"/><text x="0.2500%" y="303.50">nn`main</text></g><g><title>nn`std::rt::lang_start_internal (22,962 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(248,116,28)" fg:x="0" fg:w="22962"/><text x="0.2500%" y="287.50">nn`std::rt::lang_start_internal</text></g><g><title>nn`std::rt::lang_start::_{{closure}} (22,962 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(219,72,43)" fg:x="0" fg:w="22962"/><text x="0.2500%" y="271.50">nn`std::rt::lang_start::_{{closure}}</text></g><g><title>nn`std::sys_common::backtrace::__rust_begin_short_backtrace (22,962 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(209,138,14)" fg:x="0" fg:w="22962"/><text x="0.2500%" y="255.50">nn`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>nn`tensor_rs::impl_binary_ops::_&lt;impl core::ops::arith::AddAssign&lt;&amp;tensor_rs::TensorBase&lt;S,B&gt;&gt; for tensor_rs::TensorBase&lt;S,A&gt;&gt;::add_assign (3 samples, 0.01%)</title><rect x="99.9869%" y="229" width="0.0131%" height="15" fill="rgb(222,18,33)" fg:x="22959" fg:w="3"/><text x="100.2369%" y="239.50"></text></g></svg></svg>