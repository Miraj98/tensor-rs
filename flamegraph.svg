<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="374" onload="init(evt)" viewBox="0 0 1200 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="374" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="357.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="357.00"> </text><svg id="frames" x="10" width="1180" total_samples="19533"><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (2 samples, 0.01%)</title><rect x="0.0000%" y="229" width="0.0102%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="2"/><text x="0.2500%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (2 samples, 0.01%)</title><rect x="0.0205%" y="229" width="0.0102%" height="15" fill="rgb(217,0,24)" fg:x="4" fg:w="2"/><text x="0.2705%" y="239.50"></text></g><g><title>nn`&lt;tensor_rs::TensorBase&lt;L,tensor_rs::OwnedData&lt;Dtype&gt;&gt; as tensor_rs::impl_binary_ops::TensorBinaryOps&lt;tensor_rs::TensorBase&lt;R,tensor_rs::OwnedData&lt;Dtype&gt;&gt;&gt;&gt;::add (2 samples, 0.01%)</title><rect x="0.0307%" y="229" width="0.0102%" height="15" fill="rgb(221,193,54)" fg:x="6" fg:w="2"/><text x="0.2807%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (4 samples, 0.02%)</title><rect x="0.2713%" y="213" width="0.0205%" height="15" fill="rgb(248,212,6)" fg:x="53" fg:w="4"/><text x="0.5213%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (5 samples, 0.03%)</title><rect x="0.3532%" y="197" width="0.0256%" height="15" fill="rgb(208,68,35)" fg:x="69" fg:w="5"/><text x="0.6032%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (19 samples, 0.10%)</title><rect x="0.2918%" y="213" width="0.0973%" height="15" fill="rgb(232,128,0)" fg:x="57" fg:w="19"/><text x="0.5418%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (5 samples, 0.03%)</title><rect x="0.3891%" y="213" width="0.0256%" height="15" fill="rgb(207,160,47)" fg:x="76" fg:w="5"/><text x="0.6391%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2 samples, 0.01%)</title><rect x="0.4044%" y="197" width="0.0102%" height="15" fill="rgb(228,23,34)" fg:x="79" fg:w="2"/><text x="0.6544%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (7 samples, 0.04%)</title><rect x="0.4147%" y="213" width="0.0358%" height="15" fill="rgb(218,30,26)" fg:x="81" fg:w="7"/><text x="0.6647%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (8 samples, 0.04%)</title><rect x="0.4505%" y="213" width="0.0410%" height="15" fill="rgb(220,122,19)" fg:x="88" fg:w="8"/><text x="0.7005%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (2 samples, 0.01%)</title><rect x="0.4915%" y="213" width="0.0102%" height="15" fill="rgb(250,228,42)" fg:x="96" fg:w="2"/><text x="0.7415%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset_pattern16 (5 samples, 0.03%)</title><rect x="0.5017%" y="213" width="0.0256%" height="15" fill="rgb(240,193,28)" fg:x="98" fg:w="5"/><text x="0.7517%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (3 samples, 0.02%)</title><rect x="0.5683%" y="197" width="0.0154%" height="15" fill="rgb(216,20,37)" fg:x="111" fg:w="3"/><text x="0.8183%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (22 samples, 0.11%)</title><rect x="0.5836%" y="197" width="0.1126%" height="15" fill="rgb(206,188,39)" fg:x="114" fg:w="22"/><text x="0.8336%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (6 samples, 0.03%)</title><rect x="0.6655%" y="181" width="0.0307%" height="15" fill="rgb(217,207,13)" fg:x="130" fg:w="6"/><text x="0.9155%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (8 samples, 0.04%)</title><rect x="0.7014%" y="197" width="0.0410%" height="15" fill="rgb(231,73,38)" fg:x="137" fg:w="8"/><text x="0.9514%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (20 samples, 0.10%)</title><rect x="0.7423%" y="197" width="0.1024%" height="15" fill="rgb(225,20,46)" fg:x="145" fg:w="20"/><text x="0.9923%" y="207.50"></text></g><g><title>nn`DYLD-STUB$$free (4 samples, 0.02%)</title><rect x="0.8498%" y="197" width="0.0205%" height="15" fill="rgb(210,31,41)" fg:x="166" fg:w="4"/><text x="1.0998%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (4 samples, 0.02%)</title><rect x="0.8703%" y="165" width="0.0205%" height="15" fill="rgb(221,200,47)" fg:x="170" fg:w="4"/><text x="1.1203%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.01%)</title><rect x="0.8806%" y="149" width="0.0102%" height="15" fill="rgb(226,26,5)" fg:x="172" fg:w="2"/><text x="1.1306%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (3 samples, 0.02%)</title><rect x="0.8908%" y="165" width="0.0154%" height="15" fill="rgb(249,33,26)" fg:x="174" fg:w="3"/><text x="1.1408%" y="175.50"></text></g><g><title> 0]&gt;&gt; (8 samples, 0.04%)</title><rect x="0.8703%" y="181" width="0.0410%" height="15" fill="rgb(235,183,28)" fg:x="170" fg:w="8"/><text x="1.1203%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (27 samples, 0.14%)</title><rect x="1.0444%" y="149" width="0.1382%" height="15" fill="rgb(221,5,38)" fg:x="204" fg:w="27"/><text x="1.2944%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_size (5 samples, 0.03%)</title><rect x="1.1826%" y="149" width="0.0256%" height="15" fill="rgb(247,18,42)" fg:x="231" fg:w="5"/><text x="1.4326%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (59 samples, 0.30%)</title><rect x="0.9113%" y="165" width="0.3021%" height="15" fill="rgb(241,131,45)" fg:x="178" fg:w="59"/><text x="1.1613%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (8 samples, 0.04%)</title><rect x="1.2133%" y="165" width="0.0410%" height="15" fill="rgb(249,31,29)" fg:x="237" fg:w="8"/><text x="1.4633%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_small (5 samples, 0.03%)</title><rect x="1.2543%" y="165" width="0.0256%" height="15" fill="rgb(225,111,53)" fg:x="245" fg:w="5"/><text x="1.5043%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (2 samples, 0.01%)</title><rect x="1.2799%" y="165" width="0.0102%" height="15" fill="rgb(238,160,17)" fg:x="250" fg:w="2"/><text x="1.5299%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (10 samples, 0.05%)</title><rect x="1.2901%" y="165" width="0.0512%" height="15" fill="rgb(214,148,48)" fg:x="252" fg:w="10"/><text x="1.5401%" y="175.50"></text></g><g><title>nn`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (161 samples, 0.82%)</title><rect x="0.5273%" y="213" width="0.8242%" height="15" fill="rgb(232,36,49)" fg:x="103" fg:w="161"/><text x="0.7773%" y="223.50"></text></g><g><title>nn`core::ptr::drop_in_place&lt;tensor_rs::TensorBase&lt;[usize (94 samples, 0.48%)</title><rect x="0.8703%" y="197" width="0.4812%" height="15" fill="rgb(209,103,24)" fg:x="170" fg:w="94"/><text x="1.1203%" y="207.50"></text></g><g><title> 2]&gt;&gt; (86 samples, 0.44%)</title><rect x="0.9113%" y="181" width="0.4403%" height="15" fill="rgb(229,88,8)" fg:x="178" fg:w="86"/><text x="1.1613%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.01%)</title><rect x="1.5000%" y="181" width="0.0102%" height="15" fill="rgb(213,181,19)" fg:x="293" fg:w="2"/><text x="1.7500%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (5 samples, 0.03%)</title><rect x="1.5103%" y="165" width="0.0256%" height="15" fill="rgb(254,191,54)" fg:x="295" fg:w="5"/><text x="1.7603%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (4 samples, 0.02%)</title><rect x="1.5154%" y="149" width="0.0205%" height="15" fill="rgb(241,83,37)" fg:x="296" fg:w="4"/><text x="1.7654%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (11 samples, 0.06%)</title><rect x="1.4847%" y="197" width="0.0563%" height="15" fill="rgb(233,36,39)" fg:x="290" fg:w="11"/><text x="1.7347%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (6 samples, 0.03%)</title><rect x="1.5103%" y="181" width="0.0307%" height="15" fill="rgb(226,3,54)" fg:x="295" fg:w="6"/><text x="1.7603%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free (2 samples, 0.01%)</title><rect x="1.5563%" y="117" width="0.0102%" height="15" fill="rgb(245,192,40)" fg:x="304" fg:w="2"/><text x="1.8063%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.01%)</title><rect x="1.5717%" y="117" width="0.0102%" height="15" fill="rgb(238,167,29)" fg:x="307" fg:w="2"/><text x="1.8217%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.01%)</title><rect x="1.5717%" y="101" width="0.0102%" height="15" fill="rgb(232,182,51)" fg:x="307" fg:w="2"/><text x="1.8217%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (9 samples, 0.05%)</title><rect x="1.5461%" y="149" width="0.0461%" height="15" fill="rgb(231,60,39)" fg:x="302" fg:w="9"/><text x="1.7961%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (8 samples, 0.04%)</title><rect x="1.5512%" y="133" width="0.0410%" height="15" fill="rgb(208,69,12)" fg:x="303" fg:w="8"/><text x="1.8012%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.01%)</title><rect x="1.5819%" y="117" width="0.0102%" height="15" fill="rgb(235,93,37)" fg:x="309" fg:w="2"/><text x="1.8319%" y="127.50"></text></g><g><title>nn`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (12 samples, 0.06%)</title><rect x="1.5410%" y="197" width="0.0614%" height="15" fill="rgb(213,116,39)" fg:x="301" fg:w="12"/><text x="1.7910%" y="207.50"></text></g><g><title>nn`alloc::raw_vec::finish_grow (11 samples, 0.06%)</title><rect x="1.5461%" y="181" width="0.0563%" height="15" fill="rgb(222,207,29)" fg:x="302" fg:w="11"/><text x="1.7961%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (11 samples, 0.06%)</title><rect x="1.5461%" y="165" width="0.0563%" height="15" fill="rgb(206,96,30)" fg:x="302" fg:w="11"/><text x="1.7961%" y="175.50"></text></g><g><title>nn`tensor_rs::impl_methods::_&lt;impl tensor_rs::TensorBase&lt;S,A&gt;&gt;::put_backward_ops (2 samples, 0.01%)</title><rect x="1.6024%" y="197" width="0.0102%" height="15" fill="rgb(218,138,4)" fg:x="313" fg:w="2"/><text x="1.8524%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.01%)</title><rect x="1.6178%" y="181" width="0.0102%" height="15" fill="rgb(250,191,14)" fg:x="316" fg:w="2"/><text x="1.8678%" y="191.50"></text></g><g><title>nn`tensor_rs::impl_methods::_&lt;impl tensor_rs::TensorBase&lt;S,tensor_rs::OwnedData&lt;Dtype&gt;&gt;&gt;::from_vec (4 samples, 0.02%)</title><rect x="1.6127%" y="197" width="0.0205%" height="15" fill="rgb(239,60,40)" fg:x="315" fg:w="4"/><text x="1.8627%" y="207.50"></text></g><g><title>nn`&lt;tensor_rs::TensorBase&lt;L,tensor_rs::OwnedData&lt;Dtype&gt;&gt; as tensor_rs::impl_binary_ops::TensorBinaryOps&lt;tensor_rs::TensorBase&lt;R,tensor_rs::OwnedData&lt;Dtype&gt;&gt;&gt;&gt;::add (56 samples, 0.29%)</title><rect x="1.3516%" y="213" width="0.2867%" height="15" fill="rgb(206,27,48)" fg:x="264" fg:w="56"/><text x="1.6016%" y="223.50"></text></g><g><title>nn`tensor_rs::gradient::BackwardOps::add_backward_op (4 samples, 0.02%)</title><rect x="1.6843%" y="197" width="0.0205%" height="15" fill="rgb(225,35,8)" fg:x="329" fg:w="4"/><text x="1.9343%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.01%)</title><rect x="1.6946%" y="181" width="0.0102%" height="15" fill="rgb(250,213,24)" fg:x="331" fg:w="2"/><text x="1.9446%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.01%)</title><rect x="1.7202%" y="181" width="0.0102%" height="15" fill="rgb(247,123,22)" fg:x="336" fg:w="2"/><text x="1.9702%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.01%)</title><rect x="1.7202%" y="165" width="0.0102%" height="15" fill="rgb(231,138,38)" fg:x="336" fg:w="2"/><text x="1.9702%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.01%)</title><rect x="1.7202%" y="149" width="0.0102%" height="15" fill="rgb(231,145,46)" fg:x="336" fg:w="2"/><text x="1.9702%" y="159.50"></text></g><g><title>nn`tensor_rs::impl_binary_ops::_&lt;impl core::ops::arith::Mul&lt;&amp;tensor_rs::TensorBase&lt;S,A&gt;&gt; for &amp;tensor_rs::TensorBase&lt;S,B&gt;&gt;::mul (10 samples, 0.05%)</title><rect x="1.7048%" y="197" width="0.0512%" height="15" fill="rgb(251,118,11)" fg:x="333" fg:w="10"/><text x="1.9548%" y="207.50"></text></g><g><title>nn`tensor_rs::impl_methods::_&lt;impl tensor_rs::TensorBase&lt;S,tensor_rs::OwnedData&lt;Dtype&gt;&gt;&gt;::from_vec (3 samples, 0.02%)</title><rect x="1.7406%" y="181" width="0.0154%" height="15" fill="rgb(217,147,25)" fg:x="340" fg:w="3"/><text x="1.9906%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.02%)</title><rect x="1.7406%" y="165" width="0.0154%" height="15" fill="rgb(247,81,37)" fg:x="340" fg:w="3"/><text x="1.9906%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.01%)</title><rect x="1.7458%" y="149" width="0.0102%" height="15" fill="rgb(209,12,38)" fg:x="341" fg:w="2"/><text x="1.9958%" y="159.50"></text></g><g><title>nn`&lt;tensor_rs::TensorBase&lt;L,tensor_rs::OwnedData&lt;Dtype&gt;&gt; as tensor_rs::impl_binary_ops::TensorBinaryOps&lt;tensor_rs::TensorBase&lt;R,tensor_rs::OwnedData&lt;Dtype&gt;&gt;&gt;&gt;::mul (25 samples, 0.13%)</title><rect x="1.6383%" y="213" width="0.1280%" height="15" fill="rgb(227,1,9)" fg:x="320" fg:w="25"/><text x="1.8883%" y="223.50"></text></g><g><title>nn`tensor_rs::utils::merge_backward_ops (2 samples, 0.01%)</title><rect x="1.7560%" y="197" width="0.0102%" height="15" fill="rgb(248,47,43)" fg:x="343" fg:w="2"/><text x="2.0060%" y="207.50"></text></g><g><title>nn`&lt;core::option::Option&lt;tensor_rs::gradient::BackwardOps&gt; as tensor_rs::gradient::Merge&gt;::merge (2 samples, 0.01%)</title><rect x="1.7560%" y="181" width="0.0102%" height="15" fill="rgb(221,10,30)" fg:x="343" fg:w="2"/><text x="2.0060%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.02%)</title><rect x="1.7867%" y="197" width="0.0205%" height="15" fill="rgb(210,229,1)" fg:x="349" fg:w="4"/><text x="2.0367%" y="207.50"></text></g><g><title>nn`&lt;tensor_rs::TensorBase&lt;L,tensor_rs::OwnedData&lt;Dtype&gt;&gt; as tensor_rs::impl_binary_ops::TensorBinaryOps&lt;tensor_rs::TensorBase&lt;R,tensor_rs::OwnedData&lt;Dtype&gt;&gt;&gt;&gt;::sub (11 samples, 0.06%)</title><rect x="1.7662%" y="213" width="0.0563%" height="15" fill="rgb(222,148,37)" fg:x="345" fg:w="11"/><text x="2.0162%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.02%)</title><rect x="1.8277%" y="197" width="0.0154%" height="15" fill="rgb(234,67,33)" fg:x="357" fg:w="3"/><text x="2.0777%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.02%)</title><rect x="1.8277%" y="181" width="0.0154%" height="15" fill="rgb(247,98,35)" fg:x="357" fg:w="3"/><text x="2.0777%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.02%)</title><rect x="1.8277%" y="165" width="0.0154%" height="15" fill="rgb(247,138,52)" fg:x="357" fg:w="3"/><text x="2.0777%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.01%)</title><rect x="1.8328%" y="149" width="0.0102%" height="15" fill="rgb(213,79,30)" fg:x="358" fg:w="2"/><text x="2.0828%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.01%)</title><rect x="1.8533%" y="181" width="0.0102%" height="15" fill="rgb(246,177,23)" fg:x="362" fg:w="2"/><text x="2.1033%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.01%)</title><rect x="1.8533%" y="165" width="0.0102%" height="15" fill="rgb(230,62,27)" fg:x="362" fg:w="2"/><text x="2.1033%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.01%)</title><rect x="1.8533%" y="149" width="0.0102%" height="15" fill="rgb(216,154,8)" fg:x="362" fg:w="2"/><text x="2.1033%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.02%)</title><rect x="1.8840%" y="101" width="0.0154%" height="15" fill="rgb(244,35,45)" fg:x="368" fg:w="3"/><text x="2.1340%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.01%)</title><rect x="1.8891%" y="85" width="0.0102%" height="15" fill="rgb(251,115,12)" fg:x="369" fg:w="2"/><text x="2.1391%" y="95.50"></text></g><g><title>nn`tensor_rs::gradient::BackwardOps::add_backward_op (13 samples, 0.07%)</title><rect x="1.8430%" y="197" width="0.0666%" height="15" fill="rgb(240,54,50)" fg:x="360" fg:w="13"/><text x="2.0930%" y="207.50"></text></g><g><title>nn`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (8 samples, 0.04%)</title><rect x="1.8686%" y="181" width="0.0410%" height="15" fill="rgb(233,84,52)" fg:x="365" fg:w="8"/><text x="2.1186%" y="191.50"></text></g><g><title>nn`alloc::raw_vec::finish_grow (7 samples, 0.04%)</title><rect x="1.8738%" y="165" width="0.0358%" height="15" fill="rgb(207,117,47)" fg:x="366" fg:w="7"/><text x="2.1238%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`realloc (6 samples, 0.03%)</title><rect x="1.8789%" y="149" width="0.0307%" height="15" fill="rgb(249,43,39)" fg:x="367" fg:w="6"/><text x="2.1289%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (6 samples, 0.03%)</title><rect x="1.8789%" y="133" width="0.0307%" height="15" fill="rgb(209,38,44)" fg:x="367" fg:w="6"/><text x="2.1289%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (5 samples, 0.03%)</title><rect x="1.8840%" y="117" width="0.0256%" height="15" fill="rgb(236,212,23)" fg:x="368" fg:w="5"/><text x="2.1340%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.01%)</title><rect x="1.8993%" y="101" width="0.0102%" height="15" fill="rgb(242,79,21)" fg:x="371" fg:w="2"/><text x="2.1493%" y="111.50"></text></g><g><title>nn`&lt;tensor_rs::TensorBase&lt;S,A&gt; as tensor_rs::impl_reduce_ops::ReduceOps&gt;::sum (21 samples, 0.11%)</title><rect x="1.8226%" y="213" width="0.1075%" height="15" fill="rgb(211,96,35)" fg:x="356" fg:w="21"/><text x="2.0726%" y="223.50"></text></g><g><title>nn`tensor_rs::impl_methods::_&lt;impl tensor_rs::TensorBase&lt;S,tensor_rs::OwnedData&lt;Dtype&gt;&gt;&gt;::from_vec (4 samples, 0.02%)</title><rect x="1.9096%" y="197" width="0.0205%" height="15" fill="rgb(253,215,40)" fg:x="373" fg:w="4"/><text x="2.1596%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.01%)</title><rect x="1.9198%" y="181" width="0.0102%" height="15" fill="rgb(211,81,21)" fg:x="375" fg:w="2"/><text x="2.1698%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset_pattern16 (2 samples, 0.01%)</title><rect x="1.9608%" y="197" width="0.0102%" height="15" fill="rgb(208,190,38)" fg:x="383" fg:w="2"/><text x="2.2108%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.02%)</title><rect x="1.9813%" y="181" width="0.0205%" height="15" fill="rgb(235,213,38)" fg:x="387" fg:w="4"/><text x="2.2313%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.02%)</title><rect x="1.9864%" y="165" width="0.0154%" height="15" fill="rgb(237,122,38)" fg:x="388" fg:w="3"/><text x="2.2364%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.02%)</title><rect x="1.9864%" y="149" width="0.0154%" height="15" fill="rgb(244,218,35)" fg:x="388" fg:w="3"/><text x="2.2364%" y="159.50"></text></g><g><title>nn`&lt;f32 as tensor_rs::DataElement&gt;::sigmoid (40 samples, 0.20%)</title><rect x="2.0017%" y="181" width="0.2048%" height="15" fill="rgb(240,68,47)" fg:x="391" fg:w="40"/><text x="2.2517%" y="191.50"></text></g><g><title>libsystem_m.dylib`expf (31 samples, 0.16%)</title><rect x="2.0478%" y="165" width="0.1587%" height="15" fill="rgb(210,16,53)" fg:x="400" fg:w="31"/><text x="2.2978%" y="175.50"></text></g><g><title>nn`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (49 samples, 0.25%)</title><rect x="1.9710%" y="197" width="0.2509%" height="15" fill="rgb(235,124,12)" fg:x="385" fg:w="49"/><text x="2.2210%" y="207.50"></text></g><g><title>nn`DYLD-STUB$$expf (3 samples, 0.02%)</title><rect x="2.2065%" y="181" width="0.0154%" height="15" fill="rgb(224,169,11)" fg:x="431" fg:w="3"/><text x="2.4565%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.02%)</title><rect x="2.2270%" y="181" width="0.0205%" height="15" fill="rgb(250,166,2)" fg:x="435" fg:w="4"/><text x="2.4770%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.02%)</title><rect x="2.2321%" y="165" width="0.0154%" height="15" fill="rgb(242,216,29)" fg:x="436" fg:w="3"/><text x="2.4821%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.01%)</title><rect x="2.2372%" y="149" width="0.0102%" height="15" fill="rgb(230,116,27)" fg:x="437" fg:w="2"/><text x="2.4872%" y="159.50"></text></g><g><title>nn`tensor_rs::gradient::BackwardOps::add_backward_op (5 samples, 0.03%)</title><rect x="2.2270%" y="197" width="0.0256%" height="15" fill="rgb(228,99,48)" fg:x="435" fg:w="5"/><text x="2.4770%" y="207.50"></text></g><g><title>nn`&lt;tensor_rs::TensorBase&lt;S&gt; as tensor_rs::impl_unary_ops::TensorUnaryOps&gt;::sigmoid (65 samples, 0.33%)</title><rect x="1.9301%" y="213" width="0.3328%" height="15" fill="rgb(253,11,6)" fg:x="377" fg:w="65"/><text x="2.1801%" y="223.50"></text></g><g><title>nn`tensor_rs::impl_methods::_&lt;impl tensor_rs::TensorBase&lt;S,tensor_rs::OwnedData&lt;Dtype&gt;&gt;&gt;::from_vec (2 samples, 0.01%)</title><rect x="2.2526%" y="197" width="0.0102%" height="15" fill="rgb(247,143,39)" fg:x="440" fg:w="2"/><text x="2.5026%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.01%)</title><rect x="2.2782%" y="133" width="0.0102%" height="15" fill="rgb(236,97,10)" fg:x="445" fg:w="2"/><text x="2.5282%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (3 samples, 0.02%)</title><rect x="2.2782%" y="165" width="0.0154%" height="15" fill="rgb(233,208,19)" fg:x="445" fg:w="3"/><text x="2.5282%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (3 samples, 0.02%)</title><rect x="2.2782%" y="149" width="0.0154%" height="15" fill="rgb(216,164,2)" fg:x="445" fg:w="3"/><text x="2.5282%" y="159.50"></text></g><g><title>nn`DYLD-STUB$$malloc (2 samples, 0.01%)</title><rect x="2.3038%" y="165" width="0.0102%" height="15" fill="rgb(220,129,5)" fg:x="450" fg:w="2"/><text x="2.5538%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`medium_malloc_should_clear (2 samples, 0.01%)</title><rect x="2.6417%" y="117" width="0.0102%" height="15" fill="rgb(242,17,10)" fg:x="516" fg:w="2"/><text x="2.8917%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`medium_malloc_from_free_list (2 samples, 0.01%)</title><rect x="2.6417%" y="101" width="0.0102%" height="15" fill="rgb(242,107,0)" fg:x="516" fg:w="2"/><text x="2.8917%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (7 samples, 0.04%)</title><rect x="2.6417%" y="149" width="0.0358%" height="15" fill="rgb(251,28,31)" fg:x="516" fg:w="7"/><text x="2.8917%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (7 samples, 0.04%)</title><rect x="2.6417%" y="133" width="0.0358%" height="15" fill="rgb(233,223,10)" fg:x="516" fg:w="7"/><text x="2.8917%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (4 samples, 0.02%)</title><rect x="2.6570%" y="117" width="0.0205%" height="15" fill="rgb(215,21,27)" fg:x="519" fg:w="4"/><text x="2.9070%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (4 samples, 0.02%)</title><rect x="2.6570%" y="101" width="0.0205%" height="15" fill="rgb(232,23,21)" fg:x="519" fg:w="4"/><text x="2.9070%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (2 samples, 0.01%)</title><rect x="2.6673%" y="85" width="0.0102%" height="15" fill="rgb(244,5,23)" fg:x="521" fg:w="2"/><text x="2.9173%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.01%)</title><rect x="2.6775%" y="149" width="0.0102%" height="15" fill="rgb(226,81,46)" fg:x="523" fg:w="2"/><text x="2.9275%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`medium_free_list_add_ptr (2 samples, 0.01%)</title><rect x="2.7134%" y="133" width="0.0102%" height="15" fill="rgb(247,70,30)" fg:x="530" fg:w="2"/><text x="2.9634%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (9 samples, 0.05%)</title><rect x="2.6878%" y="149" width="0.0461%" height="15" fill="rgb(212,68,19)" fg:x="525" fg:w="9"/><text x="2.9378%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`medium_free_list_find_by_ptr (2 samples, 0.01%)</title><rect x="2.7236%" y="133" width="0.0102%" height="15" fill="rgb(240,187,13)" fg:x="532" fg:w="2"/><text x="2.9736%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_find_by_ptr (2 samples, 0.01%)</title><rect x="2.7543%" y="133" width="0.0102%" height="15" fill="rgb(223,113,26)" fg:x="538" fg:w="2"/><text x="3.0043%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_small (8 samples, 0.04%)</title><rect x="2.7338%" y="149" width="0.0410%" height="15" fill="rgb(206,192,2)" fg:x="534" fg:w="8"/><text x="2.9838%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (2 samples, 0.01%)</title><rect x="2.7646%" y="133" width="0.0102%" height="15" fill="rgb(241,108,4)" fg:x="540" fg:w="2"/><text x="3.0146%" y="143.50"></text></g><g><title>nn`matrixmultiply::gemm::gemm_loop (93 samples, 0.48%)</title><rect x="2.3140%" y="165" width="0.4761%" height="15" fill="rgb(247,173,49)" fg:x="452" fg:w="93"/><text x="2.5640%" y="175.50"></text></g><g><title>nn`matrixmultiply::gemm::masked_kernel (1,096 samples, 5.61%)</title><rect x="2.7902%" y="165" width="5.6110%" height="15" fill="rgb(224,114,35)" fg:x="545" fg:w="1096"/><text x="3.0402%" y="175.50">nn`matr..</text></g><g><title>nn`matrixmultiply::gemm::pack (680 samples, 3.48%)</title><rect x="8.4012%" y="165" width="3.4813%" height="15" fill="rgb(245,159,27)" fg:x="1641" fg:w="680"/><text x="8.6512%" y="175.50">nn`..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.02%)</title><rect x="11.8927%" y="133" width="0.0154%" height="15" fill="rgb(245,172,44)" fg:x="2323" fg:w="3"/><text x="12.1427%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (5 samples, 0.03%)</title><rect x="11.8927%" y="149" width="0.0256%" height="15" fill="rgb(236,23,11)" fg:x="2323" fg:w="5"/><text x="12.1427%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.01%)</title><rect x="11.9081%" y="133" width="0.0102%" height="15" fill="rgb(205,117,38)" fg:x="2326" fg:w="2"/><text x="12.1581%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.01%)</title><rect x="11.9081%" y="117" width="0.0102%" height="15" fill="rgb(237,72,25)" fg:x="2326" fg:w="2"/><text x="12.1581%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.01%)</title><rect x="11.9388%" y="85" width="0.0102%" height="15" fill="rgb(244,70,9)" fg:x="2332" fg:w="2"/><text x="12.1888%" y="95.50"></text></g><g><title>nn`tensor_rs::gradient::BackwardOps::add_backward_op (14 samples, 0.07%)</title><rect x="11.8825%" y="165" width="0.0717%" height="15" fill="rgb(217,125,39)" fg:x="2321" fg:w="14"/><text x="12.1325%" y="175.50"></text></g><g><title>nn`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (7 samples, 0.04%)</title><rect x="11.9183%" y="149" width="0.0358%" height="15" fill="rgb(235,36,10)" fg:x="2328" fg:w="7"/><text x="12.1683%" y="159.50"></text></g><g><title>nn`alloc::raw_vec::finish_grow (4 samples, 0.02%)</title><rect x="11.9337%" y="133" width="0.0205%" height="15" fill="rgb(251,123,47)" fg:x="2331" fg:w="4"/><text x="12.1837%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.02%)</title><rect x="11.9337%" y="117" width="0.0205%" height="15" fill="rgb(221,13,13)" fg:x="2331" fg:w="4"/><text x="12.1837%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.02%)</title><rect x="11.9337%" y="101" width="0.0205%" height="15" fill="rgb(238,131,9)" fg:x="2331" fg:w="4"/><text x="12.1837%" y="111.50"></text></g><g><title>nn`tensor_rs::impl_methods::_&lt;impl tensor_rs::TensorBase&lt;S,tensor_rs::OwnedData&lt;Dtype&gt;&gt;&gt;::from_vec (4 samples, 0.02%)</title><rect x="11.9541%" y="165" width="0.0205%" height="15" fill="rgb(211,50,8)" fg:x="2335" fg:w="4"/><text x="12.2041%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.02%)</title><rect x="11.9592%" y="149" width="0.0154%" height="15" fill="rgb(245,182,24)" fg:x="2336" fg:w="3"/><text x="12.2092%" y="159.50"></text></g><g><title>nn`&lt;tensor_rs::TensorBase&lt;[usize (1,898 samples, 9.72%)</title><rect x="2.2628%" y="213" width="9.7169%" height="15" fill="rgb(242,14,37)" fg:x="442" fg:w="1898"/><text x="2.5128%" y="223.50">nn`&lt;tensor_rs:..</text></g><g><title> 2],A&gt; as tensor_rs::impl_processing_ops::Matmul&lt;tensor_rs::TensorBase&lt;[usize (1,898 samples, 9.72%)</title><rect x="2.2628%" y="197" width="9.7169%" height="15" fill="rgb(246,228,12)" fg:x="442" fg:w="1898"/><text x="2.5128%" y="207.50"> 2],A&gt; as tens..</text></g><g><title> 2],A&gt;&gt;&gt;::matmul (1,898 samples, 9.72%)</title><rect x="2.2628%" y="181" width="9.7169%" height="15" fill="rgb(213,55,15)" fg:x="442" fg:w="1898"/><text x="2.5128%" y="191.50"> 2],A&gt;&gt;&gt;::matm..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.01%)</title><rect x="12.0053%" y="149" width="0.0102%" height="15" fill="rgb(209,9,3)" fg:x="2345" fg:w="2"/><text x="12.2553%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (4 samples, 0.02%)</title><rect x="12.0053%" y="181" width="0.0205%" height="15" fill="rgb(230,59,30)" fg:x="2345" fg:w="4"/><text x="12.2553%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (4 samples, 0.02%)</title><rect x="12.0053%" y="165" width="0.0205%" height="15" fill="rgb(209,121,21)" fg:x="2345" fg:w="4"/><text x="12.2553%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (7 samples, 0.04%)</title><rect x="12.0360%" y="181" width="0.0358%" height="15" fill="rgb(220,109,13)" fg:x="2351" fg:w="7"/><text x="12.2860%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (5 samples, 0.03%)</title><rect x="12.2050%" y="101" width="0.0256%" height="15" fill="rgb(232,18,1)" fg:x="2384" fg:w="5"/><text x="12.4550%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (8 samples, 0.04%)</title><rect x="12.1999%" y="133" width="0.0410%" height="15" fill="rgb(215,41,42)" fg:x="2383" fg:w="8"/><text x="12.4499%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (7 samples, 0.04%)</title><rect x="12.2050%" y="117" width="0.0358%" height="15" fill="rgb(224,123,36)" fg:x="2384" fg:w="7"/><text x="12.4550%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (2 samples, 0.01%)</title><rect x="12.2306%" y="101" width="0.0102%" height="15" fill="rgb(240,125,3)" fg:x="2389" fg:w="2"/><text x="12.4806%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (14 samples, 0.07%)</title><rect x="12.1845%" y="165" width="0.0717%" height="15" fill="rgb(205,98,50)" fg:x="2380" fg:w="14"/><text x="12.4345%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (13 samples, 0.07%)</title><rect x="12.1896%" y="149" width="0.0666%" height="15" fill="rgb(205,185,37)" fg:x="2381" fg:w="13"/><text x="12.4396%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (3 samples, 0.02%)</title><rect x="12.2408%" y="133" width="0.0154%" height="15" fill="rgb(238,207,15)" fg:x="2391" fg:w="3"/><text x="12.4908%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (2 samples, 0.01%)</title><rect x="12.2459%" y="117" width="0.0102%" height="15" fill="rgb(213,199,42)" fg:x="2392" fg:w="2"/><text x="12.4959%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.01%)</title><rect x="12.2562%" y="165" width="0.0102%" height="15" fill="rgb(235,201,11)" fg:x="2394" fg:w="2"/><text x="12.5062%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (4 samples, 0.02%)</title><rect x="12.2664%" y="165" width="0.0205%" height="15" fill="rgb(207,46,11)" fg:x="2396" fg:w="4"/><text x="12.5164%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (4 samples, 0.02%)</title><rect x="12.2664%" y="149" width="0.0205%" height="15" fill="rgb(241,35,35)" fg:x="2396" fg:w="4"/><text x="12.5164%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (4 samples, 0.02%)</title><rect x="12.2971%" y="117" width="0.0205%" height="15" fill="rgb(243,32,47)" fg:x="2402" fg:w="4"/><text x="12.5471%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (6 samples, 0.03%)</title><rect x="12.2920%" y="149" width="0.0307%" height="15" fill="rgb(247,202,23)" fg:x="2401" fg:w="6"/><text x="12.5420%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (5 samples, 0.03%)</title><rect x="12.2971%" y="133" width="0.0256%" height="15" fill="rgb(219,102,11)" fg:x="2402" fg:w="5"/><text x="12.5471%" y="143.50"></text></g><g><title>nn`&lt;tensor_rs::mnist::mnist::MnistData as tensor_rs::mnist::Dataloader&gt;::get_by_idx (64 samples, 0.33%)</title><rect x="12.0053%" y="197" width="0.3277%" height="15" fill="rgb(243,110,44)" fg:x="2345" fg:w="64"/><text x="12.2553%" y="207.50"></text></g><g><title>nn`tensor_rs::mnist::mnist::MnistData::get_image_nn_input (49 samples, 0.25%)</title><rect x="12.0821%" y="181" width="0.2509%" height="15" fill="rgb(222,74,54)" fg:x="2360" fg:w="49"/><text x="12.3321%" y="191.50"></text></g><g><title>nn`tensor_rs::impl_methods::_&lt;impl tensor_rs::TensorBase&lt;S,tensor_rs::OwnedData&lt;Dtype&gt;&gt;&gt;::from_vec (8 samples, 0.04%)</title><rect x="12.2920%" y="165" width="0.0410%" height="15" fill="rgb(216,99,12)" fg:x="2401" fg:w="8"/><text x="12.5420%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (2 samples, 0.01%)</title><rect x="12.3227%" y="149" width="0.0102%" height="15" fill="rgb(226,22,26)" fg:x="2407" fg:w="2"/><text x="12.5727%" y="159.50"></text></g><g><title>nn`&lt;tensor_rs::mnist::mnist::MnistData as tensor_rs::mnist::Dataloader&gt;::get_batch (74 samples, 0.38%)</title><rect x="11.9797%" y="213" width="0.3788%" height="15" fill="rgb(217,163,10)" fg:x="2340" fg:w="74"/><text x="12.2297%" y="223.50"></text></g><g><title>nn`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.03%)</title><rect x="12.3330%" y="197" width="0.0256%" height="15" fill="rgb(213,25,53)" fg:x="2409" fg:w="5"/><text x="12.5830%" y="207.50"></text></g><g><title>nn`alloc::raw_vec::finish_grow (5 samples, 0.03%)</title><rect x="12.3330%" y="181" width="0.0256%" height="15" fill="rgb(252,105,26)" fg:x="2409" fg:w="5"/><text x="12.5830%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (4 samples, 0.02%)</title><rect x="12.3381%" y="165" width="0.0205%" height="15" fill="rgb(220,39,43)" fg:x="2410" fg:w="4"/><text x="12.5881%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (4 samples, 0.02%)</title><rect x="12.3381%" y="149" width="0.0205%" height="15" fill="rgb(229,68,48)" fg:x="2410" fg:w="4"/><text x="12.5881%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.02%)</title><rect x="12.3432%" y="133" width="0.0154%" height="15" fill="rgb(252,8,32)" fg:x="2411" fg:w="3"/><text x="12.5932%" y="143.50"></text></g><g><title>nn`&lt;tensor_rs::unique_id::UniqueId as core::hash::Hash&gt;::hash (4 samples, 0.02%)</title><rect x="12.3586%" y="213" width="0.0205%" height="15" fill="rgb(223,20,43)" fg:x="2414" fg:w="4"/><text x="12.6086%" y="223.50"></text></g><g><title>nn`DYLD-STUB$$free (4 samples, 0.02%)</title><rect x="12.3791%" y="213" width="0.0205%" height="15" fill="rgb(229,81,49)" fg:x="2418" fg:w="4"/><text x="12.6291%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (3 samples, 0.02%)</title><rect x="12.4046%" y="181" width="0.0154%" height="15" fill="rgb(236,28,36)" fg:x="2423" fg:w="3"/><text x="12.6546%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (2 samples, 0.01%)</title><rect x="12.4098%" y="165" width="0.0102%" height="15" fill="rgb(249,185,26)" fg:x="2424" fg:w="2"/><text x="12.6598%" y="175.50"></text></g><g><title>nn`alloc::vec::from_elem (24 samples, 0.12%)</title><rect x="12.4046%" y="213" width="0.1229%" height="15" fill="rgb(249,174,33)" fg:x="2423" fg:w="24"/><text x="12.6546%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (24 samples, 0.12%)</title><rect x="12.4046%" y="197" width="0.1229%" height="15" fill="rgb(233,201,37)" fg:x="2423" fg:w="24"/><text x="12.6546%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (21 samples, 0.11%)</title><rect x="12.4200%" y="181" width="0.1075%" height="15" fill="rgb(221,78,26)" fg:x="2426" fg:w="21"/><text x="12.6700%" y="191.50"></text></g><g><title>libsystem_platform.dylib`__bzero (21 samples, 0.11%)</title><rect x="12.4200%" y="165" width="0.1075%" height="15" fill="rgb(250,127,30)" fg:x="2426" fg:w="21"/><text x="12.6700%" y="175.50"></text></g><g><title>nn`core::hash::BuildHasher::hash_one (3 samples, 0.02%)</title><rect x="12.5275%" y="213" width="0.0154%" height="15" fill="rgb(230,49,44)" fg:x="2447" fg:w="3"/><text x="12.7775%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (4 samples, 0.02%)</title><rect x="12.5480%" y="165" width="0.0205%" height="15" fill="rgb(229,67,23)" fg:x="2451" fg:w="4"/><text x="12.7980%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.01%)</title><rect x="12.5582%" y="149" width="0.0102%" height="15" fill="rgb(249,83,47)" fg:x="2453" fg:w="2"/><text x="12.8082%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (2 samples, 0.01%)</title><rect x="12.5941%" y="149" width="0.0102%" height="15" fill="rgb(215,43,3)" fg:x="2460" fg:w="2"/><text x="12.8441%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_small (10 samples, 0.05%)</title><rect x="12.5685%" y="165" width="0.0512%" height="15" fill="rgb(238,154,13)" fg:x="2455" fg:w="10"/><text x="12.8185%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (3 samples, 0.02%)</title><rect x="12.6043%" y="149" width="0.0154%" height="15" fill="rgb(219,56,2)" fg:x="2462" fg:w="3"/><text x="12.8543%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (2 samples, 0.01%)</title><rect x="12.6197%" y="165" width="0.0102%" height="15" fill="rgb(233,0,4)" fg:x="2465" fg:w="2"/><text x="12.8697%" y="175.50"></text></g><g><title>nn`core::ptr::drop_in_place&lt;(tensor_rs::TensorBase&lt;[usize (19 samples, 0.10%)</title><rect x="12.5429%" y="213" width="0.0973%" height="15" fill="rgb(235,30,7)" fg:x="2450" fg:w="19"/><text x="12.7929%" y="223.50"></text></g><g><title> 2]&gt;,tensor_rs::TensorBase&lt;[usize (19 samples, 0.10%)</title><rect x="12.5429%" y="197" width="0.0973%" height="15" fill="rgb(250,79,13)" fg:x="2450" fg:w="19"/><text x="12.7929%" y="207.50"></text></g><g><title> 2]&gt;)&gt; (19 samples, 0.10%)</title><rect x="12.5429%" y="181" width="0.0973%" height="15" fill="rgb(211,146,34)" fg:x="2450" fg:w="19"/><text x="12.7929%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (2 samples, 0.01%)</title><rect x="12.6299%" y="165" width="0.0102%" height="15" fill="rgb(228,22,38)" fg:x="2467" fg:w="2"/><text x="12.8799%" y="175.50"></text></g><g><title> 0]&gt;&gt; (4 samples, 0.02%)</title><rect x="12.6401%" y="197" width="0.0205%" height="15" fill="rgb(235,168,5)" fg:x="2469" fg:w="4"/><text x="12.8901%" y="207.50"></text></g><g><title>nn`core::ptr::drop_in_place&lt;tensor_rs::TensorBase&lt;[usize (6 samples, 0.03%)</title><rect x="12.6401%" y="213" width="0.0307%" height="15" fill="rgb(221,155,16)" fg:x="2469" fg:w="6"/><text x="12.8901%" y="223.50"></text></g><g><title> 2]&gt;&gt; (2 samples, 0.01%)</title><rect x="12.6606%" y="197" width="0.0102%" height="15" fill="rgb(215,215,53)" fg:x="2473" fg:w="2"/><text x="12.9106%" y="207.50"></text></g><g><title>nn`matrixmultiply::gemm::sgemm (2 samples, 0.01%)</title><rect x="12.6709%" y="213" width="0.0102%" height="15" fill="rgb(223,4,10)" fg:x="2475" fg:w="2"/><text x="12.9209%" y="223.50"></text></g><g><title>nn`std::sys::unix::time::inner::_&lt;impl std::sys::unix::time::Timespec&gt;::now (7 samples, 0.04%)</title><rect x="12.6811%" y="213" width="0.0358%" height="15" fill="rgb(234,103,6)" fg:x="2477" fg:w="7"/><text x="12.9311%" y="223.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (7 samples, 0.04%)</title><rect x="12.6811%" y="197" width="0.0358%" height="15" fill="rgb(227,97,0)" fg:x="2477" fg:w="7"/><text x="12.9311%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (6 samples, 0.03%)</title><rect x="12.6862%" y="181" width="0.0307%" height="15" fill="rgb(234,150,53)" fg:x="2478" fg:w="6"/><text x="12.9362%" y="191.50"></text></g><g><title>nn`tensor_rs::impl_binary_ops::_&lt;impl core::ops::arith::AddAssign&lt;&amp;tensor_rs::TensorBase&lt;S,B&gt;&gt; for tensor_rs::TensorBase&lt;S,A&gt;&gt;::add_assign (596 samples, 3.05%)</title><rect x="12.7221%" y="213" width="3.0512%" height="15" fill="rgb(228,201,54)" fg:x="2485" fg:w="596"/><text x="12.9721%" y="223.50">nn`..</text></g><g><title>nn`tensor_rs::impl_binary_ops::_&lt;impl core::ops::arith::AddAssign&lt;tensor_rs::TensorBase&lt;S,B&gt;&gt; for tensor_rs::TensorBase&lt;S,A&gt;&gt;::add_assign (6 samples, 0.03%)</title><rect x="15.7733%" y="213" width="0.0307%" height="15" fill="rgb(222,22,37)" fg:x="3081" fg:w="6"/><text x="16.0233%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (5 samples, 0.03%)</title><rect x="15.7784%" y="197" width="0.0256%" height="15" fill="rgb(237,53,32)" fg:x="3082" fg:w="5"/><text x="16.0284%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.01%)</title><rect x="16.0651%" y="197" width="0.0102%" height="15" fill="rgb(233,25,53)" fg:x="3138" fg:w="2"/><text x="16.3151%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (2 samples, 0.01%)</title><rect x="16.0754%" y="197" width="0.0102%" height="15" fill="rgb(210,40,34)" fg:x="3140" fg:w="2"/><text x="16.3254%" y="207.50"></text></g><g><title>nn`tensor_rs::impl_binary_ops::_&lt;impl core::ops::arith::SubAssign&lt;tensor_rs::TensorBase&lt;S,B&gt;&gt; for tensor_rs::TensorBase&lt;S,A&gt;&gt;::sub_assign (58 samples, 0.30%)</title><rect x="15.8040%" y="213" width="0.2969%" height="15" fill="rgb(241,220,44)" fg:x="3087" fg:w="58"/><text x="16.0540%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (2 samples, 0.01%)</title><rect x="16.0907%" y="197" width="0.0102%" height="15" fill="rgb(235,28,35)" fg:x="3143" fg:w="2"/><text x="16.3407%" y="207.50"></text></g><g><title>nn`tensor_rs::impl_methods::_&lt;impl tensor_rs::TensorBase&lt;S,A&gt;&gt;::put_backward_ops (2 samples, 0.01%)</title><rect x="16.1010%" y="213" width="0.0102%" height="15" fill="rgb(210,56,17)" fg:x="3145" fg:w="2"/><text x="16.3510%" y="223.50"></text></g><g><title>nn`tensor_rs::impl_methods::_&lt;impl tensor_rs::TensorBase&lt;S,tensor_rs::OwnedData&lt;Dtype&gt;&gt;&gt;::from_vec (2 samples, 0.01%)</title><rect x="16.1112%" y="213" width="0.0102%" height="15" fill="rgb(224,130,29)" fg:x="3147" fg:w="2"/><text x="16.3612%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.01%)</title><rect x="16.1266%" y="181" width="0.0102%" height="15" fill="rgb(235,212,8)" fg:x="3150" fg:w="2"/><text x="16.3766%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (5 samples, 0.03%)</title><rect x="16.1368%" y="181" width="0.0256%" height="15" fill="rgb(223,33,50)" fg:x="3152" fg:w="5"/><text x="16.3868%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.01%)</title><rect x="16.1624%" y="181" width="0.0102%" height="15" fill="rgb(219,149,13)" fg:x="3157" fg:w="2"/><text x="16.4124%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (6 samples, 0.03%)</title><rect x="16.1931%" y="165" width="0.0307%" height="15" fill="rgb(250,156,29)" fg:x="3163" fg:w="6"/><text x="16.4431%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (28 samples, 0.14%)</title><rect x="16.2238%" y="165" width="0.1433%" height="15" fill="rgb(216,193,19)" fg:x="3169" fg:w="28"/><text x="16.4738%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (6 samples, 0.03%)</title><rect x="16.3365%" y="149" width="0.0307%" height="15" fill="rgb(216,135,14)" fg:x="3191" fg:w="6"/><text x="16.5865%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (8 samples, 0.04%)</title><rect x="16.3672%" y="165" width="0.0410%" height="15" fill="rgb(241,47,5)" fg:x="3197" fg:w="8"/><text x="16.6172%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (8 samples, 0.04%)</title><rect x="16.4081%" y="165" width="0.0410%" height="15" fill="rgb(233,42,35)" fg:x="3205" fg:w="8"/><text x="16.6581%" y="175.50"></text></g><g><title>nn`DYLD-STUB$$free (9 samples, 0.05%)</title><rect x="16.4491%" y="165" width="0.0461%" height="15" fill="rgb(231,13,6)" fg:x="3213" fg:w="9"/><text x="16.6991%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.02%)</title><rect x="16.5924%" y="149" width="0.0205%" height="15" fill="rgb(207,181,40)" fg:x="3241" fg:w="4"/><text x="16.8424%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (7 samples, 0.04%)</title><rect x="16.6129%" y="149" width="0.0358%" height="15" fill="rgb(254,173,49)" fg:x="3245" fg:w="7"/><text x="16.8629%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (30 samples, 0.15%)</title><rect x="16.8382%" y="133" width="0.1536%" height="15" fill="rgb(221,1,38)" fg:x="3289" fg:w="30"/><text x="17.0882%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (71 samples, 0.36%)</title><rect x="16.6487%" y="149" width="0.3635%" height="15" fill="rgb(206,124,46)" fg:x="3252" fg:w="71"/><text x="16.8987%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (4 samples, 0.02%)</title><rect x="16.9918%" y="133" width="0.0205%" height="15" fill="rgb(249,21,11)" fg:x="3319" fg:w="4"/><text x="17.2418%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (2 samples, 0.01%)</title><rect x="17.0020%" y="117" width="0.0102%" height="15" fill="rgb(222,201,40)" fg:x="3321" fg:w="2"/><text x="17.2520%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (5 samples, 0.03%)</title><rect x="17.0122%" y="149" width="0.0256%" height="15" fill="rgb(235,61,29)" fg:x="3323" fg:w="5"/><text x="17.2622%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_small (6 samples, 0.03%)</title><rect x="17.0378%" y="149" width="0.0307%" height="15" fill="rgb(219,207,3)" fg:x="3328" fg:w="6"/><text x="17.2878%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (2 samples, 0.01%)</title><rect x="17.0583%" y="133" width="0.0102%" height="15" fill="rgb(222,56,46)" fg:x="3332" fg:w="2"/><text x="17.3083%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (7 samples, 0.04%)</title><rect x="17.0686%" y="149" width="0.0358%" height="15" fill="rgb(239,76,54)" fg:x="3334" fg:w="7"/><text x="17.3186%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (9 samples, 0.05%)</title><rect x="17.1044%" y="149" width="0.0461%" height="15" fill="rgb(231,124,27)" fg:x="3341" fg:w="9"/><text x="17.3544%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (4 samples, 0.02%)</title><rect x="17.1505%" y="149" width="0.0205%" height="15" fill="rgb(249,195,6)" fg:x="3350" fg:w="4"/><text x="17.4005%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset_pattern16 (9 samples, 0.05%)</title><rect x="17.1863%" y="149" width="0.0461%" height="15" fill="rgb(237,174,47)" fg:x="3357" fg:w="9"/><text x="17.4363%" y="159.50"></text></g><g><title>nn`&lt;T as core::any::Any&gt;::type_id (2 samples, 0.01%)</title><rect x="17.2324%" y="149" width="0.0102%" height="15" fill="rgb(206,201,31)" fg:x="3366" fg:w="2"/><text x="17.4824%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.01%)</title><rect x="17.2477%" y="133" width="0.0102%" height="15" fill="rgb(231,57,52)" fg:x="3369" fg:w="2"/><text x="17.4977%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.01%)</title><rect x="17.2580%" y="117" width="0.0102%" height="15" fill="rgb(248,177,22)" fg:x="3371" fg:w="2"/><text x="17.5080%" y="127.50"></text></g><g><title>nn`&lt;tensor_rs::TensorBase&lt;S,tensor_rs::OwnedData&lt;Dtype&gt;&gt; as tensor_rs::impl_constructors::TensorConstructors&lt;Dtype&gt;&gt;::ones (5 samples, 0.03%)</title><rect x="17.2477%" y="149" width="0.0256%" height="15" fill="rgb(215,211,37)" fg:x="3369" fg:w="5"/><text x="17.4977%" y="159.50"></text></g><g><title>nn`tensor_rs::impl_methods::_&lt;impl tensor_rs::TensorBase&lt;S,tensor_rs::OwnedData&lt;Dtype&gt;&gt;&gt;::from_vec (3 samples, 0.02%)</title><rect x="17.2580%" y="133" width="0.0154%" height="15" fill="rgb(241,128,51)" fg:x="3371" fg:w="3"/><text x="17.5080%" y="143.50"></text></g><g><title>nn`&lt;tensor_rs::TensorBase&lt;S,tensor_rs::OwnedData&lt;Dtype&gt;&gt; as tensor_rs::impl_constructors::TensorConstructors&lt;Dtype&gt;&gt;::zeros (6 samples, 0.03%)</title><rect x="17.2733%" y="149" width="0.0307%" height="15" fill="rgb(227,165,31)" fg:x="3374" fg:w="6"/><text x="17.5233%" y="159.50"></text></g><g><title>nn`tensor_rs::impl_methods::_&lt;impl tensor_rs::TensorBase&lt;S,tensor_rs::OwnedData&lt;Dtype&gt;&gt;&gt;::from_vec (4 samples, 0.02%)</title><rect x="17.2836%" y="133" width="0.0205%" height="15" fill="rgb(228,167,24)" fg:x="3376" fg:w="4"/><text x="17.5336%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.01%)</title><rect x="17.2938%" y="117" width="0.0102%" height="15" fill="rgb(228,143,12)" fg:x="3378" fg:w="2"/><text x="17.5438%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.01%)</title><rect x="17.2938%" y="101" width="0.0102%" height="15" fill="rgb(249,149,8)" fg:x="3378" fg:w="2"/><text x="17.5438%" y="111.50"></text></g><g><title>nn`DYLD-STUB$$free (5 samples, 0.03%)</title><rect x="17.3040%" y="149" width="0.0256%" height="15" fill="rgb(243,35,44)" fg:x="3380" fg:w="5"/><text x="17.5540%" y="159.50"></text></g><g><title>nn`DYLD-STUB$$malloc (2 samples, 0.01%)</title><rect x="17.3296%" y="149" width="0.0102%" height="15" fill="rgb(246,89,9)" fg:x="3385" fg:w="2"/><text x="17.5796%" y="159.50"></text></g><g><title>nn`DYLD-STUB$$memset_pattern16 (5 samples, 0.03%)</title><rect x="17.3399%" y="149" width="0.0256%" height="15" fill="rgb(233,213,13)" fg:x="3387" fg:w="5"/><text x="17.5899%" y="159.50"></text></g><g><title>nn`alloc::vec::from_elem (4 samples, 0.02%)</title><rect x="17.3706%" y="149" width="0.0205%" height="15" fill="rgb(233,141,41)" fg:x="3393" fg:w="4"/><text x="17.6206%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.01%)</title><rect x="17.3808%" y="133" width="0.0102%" height="15" fill="rgb(239,167,4)" fg:x="3395" fg:w="2"/><text x="17.6308%" y="143.50"></text></g><g><title>nn`core::hash::BuildHasher::hash_one (6 samples, 0.03%)</title><rect x="17.3911%" y="149" width="0.0307%" height="15" fill="rgb(209,217,16)" fg:x="3397" fg:w="6"/><text x="17.6411%" y="159.50"></text></g><g><title>nn`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (3 samples, 0.02%)</title><rect x="17.4218%" y="149" width="0.0154%" height="15" fill="rgb(219,88,35)" fg:x="3403" fg:w="3"/><text x="17.6718%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.01%)</title><rect x="17.4269%" y="133" width="0.0102%" height="15" fill="rgb(220,193,23)" fg:x="3404" fg:w="2"/><text x="17.6769%" y="143.50"></text></g><g><title>nn`matrixmultiply::gemm::gemm_loop (2 samples, 0.01%)</title><rect x="17.4372%" y="149" width="0.0102%" height="15" fill="rgb(230,90,52)" fg:x="3406" fg:w="2"/><text x="17.6872%" y="159.50"></text></g><g><title>nn`matrixmultiply::gemm::sgemm (12 samples, 0.06%)</title><rect x="17.4474%" y="149" width="0.0614%" height="15" fill="rgb(252,106,19)" fg:x="3408" fg:w="12"/><text x="17.6974%" y="159.50"></text></g><g><title>nn`&lt;tensor_rs::unique_id::UniqueId as core::hash::Hash&gt;::hash (7 samples, 0.04%)</title><rect x="17.5447%" y="133" width="0.0358%" height="15" fill="rgb(206,74,20)" fg:x="3427" fg:w="7"/><text x="17.7947%" y="143.50"></text></g><g><title>nn`tensor_rs::gradient::GradientMap::grad_by_id (25 samples, 0.13%)</title><rect x="17.5088%" y="149" width="0.1280%" height="15" fill="rgb(230,138,44)" fg:x="3420" fg:w="25"/><text x="17.7588%" y="159.50"></text></g><g><title>nn`core::hash::BuildHasher::hash_one (11 samples, 0.06%)</title><rect x="17.5805%" y="133" width="0.0563%" height="15" fill="rgb(235,182,43)" fg:x="3434" fg:w="11"/><text x="17.8305%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.02%)</title><rect x="17.8314%" y="117" width="0.0154%" height="15" fill="rgb(242,16,51)" fg:x="3483" fg:w="3"/><text x="18.0814%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (18 samples, 0.09%)</title><rect x="17.8621%" y="101" width="0.0922%" height="15" fill="rgb(248,9,4)" fg:x="3489" fg:w="18"/><text x="18.1121%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.01%)</title><rect x="17.9440%" y="85" width="0.0102%" height="15" fill="rgb(210,31,22)" fg:x="3505" fg:w="2"/><text x="18.1940%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (39 samples, 0.20%)</title><rect x="17.7750%" y="133" width="0.1997%" height="15" fill="rgb(239,54,39)" fg:x="3472" fg:w="39"/><text x="18.0250%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (25 samples, 0.13%)</title><rect x="17.8467%" y="117" width="0.1280%" height="15" fill="rgb(230,99,41)" fg:x="3486" fg:w="25"/><text x="18.0967%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (4 samples, 0.02%)</title><rect x="17.9542%" y="101" width="0.0205%" height="15" fill="rgb(253,106,12)" fg:x="3507" fg:w="4"/><text x="18.2042%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (8 samples, 0.04%)</title><rect x="17.9747%" y="133" width="0.0410%" height="15" fill="rgb(213,46,41)" fg:x="3511" fg:w="8"/><text x="18.2247%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset_pattern16 (3 samples, 0.02%)</title><rect x="18.0361%" y="133" width="0.0154%" height="15" fill="rgb(215,133,35)" fg:x="3523" fg:w="3"/><text x="18.2861%" y="143.50"></text></g><g><title>nn`&lt;tensor_rs::unique_id::UniqueId as core::hash::Hash&gt;::hash (16 samples, 0.08%)</title><rect x="18.0515%" y="133" width="0.0819%" height="15" fill="rgb(213,28,5)" fg:x="3526" fg:w="16"/><text x="18.3015%" y="143.50"></text></g><g><title>nn`DYLD-STUB$$memset_pattern16 (2 samples, 0.01%)</title><rect x="18.1385%" y="133" width="0.0102%" height="15" fill="rgb(215,77,49)" fg:x="3543" fg:w="2"/><text x="18.3885%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (5 samples, 0.03%)</title><rect x="18.2204%" y="101" width="0.0256%" height="15" fill="rgb(248,100,22)" fg:x="3559" fg:w="5"/><text x="18.4704%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (15 samples, 0.08%)</title><rect x="18.2614%" y="85" width="0.0768%" height="15" fill="rgb(208,67,9)" fg:x="3567" fg:w="15"/><text x="18.5114%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.01%)</title><rect x="18.3280%" y="69" width="0.0102%" height="15" fill="rgb(219,133,21)" fg:x="3580" fg:w="2"/><text x="18.5780%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (3 samples, 0.02%)</title><rect x="18.3382%" y="85" width="0.0154%" height="15" fill="rgb(246,46,29)" fg:x="3582" fg:w="3"/><text x="18.5882%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (25 samples, 0.13%)</title><rect x="18.2460%" y="101" width="0.1280%" height="15" fill="rgb(246,185,52)" fg:x="3564" fg:w="25"/><text x="18.4960%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (4 samples, 0.02%)</title><rect x="18.3536%" y="85" width="0.0205%" height="15" fill="rgb(252,136,11)" fg:x="3585" fg:w="4"/><text x="18.6036%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`medium_malloc_from_free_list (2 samples, 0.01%)</title><rect x="18.3843%" y="85" width="0.0102%" height="15" fill="rgb(219,138,53)" fg:x="3591" fg:w="2"/><text x="18.6343%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`medium_malloc_should_clear (6 samples, 0.03%)</title><rect x="18.3945%" y="85" width="0.0307%" height="15" fill="rgb(211,51,23)" fg:x="3593" fg:w="6"/><text x="18.6445%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`medium_malloc_from_free_list (6 samples, 0.03%)</title><rect x="18.3945%" y="69" width="0.0307%" height="15" fill="rgb(247,221,28)" fg:x="3593" fg:w="6"/><text x="18.6445%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`medium_free_list_remove_ptr_no_clear (2 samples, 0.01%)</title><rect x="18.4150%" y="53" width="0.0102%" height="15" fill="rgb(251,222,45)" fg:x="3597" fg:w="2"/><text x="18.6650%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (2 samples, 0.01%)</title><rect x="18.4508%" y="53" width="0.0102%" height="15" fill="rgb(217,162,53)" fg:x="3604" fg:w="2"/><text x="18.7008%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (9 samples, 0.05%)</title><rect x="18.4252%" y="85" width="0.0461%" height="15" fill="rgb(229,93,14)" fg:x="3599" fg:w="9"/><text x="18.6752%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (8 samples, 0.04%)</title><rect x="18.4303%" y="69" width="0.0410%" height="15" fill="rgb(209,67,49)" fg:x="3600" fg:w="8"/><text x="18.6803%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (2 samples, 0.01%)</title><rect x="18.4611%" y="53" width="0.0102%" height="15" fill="rgb(213,87,29)" fg:x="3606" fg:w="2"/><text x="18.7111%" y="63.50"></text></g><g><title>libsystem_platform.dylib`__bzero (108 samples, 0.55%)</title><rect x="18.4713%" y="85" width="0.5529%" height="15" fill="rgb(205,151,52)" fg:x="3608" fg:w="108"/><text x="18.7213%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (180 samples, 0.92%)</title><rect x="18.1744%" y="117" width="0.9215%" height="15" fill="rgb(253,215,39)" fg:x="3550" fg:w="180"/><text x="18.4244%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (141 samples, 0.72%)</title><rect x="18.3740%" y="101" width="0.7219%" height="15" fill="rgb(221,220,41)" fg:x="3589" fg:w="141"/><text x="18.6240%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (14 samples, 0.07%)</title><rect x="19.0242%" y="85" width="0.0717%" height="15" fill="rgb(218,133,21)" fg:x="3716" fg:w="14"/><text x="19.2742%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_calloc (2 samples, 0.01%)</title><rect x="19.0959%" y="117" width="0.0102%" height="15" fill="rgb(221,193,43)" fg:x="3730" fg:w="2"/><text x="19.3459%" y="127.50"></text></g><g><title>nn`alloc::vec::from_elem (186 samples, 0.95%)</title><rect x="18.1641%" y="133" width="0.9522%" height="15" fill="rgb(240,128,52)" fg:x="3548" fg:w="186"/><text x="18.4141%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (2 samples, 0.01%)</title><rect x="19.1061%" y="117" width="0.0102%" height="15" fill="rgb(253,114,12)" fg:x="3732" fg:w="2"/><text x="19.3561%" y="127.50"></text></g><g><title>nn`core::hash::BuildHasher::hash_one (12 samples, 0.06%)</title><rect x="19.1164%" y="133" width="0.0614%" height="15" fill="rgb(215,223,47)" fg:x="3734" fg:w="12"/><text x="19.3664%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (5 samples, 0.03%)</title><rect x="19.3007%" y="117" width="0.0256%" height="15" fill="rgb(248,225,23)" fg:x="3770" fg:w="5"/><text x="19.5507%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.02%)</title><rect x="19.3109%" y="101" width="0.0154%" height="15" fill="rgb(250,108,0)" fg:x="3772" fg:w="3"/><text x="19.5609%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.01%)</title><rect x="19.3160%" y="85" width="0.0102%" height="15" fill="rgb(228,208,7)" fg:x="3773" fg:w="2"/><text x="19.5660%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free (7 samples, 0.04%)</title><rect x="19.3314%" y="117" width="0.0358%" height="15" fill="rgb(244,45,10)" fg:x="3776" fg:w="7"/><text x="19.5814%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (3 samples, 0.02%)</title><rect x="19.3672%" y="117" width="0.0154%" height="15" fill="rgb(207,125,25)" fg:x="3783" fg:w="3"/><text x="19.6172%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (3 samples, 0.02%)</title><rect x="19.3672%" y="101" width="0.0154%" height="15" fill="rgb(210,195,18)" fg:x="3783" fg:w="3"/><text x="19.6172%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (2 samples, 0.01%)</title><rect x="19.3723%" y="85" width="0.0102%" height="15" fill="rgb(249,80,12)" fg:x="3784" fg:w="2"/><text x="19.6223%" y="95.50"></text></g><g><title>nn`&lt;tensor_rs::unique_id::UniqueId as core::hash::Hash&gt;::hash (22 samples, 0.11%)</title><rect x="19.3928%" y="117" width="0.1126%" height="15" fill="rgb(221,65,9)" fg:x="3788" fg:w="22"/><text x="19.6428%" y="127.50"></text></g><g><title>nn`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (90 samples, 0.46%)</title><rect x="19.1778%" y="133" width="0.4608%" height="15" fill="rgb(235,49,36)" fg:x="3746" fg:w="90"/><text x="19.4278%" y="143.50"></text></g><g><title>nn`core::hash::BuildHasher::hash_one (26 samples, 0.13%)</title><rect x="19.5055%" y="117" width="0.1331%" height="15" fill="rgb(225,32,20)" fg:x="3810" fg:w="26"/><text x="19.7555%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (31 samples, 0.16%)</title><rect x="19.6795%" y="117" width="0.1587%" height="15" fill="rgb(215,141,46)" fg:x="3844" fg:w="31"/><text x="19.9295%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (22 samples, 0.11%)</title><rect x="19.7256%" y="101" width="0.1126%" height="15" fill="rgb(250,160,47)" fg:x="3853" fg:w="22"/><text x="19.9756%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (17 samples, 0.09%)</title><rect x="19.7512%" y="85" width="0.0870%" height="15" fill="rgb(216,222,40)" fg:x="3858" fg:w="17"/><text x="20.0012%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (5 samples, 0.03%)</title><rect x="19.8126%" y="69" width="0.0256%" height="15" fill="rgb(234,217,39)" fg:x="3870" fg:w="5"/><text x="20.0626%" y="79.50"></text></g><g><title>nn`tensor_rs::impl_methods::_&lt;impl tensor_rs::TensorBase&lt;S,tensor_rs::OwnedData&lt;Dtype&gt;&gt;&gt;::from_vec (42 samples, 0.22%)</title><rect x="19.6386%" y="133" width="0.2150%" height="15" fill="rgb(207,178,40)" fg:x="3836" fg:w="42"/><text x="19.8886%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (3 samples, 0.02%)</title><rect x="19.8382%" y="117" width="0.0154%" height="15" fill="rgb(221,136,13)" fg:x="3875" fg:w="3"/><text x="20.0882%" y="127.50"></text></g><g><title>nn`tensor_rs::gradient::GradientMap::mut_grad_by_id (434 samples, 2.22%)</title><rect x="17.6368%" y="149" width="2.2219%" height="15" fill="rgb(249,199,10)" fg:x="3445" fg:w="434"/><text x="17.8868%" y="159.50">n..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (9 samples, 0.05%)</title><rect x="22.1727%" y="101" width="0.0461%" height="15" fill="rgb(249,222,13)" fg:x="4331" fg:w="9"/><text x="22.4227%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (4 samples, 0.02%)</title><rect x="22.1983%" y="85" width="0.0205%" height="15" fill="rgb(244,185,38)" fg:x="4336" fg:w="4"/><text x="22.4483%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (12 samples, 0.06%)</title><rect x="22.1676%" y="117" width="0.0614%" height="15" fill="rgb(236,202,9)" fg:x="4330" fg:w="12"/><text x="22.4176%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.01%)</title><rect x="22.2188%" y="101" width="0.0102%" height="15" fill="rgb(250,229,37)" fg:x="4340" fg:w="2"/><text x="22.4688%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (19 samples, 0.10%)</title><rect x="22.1625%" y="133" width="0.0973%" height="15" fill="rgb(206,174,23)" fg:x="4329" fg:w="19"/><text x="22.4125%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (6 samples, 0.03%)</title><rect x="22.2290%" y="117" width="0.0307%" height="15" fill="rgb(211,33,43)" fg:x="4342" fg:w="6"/><text x="22.4790%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (5 samples, 0.03%)</title><rect x="22.2342%" y="101" width="0.0256%" height="15" fill="rgb(245,58,50)" fg:x="4343" fg:w="5"/><text x="22.4842%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (4 samples, 0.02%)</title><rect x="22.2393%" y="85" width="0.0205%" height="15" fill="rgb(244,68,36)" fg:x="4344" fg:w="4"/><text x="22.4893%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (2 samples, 0.01%)</title><rect x="22.2495%" y="69" width="0.0102%" height="15" fill="rgb(232,229,15)" fg:x="4346" fg:w="2"/><text x="22.4995%" y="79.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset_pattern16 (3 samples, 0.02%)</title><rect x="22.2649%" y="133" width="0.0154%" height="15" fill="rgb(254,30,23)" fg:x="4349" fg:w="3"/><text x="22.5149%" y="143.50"></text></g><g><title>nn`tensor_rs::impl_binary_ops::_&lt;impl core::ops::arith::Add&lt;&amp;tensor_rs::TensorBase&lt;S,A&gt;&gt; for tensor_rs::TensorBase&lt;S,B&gt;&gt;::add (491 samples, 2.51%)</title><rect x="19.8587%" y="149" width="2.5137%" height="15" fill="rgb(235,160,14)" fg:x="3879" fg:w="491"/><text x="20.1087%" y="159.50">nn..</text></g><g><title>nn`tensor_rs::impl_methods::_&lt;impl tensor_rs::TensorBase&lt;S,tensor_rs::OwnedData&lt;Dtype&gt;&gt;&gt;::from_vec (17 samples, 0.09%)</title><rect x="22.2854%" y="133" width="0.0870%" height="15" fill="rgb(212,155,44)" fg:x="4353" fg:w="17"/><text x="22.5354%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (12 samples, 0.06%)</title><rect x="22.3110%" y="117" width="0.0614%" height="15" fill="rgb(226,2,50)" fg:x="4358" fg:w="12"/><text x="22.5610%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (7 samples, 0.04%)</title><rect x="22.3366%" y="101" width="0.0358%" height="15" fill="rgb(234,177,6)" fg:x="4363" fg:w="7"/><text x="22.5866%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (6 samples, 0.03%)</title><rect x="22.3417%" y="85" width="0.0307%" height="15" fill="rgb(217,24,9)" fg:x="4364" fg:w="6"/><text x="22.5917%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (3 samples, 0.02%)</title><rect x="22.3570%" y="69" width="0.0154%" height="15" fill="rgb(220,13,46)" fg:x="4367" fg:w="3"/><text x="22.6070%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (11 samples, 0.06%)</title><rect x="80.3922%" y="117" width="0.0563%" height="15" fill="rgb(239,221,27)" fg:x="15703" fg:w="11"/><text x="80.6422%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (8 samples, 0.04%)</title><rect x="80.4075%" y="101" width="0.0410%" height="15" fill="rgb(222,198,25)" fg:x="15706" fg:w="8"/><text x="80.6575%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (3 samples, 0.02%)</title><rect x="80.4331%" y="85" width="0.0154%" height="15" fill="rgb(211,99,13)" fg:x="15711" fg:w="3"/><text x="80.6831%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`medium_free_list_add_ptr (2 samples, 0.01%)</title><rect x="80.4638%" y="69" width="0.0102%" height="15" fill="rgb(232,111,31)" fg:x="15717" fg:w="2"/><text x="80.7138%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`medium_malloc_should_clear (7 samples, 0.04%)</title><rect x="80.4485%" y="101" width="0.0358%" height="15" fill="rgb(245,82,37)" fg:x="15714" fg:w="7"/><text x="80.6985%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`medium_malloc_from_free_list (5 samples, 0.03%)</title><rect x="80.4587%" y="85" width="0.0256%" height="15" fill="rgb(227,149,46)" fg:x="15716" fg:w="5"/><text x="80.7087%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (2 samples, 0.01%)</title><rect x="80.4843%" y="69" width="0.0102%" height="15" fill="rgb(218,36,50)" fg:x="15721" fg:w="2"/><text x="80.7343%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (27 samples, 0.14%)</title><rect x="80.3666%" y="133" width="0.1382%" height="15" fill="rgb(226,80,48)" fg:x="15698" fg:w="27"/><text x="80.6166%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (11 samples, 0.06%)</title><rect x="80.4485%" y="117" width="0.0563%" height="15" fill="rgb(238,224,15)" fg:x="15714" fg:w="11"/><text x="80.6985%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (4 samples, 0.02%)</title><rect x="80.4843%" y="101" width="0.0205%" height="15" fill="rgb(241,136,10)" fg:x="15721" fg:w="4"/><text x="80.7343%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (4 samples, 0.02%)</title><rect x="80.4843%" y="85" width="0.0205%" height="15" fill="rgb(208,32,45)" fg:x="15721" fg:w="4"/><text x="80.7343%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (3 samples, 0.02%)</title><rect x="80.5816%" y="117" width="0.0154%" height="15" fill="rgb(207,135,9)" fg:x="15740" fg:w="3"/><text x="80.8316%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (2 samples, 0.01%)</title><rect x="80.5969%" y="117" width="0.0102%" height="15" fill="rgb(206,86,44)" fg:x="15743" fg:w="2"/><text x="80.8469%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free (33 samples, 0.17%)</title><rect x="80.5048%" y="133" width="0.1689%" height="15" fill="rgb(245,177,15)" fg:x="15725" fg:w="33"/><text x="80.7548%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_size (13 samples, 0.07%)</title><rect x="80.6072%" y="117" width="0.0666%" height="15" fill="rgb(206,64,50)" fg:x="15745" fg:w="13"/><text x="80.8572%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (7 samples, 0.04%)</title><rect x="80.6737%" y="133" width="0.0358%" height="15" fill="rgb(234,36,40)" fg:x="15758" fg:w="7"/><text x="80.9237%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (2 samples, 0.01%)</title><rect x="80.7147%" y="133" width="0.0102%" height="15" fill="rgb(213,64,8)" fg:x="15766" fg:w="2"/><text x="80.9647%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (3 samples, 0.02%)</title><rect x="80.7249%" y="133" width="0.0154%" height="15" fill="rgb(210,75,36)" fg:x="15768" fg:w="3"/><text x="80.9749%" y="143.50"></text></g><g><title>nn`DYLD-STUB$$memset_pattern16 (2 samples, 0.01%)</title><rect x="80.7505%" y="133" width="0.0102%" height="15" fill="rgb(229,88,21)" fg:x="15773" fg:w="2"/><text x="81.0005%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.01%)</title><rect x="80.8120%" y="101" width="0.0102%" height="15" fill="rgb(252,204,47)" fg:x="15785" fg:w="2"/><text x="81.0620%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (6 samples, 0.03%)</title><rect x="80.8376%" y="85" width="0.0307%" height="15" fill="rgb(208,77,27)" fg:x="15790" fg:w="6"/><text x="81.0876%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (4 samples, 0.02%)</title><rect x="80.8478%" y="69" width="0.0205%" height="15" fill="rgb(221,76,26)" fg:x="15792" fg:w="4"/><text x="81.0978%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (19 samples, 0.10%)</title><rect x="80.7761%" y="117" width="0.0973%" height="15" fill="rgb(225,139,18)" fg:x="15778" fg:w="19"/><text x="81.0261%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (10 samples, 0.05%)</title><rect x="80.8222%" y="101" width="0.0512%" height="15" fill="rgb(230,137,11)" fg:x="15787" fg:w="10"/><text x="81.0722%" y="111.50"></text></g><g><title>nn`tensor_rs::impl_methods::_&lt;impl tensor_rs::TensorBase&lt;S,tensor_rs::OwnedData&lt;Dtype&gt;&gt;&gt;::from_vec (22 samples, 0.11%)</title><rect x="80.7659%" y="133" width="0.1126%" height="15" fill="rgb(212,28,1)" fg:x="15776" fg:w="22"/><text x="81.0159%" y="143.50"></text></g><g><title>nn`tensor_rs::impl_binary_ops::_&lt;impl core::ops::arith::Add&lt;tensor_rs::TensorBase&lt;S,A&gt;&gt; for tensor_rs::TensorBase&lt;S,B&gt;&gt;::add (11,429 samples, 58.51%)</title><rect x="22.3724%" y="149" width="58.5112%" height="15" fill="rgb(248,164,17)" fg:x="4370" fg:w="11429"/><text x="22.6224%" y="159.50">nn`tensor_rs::impl_binary_ops::_&lt;impl core::ops::arith::Add&lt;tensor_rs::TensorBase&lt;S,A&gt;&gt; for tenso..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (5 samples, 0.03%)</title><rect x="80.9195%" y="133" width="0.0256%" height="15" fill="rgb(222,171,42)" fg:x="15806" fg:w="5"/><text x="81.1695%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (5 samples, 0.03%)</title><rect x="80.9195%" y="117" width="0.0256%" height="15" fill="rgb(243,84,45)" fg:x="15806" fg:w="5"/><text x="81.1695%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.02%)</title><rect x="80.9297%" y="101" width="0.0154%" height="15" fill="rgb(252,49,23)" fg:x="15808" fg:w="3"/><text x="81.1797%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.01%)</title><rect x="80.9348%" y="85" width="0.0102%" height="15" fill="rgb(215,19,7)" fg:x="15809" fg:w="2"/><text x="81.1848%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.01%)</title><rect x="80.9502%" y="85" width="0.0102%" height="15" fill="rgb(238,81,41)" fg:x="15812" fg:w="2"/><text x="81.2002%" y="95.50"></text></g><g><title>nn`tensor_rs::impl_binary_ops::_&lt;impl core::ops::arith::Mul&lt;&amp;tensor_rs::TensorBase&lt;S,A&gt;&gt; for &amp;tensor_rs::TensorBase&lt;S,B&gt;&gt;::mul (16 samples, 0.08%)</title><rect x="80.8836%" y="149" width="0.0819%" height="15" fill="rgb(210,199,37)" fg:x="15799" fg:w="16"/><text x="81.1336%" y="159.50"></text></g><g><title>nn`tensor_rs::impl_methods::_&lt;impl tensor_rs::TensorBase&lt;S,tensor_rs::OwnedData&lt;Dtype&gt;&gt;&gt;::from_vec (4 samples, 0.02%)</title><rect x="80.9451%" y="133" width="0.0205%" height="15" fill="rgb(244,192,49)" fg:x="15811" fg:w="4"/><text x="81.1951%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.02%)</title><rect x="80.9502%" y="117" width="0.0154%" height="15" fill="rgb(226,211,11)" fg:x="15812" fg:w="3"/><text x="81.2002%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.02%)</title><rect x="80.9502%" y="101" width="0.0154%" height="15" fill="rgb(236,162,54)" fg:x="15812" fg:w="3"/><text x="81.2002%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.01%)</title><rect x="81.0321%" y="133" width="0.0102%" height="15" fill="rgb(220,229,9)" fg:x="15828" fg:w="2"/><text x="81.2821%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (7 samples, 0.04%)</title><rect x="81.0475%" y="133" width="0.0358%" height="15" fill="rgb(250,87,22)" fg:x="15831" fg:w="7"/><text x="81.2975%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (3 samples, 0.02%)</title><rect x="81.0679%" y="117" width="0.0154%" height="15" fill="rgb(239,43,17)" fg:x="15835" fg:w="3"/><text x="81.3179%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.01%)</title><rect x="81.1140%" y="85" width="0.0102%" height="15" fill="rgb(231,177,25)" fg:x="15844" fg:w="2"/><text x="81.3640%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (8 samples, 0.04%)</title><rect x="81.0935%" y="117" width="0.0410%" height="15" fill="rgb(219,179,1)" fg:x="15840" fg:w="8"/><text x="81.3435%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (5 samples, 0.03%)</title><rect x="81.1089%" y="101" width="0.0256%" height="15" fill="rgb(238,219,53)" fg:x="15843" fg:w="5"/><text x="81.3589%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.01%)</title><rect x="81.1243%" y="85" width="0.0102%" height="15" fill="rgb(232,167,36)" fg:x="15846" fg:w="2"/><text x="81.3743%" y="95.50"></text></g><g><title>nn`tensor_rs::impl_binary_ops::_&lt;impl core::ops::arith::Mul&lt;&amp;tensor_rs::TensorBase&lt;S,A&gt;&gt; for tensor_rs::TensorBase&lt;S,B&gt;&gt;::mul (34 samples, 0.17%)</title><rect x="80.9655%" y="149" width="0.1741%" height="15" fill="rgb(244,19,51)" fg:x="15815" fg:w="34"/><text x="81.2155%" y="159.50"></text></g><g><title>nn`tensor_rs::impl_methods::_&lt;impl tensor_rs::TensorBase&lt;S,tensor_rs::OwnedData&lt;Dtype&gt;&gt;&gt;::from_vec (9 samples, 0.05%)</title><rect x="81.0935%" y="133" width="0.0461%" height="15" fill="rgb(224,6,22)" fg:x="15840" fg:w="9"/><text x="81.3435%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.01%)</title><rect x="81.1652%" y="133" width="0.0102%" height="15" fill="rgb(224,145,5)" fg:x="15854" fg:w="2"/><text x="81.4152%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.02%)</title><rect x="81.1806%" y="117" width="0.0205%" height="15" fill="rgb(234,130,49)" fg:x="15857" fg:w="4"/><text x="81.4306%" y="127.50"></text></g><g><title>nn`tensor_rs::impl_binary_ops::_&lt;impl core::ops::arith::Sub&lt;&amp;tensor_rs::TensorBase&lt;S,A&gt;&gt; for tensor_rs::TensorBase&lt;S,B&gt;&gt;::sub (13 samples, 0.07%)</title><rect x="81.1396%" y="149" width="0.0666%" height="15" fill="rgb(254,6,2)" fg:x="15849" fg:w="13"/><text x="81.3896%" y="159.50"></text></g><g><title>nn`tensor_rs::impl_methods::_&lt;impl tensor_rs::TensorBase&lt;S,tensor_rs::OwnedData&lt;Dtype&gt;&gt;&gt;::from_vec (5 samples, 0.03%)</title><rect x="81.1806%" y="133" width="0.0256%" height="15" fill="rgb(208,96,46)" fg:x="15857" fg:w="5"/><text x="81.4306%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.02%)</title><rect x="81.2215%" y="133" width="0.0154%" height="15" fill="rgb(239,3,39)" fg:x="15865" fg:w="3"/><text x="81.4715%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.02%)</title><rect x="81.2215%" y="117" width="0.0154%" height="15" fill="rgb(233,210,1)" fg:x="15865" fg:w="3"/><text x="81.4715%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.02%)</title><rect x="81.2215%" y="101" width="0.0154%" height="15" fill="rgb(244,137,37)" fg:x="15865" fg:w="3"/><text x="81.4715%" y="111.50"></text></g><g><title>nn`tensor_rs::impl_methods::_&lt;impl tensor_rs::TensorBase&lt;S,A&gt;&gt;::map (9 samples, 0.05%)</title><rect x="81.2062%" y="149" width="0.0461%" height="15" fill="rgb(240,136,2)" fg:x="15862" fg:w="9"/><text x="81.4562%" y="159.50"></text></g><g><title>nn`tensor_rs::impl_methods::_&lt;impl tensor_rs::TensorBase&lt;S,tensor_rs::OwnedData&lt;Dtype&gt;&gt;&gt;::from_vec (3 samples, 0.02%)</title><rect x="81.2369%" y="133" width="0.0154%" height="15" fill="rgb(239,18,37)" fg:x="15868" fg:w="3"/><text x="81.4869%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.02%)</title><rect x="81.2369%" y="117" width="0.0154%" height="15" fill="rgb(218,185,22)" fg:x="15868" fg:w="3"/><text x="81.4869%" y="127.50"></text></g><g><title>nn`tensor_rs::impl_methods::_&lt;impl tensor_rs::TensorBase&lt;S,tensor_rs::OwnedData&lt;Dtype&gt;&gt;&gt;::from_vec (11 samples, 0.06%)</title><rect x="81.2522%" y="149" width="0.0563%" height="15" fill="rgb(225,218,4)" fg:x="15871" fg:w="11"/><text x="81.5022%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.02%)</title><rect x="81.2881%" y="133" width="0.0205%" height="15" fill="rgb(230,182,32)" fg:x="15878" fg:w="4"/><text x="81.5381%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.02%)</title><rect x="81.2932%" y="117" width="0.0154%" height="15" fill="rgb(242,56,43)" fg:x="15879" fg:w="3"/><text x="81.5432%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.02%)</title><rect x="81.2932%" y="101" width="0.0154%" height="15" fill="rgb(233,99,24)" fg:x="15879" fg:w="3"/><text x="81.5432%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (2 samples, 0.01%)</title><rect x="81.3342%" y="101" width="0.0102%" height="15" fill="rgb(234,209,42)" fg:x="15887" fg:w="2"/><text x="81.5842%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`medium_malloc_should_clear (3 samples, 0.02%)</title><rect x="81.3598%" y="85" width="0.0154%" height="15" fill="rgb(227,7,12)" fg:x="15892" fg:w="3"/><text x="81.6098%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (2 samples, 0.01%)</title><rect x="81.3956%" y="53" width="0.0102%" height="15" fill="rgb(245,203,43)" fg:x="15899" fg:w="2"/><text x="81.6456%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (9 samples, 0.05%)</title><rect x="81.3751%" y="85" width="0.0461%" height="15" fill="rgb(238,205,33)" fg:x="15895" fg:w="9"/><text x="81.6251%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (8 samples, 0.04%)</title><rect x="81.3802%" y="69" width="0.0410%" height="15" fill="rgb(231,56,7)" fg:x="15896" fg:w="8"/><text x="81.6302%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (3 samples, 0.02%)</title><rect x="81.4058%" y="53" width="0.0154%" height="15" fill="rgb(244,186,29)" fg:x="15901" fg:w="3"/><text x="81.6558%" y="63.50"></text></g><g><title>libsystem_platform.dylib`__bzero (115 samples, 0.59%)</title><rect x="81.4212%" y="85" width="0.5887%" height="15" fill="rgb(234,111,31)" fg:x="15904" fg:w="115"/><text x="81.6712%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (159 samples, 0.81%)</title><rect x="81.3188%" y="117" width="0.8140%" height="15" fill="rgb(241,149,10)" fg:x="15884" fg:w="159"/><text x="81.5688%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (154 samples, 0.79%)</title><rect x="81.3444%" y="101" width="0.7884%" height="15" fill="rgb(249,206,44)" fg:x="15889" fg:w="154"/><text x="81.5944%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (24 samples, 0.12%)</title><rect x="82.0099%" y="85" width="0.1229%" height="15" fill="rgb(251,153,30)" fg:x="16019" fg:w="24"/><text x="82.2599%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.02%)</title><rect x="82.1430%" y="117" width="0.0154%" height="15" fill="rgb(239,152,38)" fg:x="16045" fg:w="3"/><text x="82.3930%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (2 samples, 0.01%)</title><rect x="82.1584%" y="117" width="0.0102%" height="15" fill="rgb(249,139,47)" fg:x="16048" fg:w="2"/><text x="82.4084%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset_pattern16 (3 samples, 0.02%)</title><rect x="82.1738%" y="117" width="0.0154%" height="15" fill="rgb(244,64,35)" fg:x="16051" fg:w="3"/><text x="82.4238%" y="127.50"></text></g><g><title>nn`__rdl_alloc_zeroed (2 samples, 0.01%)</title><rect x="82.1942%" y="117" width="0.0102%" height="15" fill="rgb(216,46,15)" fg:x="16055" fg:w="2"/><text x="82.4442%" y="127.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (14 samples, 0.07%)</title><rect x="83.7557%" y="101" width="0.0717%" height="15" fill="rgb(250,74,19)" fg:x="16360" fg:w="14"/><text x="84.0057%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (3 samples, 0.02%)</title><rect x="83.8683%" y="37" width="0.0154%" height="15" fill="rgb(249,42,33)" fg:x="16382" fg:w="3"/><text x="84.1183%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (14 samples, 0.07%)</title><rect x="83.8274%" y="101" width="0.0717%" height="15" fill="rgb(242,149,17)" fg:x="16374" fg:w="14"/><text x="84.0774%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (10 samples, 0.05%)</title><rect x="83.8478%" y="85" width="0.0512%" height="15" fill="rgb(244,29,21)" fg:x="16378" fg:w="10"/><text x="84.0978%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (10 samples, 0.05%)</title><rect x="83.8478%" y="69" width="0.0512%" height="15" fill="rgb(220,130,37)" fg:x="16378" fg:w="10"/><text x="84.0978%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (6 samples, 0.03%)</title><rect x="83.8683%" y="53" width="0.0307%" height="15" fill="rgb(211,67,2)" fg:x="16382" fg:w="6"/><text x="84.1183%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (2 samples, 0.01%)</title><rect x="83.8888%" y="37" width="0.0102%" height="15" fill="rgb(235,68,52)" fg:x="16386" fg:w="2"/><text x="84.1388%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (2 samples, 0.01%)</title><rect x="83.8990%" y="101" width="0.0102%" height="15" fill="rgb(246,142,3)" fg:x="16388" fg:w="2"/><text x="84.1490%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.01%)</title><rect x="83.9246%" y="85" width="0.0102%" height="15" fill="rgb(241,25,7)" fg:x="16393" fg:w="2"/><text x="84.1746%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_size (2 samples, 0.01%)</title><rect x="83.9349%" y="85" width="0.0102%" height="15" fill="rgb(242,119,39)" fg:x="16395" fg:w="2"/><text x="84.1849%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free (8 samples, 0.04%)</title><rect x="83.9093%" y="101" width="0.0410%" height="15" fill="rgb(241,98,45)" fg:x="16390" fg:w="8"/><text x="84.1593%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (2 samples, 0.01%)</title><rect x="83.9656%" y="85" width="0.0102%" height="15" fill="rgb(254,28,30)" fg:x="16401" fg:w="2"/><text x="84.2156%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_small (7 samples, 0.04%)</title><rect x="83.9502%" y="101" width="0.0358%" height="15" fill="rgb(241,142,54)" fg:x="16398" fg:w="7"/><text x="84.2002%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (2 samples, 0.01%)</title><rect x="83.9758%" y="85" width="0.0102%" height="15" fill="rgb(222,85,15)" fg:x="16403" fg:w="2"/><text x="84.2258%" y="95.50"></text></g><g><title>nn`matrixmultiply::gemm::gemm_loop (351 samples, 1.80%)</title><rect x="82.2096%" y="117" width="1.7970%" height="15" fill="rgb(210,85,47)" fg:x="16058" fg:w="351"/><text x="82.4596%" y="127.50">n..</text></g><g><title>nn`matrixmultiply::gemm::MASK_BUF::__getit (2 samples, 0.01%)</title><rect x="83.9963%" y="101" width="0.0102%" height="15" fill="rgb(224,206,25)" fg:x="16407" fg:w="2"/><text x="84.2463%" y="111.50"></text></g><g><title>nn`matrixmultiply::gemm::masked_kernel (2,705 samples, 13.85%)</title><rect x="84.0066%" y="117" width="13.8484%" height="15" fill="rgb(243,201,19)" fg:x="16409" fg:w="2705"/><text x="84.2566%" y="127.50">nn`matrixmultiply::ge..</text></g><g><title>nn`matrixmultiply::gemm::pack (387 samples, 1.98%)</title><rect x="97.8549%" y="117" width="1.9813%" height="15" fill="rgb(236,59,4)" fg:x="19114" fg:w="387"/><text x="98.1049%" y="127.50">n..</text></g><g><title>nn`core::ops::function::FnOnce::call_once{{vtable.shim}} (16,287 samples, 83.38%)</title><rect x="16.5003%" y="165" width="83.3820%" height="15" fill="rgb(254,179,45)" fg:x="3223" fg:w="16287"/><text x="16.7503%" y="175.50">nn`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>nn`tensor_rs::impl_processing_ops::_&lt;impl tensor_rs::TensorBase&lt;[usize (3,628 samples, 18.57%)</title><rect x="81.3086%" y="149" width="18.5737%" height="15" fill="rgb(226,14,10)" fg:x="15882" fg:w="3628"/><text x="81.5586%" y="159.50">nn`tensor_rs::impl_processing..</text></g><g><title> 2],A&gt;&gt;::dot (3,628 samples, 18.57%)</title><rect x="81.3086%" y="133" width="18.5737%" height="15" fill="rgb(244,27,41)" fg:x="15882" fg:w="3628"/><text x="81.5586%" y="143.50"> 2],A&gt;&gt;::dot</text></g><g><title>nn`tensor_rs::impl_methods::_&lt;impl tensor_rs::TensorBase&lt;S,tensor_rs::OwnedData&lt;Dtype&gt;&gt;&gt;::from_vec (9 samples, 0.05%)</title><rect x="99.8362%" y="117" width="0.0461%" height="15" fill="rgb(235,35,32)" fg:x="19501" fg:w="9"/><text x="100.0862%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (8 samples, 0.04%)</title><rect x="99.8413%" y="101" width="0.0410%" height="15" fill="rgb(218,68,31)" fg:x="19502" fg:w="8"/><text x="100.0913%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (5 samples, 0.03%)</title><rect x="99.8567%" y="85" width="0.0256%" height="15" fill="rgb(207,120,37)" fg:x="19505" fg:w="5"/><text x="100.1067%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (5 samples, 0.03%)</title><rect x="99.8567%" y="69" width="0.0256%" height="15" fill="rgb(227,98,0)" fg:x="19505" fg:w="5"/><text x="100.1067%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.01%)</title><rect x="99.8720%" y="53" width="0.0102%" height="15" fill="rgb(207,7,3)" fg:x="19508" fg:w="2"/><text x="100.1220%" y="63.50"></text></g><g><title>nn`tensor_rs::impl_binary_ops::_&lt;impl core::ops::arith::Add&lt;tensor_rs::TensorBase&lt;S,A&gt;&gt; for tensor_rs::TensorBase&lt;S,B&gt;&gt;::add (5 samples, 0.03%)</title><rect x="99.8874%" y="165" width="0.0256%" height="15" fill="rgb(206,98,19)" fg:x="19511" fg:w="5"/><text x="100.1374%" y="175.50"></text></g><g><title>nn`tensor_rs::impl_methods::_&lt;impl tensor_rs::TensorBase&lt;[usize (16,368 samples, 83.80%)</title><rect x="16.1214%" y="213" width="83.7967%" height="15" fill="rgb(217,5,26)" fg:x="3149" fg:w="16368"/><text x="16.3714%" y="223.50">nn`tensor_rs::impl_methods::_&lt;impl tensor_rs::TensorBase&lt;[usize</text></g><g><title> 0],A&gt;&gt;::backward (16,368 samples, 83.80%)</title><rect x="16.1214%" y="197" width="83.7967%" height="15" fill="rgb(235,190,38)" fg:x="3149" fg:w="16368"/><text x="16.3714%" y="207.50"> 0],A&gt;&gt;::backward</text></g><g><title>nn`tensor_rs::gradient::BackwardOps::execute (16,355 samples, 83.73%)</title><rect x="16.1880%" y="181" width="83.7301%" height="15" fill="rgb(247,86,24)" fg:x="3162" fg:w="16355"/><text x="16.4380%" y="191.50">nn`tensor_rs::gradient::BackwardOps::execute</text></g><g><title>nn`tensor_rs::mnist::mnist::load_data (9 samples, 0.05%)</title><rect x="99.9181%" y="213" width="0.0461%" height="15" fill="rgb(205,101,16)" fg:x="19517" fg:w="9"/><text x="100.1681%" y="223.50"></text></g><g><title>nn`std::fs::read::inner (9 samples, 0.05%)</title><rect x="99.9181%" y="197" width="0.0461%" height="15" fill="rgb(246,168,33)" fg:x="19517" fg:w="9"/><text x="100.1681%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`read (9 samples, 0.05%)</title><rect x="99.9181%" y="181" width="0.0461%" height="15" fill="rgb(231,114,1)" fg:x="19517" fg:w="9"/><text x="100.1681%" y="191.50"></text></g><g><title>nn`nn::main (19,521 samples, 99.94%)</title><rect x="0.0461%" y="229" width="99.9386%" height="15" fill="rgb(207,184,53)" fg:x="9" fg:w="19521"/><text x="0.2961%" y="239.50">nn`nn::main</text></g><g><title>nn`tensor_rs::utils::merge_backward_ops (3 samples, 0.02%)</title><rect x="99.9693%" y="213" width="0.0154%" height="15" fill="rgb(224,95,51)" fg:x="19527" fg:w="3"/><text x="100.2193%" y="223.50"></text></g><g><title>all (19,533 samples, 100%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(212,188,45)" fg:x="0" fg:w="19533"/><text x="0.2500%" y="335.50"></text></g><g><title>dyld`start (19,533 samples, 100.00%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(223,154,38)" fg:x="0" fg:w="19533"/><text x="0.2500%" y="319.50">dyld`start</text></g><g><title>nn`main (19,533 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(251,22,52)" fg:x="0" fg:w="19533"/><text x="0.2500%" y="303.50">nn`main</text></g><g><title>nn`std::rt::lang_start_internal (19,533 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(229,209,22)" fg:x="0" fg:w="19533"/><text x="0.2500%" y="287.50">nn`std::rt::lang_start_internal</text></g><g><title>nn`std::rt::lang_start::_{{closure}} (19,533 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(234,138,34)" fg:x="0" fg:w="19533"/><text x="0.2500%" y="271.50">nn`std::rt::lang_start::_{{closure}}</text></g><g><title>nn`std::sys_common::backtrace::__rust_begin_short_backtrace (19,533 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(212,95,11)" fg:x="0" fg:w="19533"/><text x="0.2500%" y="255.50">nn`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>nn`tensor_rs::impl_binary_ops::_&lt;impl core::ops::arith::AddAssign&lt;&amp;tensor_rs::TensorBase&lt;S,B&gt;&gt; for tensor_rs::TensorBase&lt;S,A&gt;&gt;::add_assign (2 samples, 0.01%)</title><rect x="99.9898%" y="229" width="0.0102%" height="15" fill="rgb(240,179,47)" fg:x="19531" fg:w="2"/><text x="100.2398%" y="239.50"></text></g></svg></svg>