<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="374" onload="init(evt)" viewBox="0 0 1200 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="374" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="357.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="357.00"> </text><svg id="frames" x="10" width="1180" total_samples="13450"><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (2 samples, 0.01%)</title><rect x="0.0000%" y="229" width="0.0149%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="2"/><text x="0.2500%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.02%)</title><rect x="0.0149%" y="229" width="0.0223%" height="15" fill="rgb(217,0,24)" fg:x="2" fg:w="3"/><text x="0.2649%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 0.01%)</title><rect x="0.0372%" y="229" width="0.0149%" height="15" fill="rgb(221,193,54)" fg:x="5" fg:w="2"/><text x="0.2872%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (3 samples, 0.02%)</title><rect x="0.0595%" y="229" width="0.0223%" height="15" fill="rgb(248,212,6)" fg:x="8" fg:w="3"/><text x="0.3095%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (3 samples, 0.02%)</title><rect x="0.6840%" y="213" width="0.0223%" height="15" fill="rgb(208,68,35)" fg:x="92" fg:w="3"/><text x="0.9340%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (13 samples, 0.10%)</title><rect x="0.8773%" y="197" width="0.0967%" height="15" fill="rgb(232,128,0)" fg:x="118" fg:w="13"/><text x="1.1273%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (37 samples, 0.28%)</title><rect x="0.7063%" y="213" width="0.2751%" height="15" fill="rgb(207,160,47)" fg:x="95" fg:w="37"/><text x="0.9563%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (5 samples, 0.04%)</title><rect x="0.9814%" y="213" width="0.0372%" height="15" fill="rgb(228,23,34)" fg:x="132" fg:w="5"/><text x="1.2314%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (5 samples, 0.04%)</title><rect x="0.9814%" y="197" width="0.0372%" height="15" fill="rgb(218,30,26)" fg:x="132" fg:w="5"/><text x="1.2314%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (2 samples, 0.01%)</title><rect x="1.0037%" y="181" width="0.0149%" height="15" fill="rgb(220,122,19)" fg:x="135" fg:w="2"/><text x="1.2537%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (5 samples, 0.04%)</title><rect x="1.0186%" y="213" width="0.0372%" height="15" fill="rgb(250,228,42)" fg:x="137" fg:w="5"/><text x="1.2686%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (13 samples, 0.10%)</title><rect x="1.0558%" y="213" width="0.0967%" height="15" fill="rgb(240,193,28)" fg:x="142" fg:w="13"/><text x="1.3058%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (4 samples, 0.03%)</title><rect x="1.1524%" y="213" width="0.0297%" height="15" fill="rgb(216,20,37)" fg:x="155" fg:w="4"/><text x="1.4024%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset_pattern16 (5 samples, 0.04%)</title><rect x="1.1896%" y="213" width="0.0372%" height="15" fill="rgb(206,188,39)" fg:x="160" fg:w="5"/><text x="1.4396%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (8 samples, 0.06%)</title><rect x="1.3086%" y="197" width="0.0595%" height="15" fill="rgb(217,207,13)" fg:x="176" fg:w="8"/><text x="1.5586%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (53 samples, 0.39%)</title><rect x="1.3680%" y="197" width="0.3941%" height="15" fill="rgb(231,73,38)" fg:x="184" fg:w="53"/><text x="1.6180%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (17 samples, 0.13%)</title><rect x="1.6357%" y="181" width="0.1264%" height="15" fill="rgb(225,20,46)" fg:x="220" fg:w="17"/><text x="1.8857%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (8 samples, 0.06%)</title><rect x="1.7695%" y="197" width="0.0595%" height="15" fill="rgb(210,31,41)" fg:x="238" fg:w="8"/><text x="2.0195%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (21 samples, 0.16%)</title><rect x="1.8290%" y="197" width="0.1561%" height="15" fill="rgb(221,200,47)" fg:x="246" fg:w="21"/><text x="2.0790%" y="207.50"></text></g><g><title>nn`DYLD-STUB$$free (10 samples, 0.07%)</title><rect x="1.9851%" y="197" width="0.0743%" height="15" fill="rgb(226,26,5)" fg:x="267" fg:w="10"/><text x="2.2351%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.02%)</title><rect x="2.0595%" y="165" width="0.0223%" height="15" fill="rgb(249,33,26)" fg:x="277" fg:w="3"/><text x="2.3095%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (3 samples, 0.02%)</title><rect x="2.0595%" y="149" width="0.0223%" height="15" fill="rgb(235,183,28)" fg:x="277" fg:w="3"/><text x="2.3095%" y="159.50"></text></g><g><title> 0]&gt;&gt; (4 samples, 0.03%)</title><rect x="2.0595%" y="181" width="0.0297%" height="15" fill="rgb(221,5,38)" fg:x="277" fg:w="4"/><text x="2.3095%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (42 samples, 0.31%)</title><rect x="2.4461%" y="149" width="0.3123%" height="15" fill="rgb(247,18,42)" fg:x="329" fg:w="42"/><text x="2.6961%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_size (9 samples, 0.07%)</title><rect x="2.7584%" y="149" width="0.0669%" height="15" fill="rgb(241,131,45)" fg:x="371" fg:w="9"/><text x="3.0084%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (97 samples, 0.72%)</title><rect x="2.1338%" y="165" width="0.7212%" height="15" fill="rgb(249,31,29)" fg:x="287" fg:w="97"/><text x="2.3838%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (4 samples, 0.03%)</title><rect x="2.8253%" y="149" width="0.0297%" height="15" fill="rgb(225,111,53)" fg:x="380" fg:w="4"/><text x="3.0753%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (3 samples, 0.02%)</title><rect x="2.8327%" y="133" width="0.0223%" height="15" fill="rgb(238,160,17)" fg:x="381" fg:w="3"/><text x="3.0827%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (5 samples, 0.04%)</title><rect x="2.8550%" y="165" width="0.0372%" height="15" fill="rgb(214,148,48)" fg:x="384" fg:w="5"/><text x="3.1050%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (2 samples, 0.01%)</title><rect x="2.9591%" y="149" width="0.0149%" height="15" fill="rgb(232,36,49)" fg:x="398" fg:w="2"/><text x="3.2091%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_small (15 samples, 0.11%)</title><rect x="2.8922%" y="165" width="0.1115%" height="15" fill="rgb(209,103,24)" fg:x="389" fg:w="15"/><text x="3.1422%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (2 samples, 0.01%)</title><rect x="2.9888%" y="149" width="0.0149%" height="15" fill="rgb(229,88,8)" fg:x="402" fg:w="2"/><text x="3.2388%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (6 samples, 0.04%)</title><rect x="3.0037%" y="165" width="0.0446%" height="15" fill="rgb(213,181,19)" fg:x="404" fg:w="6"/><text x="3.2537%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (24 samples, 0.18%)</title><rect x="3.0483%" y="165" width="0.1784%" height="15" fill="rgb(254,191,54)" fg:x="410" fg:w="24"/><text x="3.2983%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (15 samples, 0.11%)</title><rect x="3.2268%" y="165" width="0.1115%" height="15" fill="rgb(241,83,37)" fg:x="434" fg:w="15"/><text x="3.4768%" y="175.50"></text></g><g><title>nn`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (288 samples, 2.14%)</title><rect x="1.2342%" y="213" width="2.1413%" height="15" fill="rgb(233,36,39)" fg:x="166" fg:w="288"/><text x="1.4842%" y="223.50">n..</text></g><g><title>nn`core::ptr::drop_in_place&lt;tensor_rs::TensorBase&lt;[usize (177 samples, 1.32%)</title><rect x="2.0595%" y="197" width="1.3160%" height="15" fill="rgb(226,3,54)" fg:x="277" fg:w="177"/><text x="2.3095%" y="207.50"></text></g><g><title> 2]&gt;&gt; (173 samples, 1.29%)</title><rect x="2.0892%" y="181" width="1.2862%" height="15" fill="rgb(245,192,40)" fg:x="281" fg:w="173"/><text x="2.3392%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (4 samples, 0.03%)</title><rect x="3.3457%" y="165" width="0.0297%" height="15" fill="rgb(238,167,29)" fg:x="450" fg:w="4"/><text x="3.5957%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.02%)</title><rect x="3.5836%" y="165" width="0.0223%" height="15" fill="rgb(232,182,51)" fg:x="482" fg:w="3"/><text x="3.8336%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (9 samples, 0.07%)</title><rect x="3.5613%" y="197" width="0.0669%" height="15" fill="rgb(231,60,39)" fg:x="479" fg:w="9"/><text x="3.8113%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (7 samples, 0.05%)</title><rect x="3.5762%" y="181" width="0.0520%" height="15" fill="rgb(208,69,12)" fg:x="481" fg:w="7"/><text x="3.8262%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (3 samples, 0.02%)</title><rect x="3.6059%" y="165" width="0.0223%" height="15" fill="rgb(235,93,37)" fg:x="485" fg:w="3"/><text x="3.8559%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset_pattern16 (2 samples, 0.01%)</title><rect x="3.6357%" y="197" width="0.0149%" height="15" fill="rgb(213,116,39)" fg:x="489" fg:w="2"/><text x="3.8857%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.02%)</title><rect x="3.7323%" y="101" width="0.0223%" height="15" fill="rgb(222,207,29)" fg:x="502" fg:w="3"/><text x="3.9823%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (5 samples, 0.04%)</title><rect x="3.7323%" y="117" width="0.0372%" height="15" fill="rgb(206,96,30)" fg:x="502" fg:w="5"/><text x="3.9823%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.01%)</title><rect x="3.7546%" y="101" width="0.0149%" height="15" fill="rgb(218,138,4)" fg:x="505" fg:w="2"/><text x="4.0046%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (9 samples, 0.07%)</title><rect x="3.7175%" y="133" width="0.0669%" height="15" fill="rgb(250,191,14)" fg:x="500" fg:w="9"/><text x="3.9675%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.01%)</title><rect x="3.7695%" y="117" width="0.0149%" height="15" fill="rgb(239,60,40)" fg:x="507" fg:w="2"/><text x="4.0195%" y="127.50"></text></g><g><title>nn`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (18 samples, 0.13%)</title><rect x="3.6580%" y="197" width="0.1338%" height="15" fill="rgb(206,27,48)" fg:x="492" fg:w="18"/><text x="3.9080%" y="207.50"></text></g><g><title>nn`alloc::raw_vec::finish_grow (16 samples, 0.12%)</title><rect x="3.6729%" y="181" width="0.1190%" height="15" fill="rgb(225,35,8)" fg:x="494" fg:w="16"/><text x="3.9229%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (16 samples, 0.12%)</title><rect x="3.6729%" y="165" width="0.1190%" height="15" fill="rgb(250,213,24)" fg:x="494" fg:w="16"/><text x="3.9229%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (15 samples, 0.11%)</title><rect x="3.6803%" y="149" width="0.1115%" height="15" fill="rgb(247,123,22)" fg:x="495" fg:w="15"/><text x="3.9303%" y="159.50"></text></g><g><title>nn`tensor_rs::impl_methods::_&lt;impl tensor_rs::TensorBase&lt;S,A&gt;&gt;::put_backward_ops (2 samples, 0.01%)</title><rect x="3.7918%" y="197" width="0.0149%" height="15" fill="rgb(231,138,38)" fg:x="510" fg:w="2"/><text x="4.0418%" y="207.50"></text></g><g><title>nn`tensor_rs::impl_methods::_&lt;impl tensor_rs::TensorBase&lt;S,tensor_rs::OwnedData&lt;Dtype&gt;&gt;&gt;::from_vec (12 samples, 0.09%)</title><rect x="3.8067%" y="197" width="0.0892%" height="15" fill="rgb(231,145,46)" fg:x="512" fg:w="12"/><text x="4.0567%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (12 samples, 0.09%)</title><rect x="3.8067%" y="181" width="0.0892%" height="15" fill="rgb(251,118,11)" fg:x="512" fg:w="12"/><text x="4.0567%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (7 samples, 0.05%)</title><rect x="3.8439%" y="165" width="0.0520%" height="15" fill="rgb(217,147,25)" fg:x="517" fg:w="7"/><text x="4.0939%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (4 samples, 0.03%)</title><rect x="3.8662%" y="149" width="0.0297%" height="15" fill="rgb(247,81,37)" fg:x="520" fg:w="4"/><text x="4.1162%" y="159.50"></text></g><g><title>nn`&lt;tensor_rs::TensorBase&lt;L,tensor_rs::OwnedData&lt;Dtype&gt;&gt; as tensor_rs::impl_binary_ops::TensorBinaryOps&lt;tensor_rs::TensorBase&lt;R,tensor_rs::OwnedData&lt;Dtype&gt;&gt;&gt;&gt;::add (74 samples, 0.55%)</title><rect x="3.3755%" y="213" width="0.5502%" height="15" fill="rgb(209,12,38)" fg:x="454" fg:w="74"/><text x="3.6255%" y="223.50"></text></g><g><title>nn`tensor_rs::utils::merge_backward_ops (4 samples, 0.03%)</title><rect x="3.8959%" y="197" width="0.0297%" height="15" fill="rgb(227,1,9)" fg:x="524" fg:w="4"/><text x="4.1459%" y="207.50"></text></g><g><title>nn`&lt;core::option::Option&lt;tensor_rs::gradient::BackwardOps&gt; as tensor_rs::gradient::Merge&gt;::merge (3 samples, 0.02%)</title><rect x="3.9033%" y="181" width="0.0223%" height="15" fill="rgb(248,47,43)" fg:x="525" fg:w="3"/><text x="4.1533%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset_pattern16 (2 samples, 0.01%)</title><rect x="3.9777%" y="197" width="0.0149%" height="15" fill="rgb(221,10,30)" fg:x="535" fg:w="2"/><text x="4.2277%" y="207.50"></text></g><g><title>nn`tensor_rs::gradient::BackwardOps::add_backward_op (2 samples, 0.01%)</title><rect x="4.0223%" y="197" width="0.0149%" height="15" fill="rgb(210,229,1)" fg:x="541" fg:w="2"/><text x="4.2723%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.02%)</title><rect x="4.0520%" y="181" width="0.0223%" height="15" fill="rgb(222,148,37)" fg:x="545" fg:w="3"/><text x="4.3020%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.02%)</title><rect x="4.0743%" y="165" width="0.0223%" height="15" fill="rgb(234,67,33)" fg:x="548" fg:w="3"/><text x="4.3243%" y="175.50"></text></g><g><title>nn`tensor_rs::impl_binary_ops::_&lt;impl core::ops::arith::Mul&lt;&amp;tensor_rs::TensorBase&lt;S,A&gt;&gt; for &amp;tensor_rs::TensorBase&lt;S,B&gt;&gt;::mul (9 samples, 0.07%)</title><rect x="4.0372%" y="197" width="0.0669%" height="15" fill="rgb(247,98,35)" fg:x="543" fg:w="9"/><text x="4.2872%" y="207.50"></text></g><g><title>nn`tensor_rs::impl_methods::_&lt;impl tensor_rs::TensorBase&lt;S,tensor_rs::OwnedData&lt;Dtype&gt;&gt;&gt;::from_vec (4 samples, 0.03%)</title><rect x="4.0743%" y="181" width="0.0297%" height="15" fill="rgb(247,138,52)" fg:x="548" fg:w="4"/><text x="4.3243%" y="191.50"></text></g><g><title>nn`&lt;tensor_rs::TensorBase&lt;L,tensor_rs::OwnedData&lt;Dtype&gt;&gt; as tensor_rs::impl_binary_ops::TensorBinaryOps&lt;tensor_rs::TensorBase&lt;R,tensor_rs::OwnedData&lt;Dtype&gt;&gt;&gt;&gt;::mul (26 samples, 0.19%)</title><rect x="3.9257%" y="213" width="0.1933%" height="15" fill="rgb(213,79,30)" fg:x="528" fg:w="26"/><text x="4.1757%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (6 samples, 0.04%)</title><rect x="4.1933%" y="197" width="0.0446%" height="15" fill="rgb(246,177,23)" fg:x="564" fg:w="6"/><text x="4.4433%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.02%)</title><rect x="4.2156%" y="181" width="0.0223%" height="15" fill="rgb(230,62,27)" fg:x="567" fg:w="3"/><text x="4.4656%" y="191.50"></text></g><g><title>nn`tensor_rs::impl_methods::_&lt;impl tensor_rs::TensorBase&lt;S,tensor_rs::OwnedData&lt;Dtype&gt;&gt;&gt;::from_vec (3 samples, 0.02%)</title><rect x="4.2528%" y="197" width="0.0223%" height="15" fill="rgb(216,154,8)" fg:x="572" fg:w="3"/><text x="4.5028%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.02%)</title><rect x="4.2528%" y="181" width="0.0223%" height="15" fill="rgb(244,35,45)" fg:x="572" fg:w="3"/><text x="4.5028%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.02%)</title><rect x="4.2528%" y="165" width="0.0223%" height="15" fill="rgb(251,115,12)" fg:x="572" fg:w="3"/><text x="4.5028%" y="175.50"></text></g><g><title>nn`&lt;tensor_rs::TensorBase&lt;L,tensor_rs::OwnedData&lt;Dtype&gt;&gt; as tensor_rs::impl_binary_ops::TensorBinaryOps&lt;tensor_rs::TensorBase&lt;R,tensor_rs::OwnedData&lt;Dtype&gt;&gt;&gt;&gt;::sub (22 samples, 0.16%)</title><rect x="4.1190%" y="213" width="0.1636%" height="15" fill="rgb(240,54,50)" fg:x="554" fg:w="22"/><text x="4.3690%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (5 samples, 0.04%)</title><rect x="4.3494%" y="197" width="0.0372%" height="15" fill="rgb(233,84,52)" fg:x="585" fg:w="5"/><text x="4.5994%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.03%)</title><rect x="4.3569%" y="181" width="0.0297%" height="15" fill="rgb(207,117,47)" fg:x="586" fg:w="4"/><text x="4.6069%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.01%)</title><rect x="4.3717%" y="165" width="0.0149%" height="15" fill="rgb(249,43,39)" fg:x="588" fg:w="2"/><text x="4.6217%" y="175.50"></text></g><g><title>nn`__rust_alloc (2 samples, 0.01%)</title><rect x="4.3941%" y="197" width="0.0149%" height="15" fill="rgb(209,38,44)" fg:x="591" fg:w="2"/><text x="4.6441%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.01%)</title><rect x="4.4387%" y="181" width="0.0149%" height="15" fill="rgb(236,212,23)" fg:x="597" fg:w="2"/><text x="4.6887%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (6 samples, 0.04%)</title><rect x="4.4833%" y="133" width="0.0446%" height="15" fill="rgb(242,79,21)" fg:x="603" fg:w="6"/><text x="4.7333%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (4 samples, 0.03%)</title><rect x="4.4981%" y="117" width="0.0297%" height="15" fill="rgb(211,96,35)" fg:x="605" fg:w="4"/><text x="4.7481%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.01%)</title><rect x="4.5130%" y="101" width="0.0149%" height="15" fill="rgb(253,215,40)" fg:x="607" fg:w="2"/><text x="4.7630%" y="111.50"></text></g><g><title>nn`tensor_rs::gradient::BackwardOps::add_backward_op (19 samples, 0.14%)</title><rect x="4.4089%" y="197" width="0.1413%" height="15" fill="rgb(211,81,21)" fg:x="593" fg:w="19"/><text x="4.6589%" y="207.50"></text></g><g><title>nn`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (11 samples, 0.08%)</title><rect x="4.4684%" y="181" width="0.0818%" height="15" fill="rgb(208,190,38)" fg:x="601" fg:w="11"/><text x="4.7184%" y="191.50"></text></g><g><title>nn`alloc::raw_vec::finish_grow (11 samples, 0.08%)</title><rect x="4.4684%" y="165" width="0.0818%" height="15" fill="rgb(235,213,38)" fg:x="601" fg:w="11"/><text x="4.7184%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`realloc (11 samples, 0.08%)</title><rect x="4.4684%" y="149" width="0.0818%" height="15" fill="rgb(237,122,38)" fg:x="601" fg:w="11"/><text x="4.7184%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (3 samples, 0.02%)</title><rect x="4.5279%" y="133" width="0.0223%" height="15" fill="rgb(244,218,35)" fg:x="609" fg:w="3"/><text x="4.7779%" y="143.50"></text></g><g><title>nn`&lt;tensor_rs::TensorBase&lt;S,A&gt; as tensor_rs::impl_reduce_ops::ReduceOps&gt;::sum (41 samples, 0.30%)</title><rect x="4.2825%" y="213" width="0.3048%" height="15" fill="rgb(240,68,47)" fg:x="576" fg:w="41"/><text x="4.5325%" y="223.50"></text></g><g><title>nn`tensor_rs::impl_methods::_&lt;impl tensor_rs::TensorBase&lt;S,tensor_rs::OwnedData&lt;Dtype&gt;&gt;&gt;::from_vec (5 samples, 0.04%)</title><rect x="4.5502%" y="197" width="0.0372%" height="15" fill="rgb(210,16,53)" fg:x="612" fg:w="5"/><text x="4.8002%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (5 samples, 0.04%)</title><rect x="4.5502%" y="181" width="0.0372%" height="15" fill="rgb(235,124,12)" fg:x="612" fg:w="5"/><text x="4.8002%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (5 samples, 0.04%)</title><rect x="4.5502%" y="165" width="0.0372%" height="15" fill="rgb(224,169,11)" fg:x="612" fg:w="5"/><text x="4.8002%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.01%)</title><rect x="4.5725%" y="149" width="0.0149%" height="15" fill="rgb(250,166,2)" fg:x="615" fg:w="2"/><text x="4.8225%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (7 samples, 0.05%)</title><rect x="4.6691%" y="181" width="0.0520%" height="15" fill="rgb(242,216,29)" fg:x="628" fg:w="7"/><text x="4.9191%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.03%)</title><rect x="4.6914%" y="165" width="0.0297%" height="15" fill="rgb(230,116,27)" fg:x="631" fg:w="4"/><text x="4.9414%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (4 samples, 0.03%)</title><rect x="4.6914%" y="149" width="0.0297%" height="15" fill="rgb(228,99,48)" fg:x="631" fg:w="4"/><text x="4.9414%" y="159.50"></text></g><g><title>nn`&lt;f32 as tensor_rs::DataElement&gt;::sigmoid (58 samples, 0.43%)</title><rect x="4.7212%" y="181" width="0.4312%" height="15" fill="rgb(253,11,6)" fg:x="635" fg:w="58"/><text x="4.9712%" y="191.50"></text></g><g><title>libsystem_m.dylib`expf (48 samples, 0.36%)</title><rect x="4.7955%" y="165" width="0.3569%" height="15" fill="rgb(247,143,39)" fg:x="645" fg:w="48"/><text x="5.0455%" y="175.50"></text></g><g><title>nn`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (71 samples, 0.53%)</title><rect x="4.6468%" y="197" width="0.5279%" height="15" fill="rgb(236,97,10)" fg:x="625" fg:w="71"/><text x="4.8968%" y="207.50"></text></g><g><title>nn`DYLD-STUB$$expf (3 samples, 0.02%)</title><rect x="5.1524%" y="181" width="0.0223%" height="15" fill="rgb(233,208,19)" fg:x="693" fg:w="3"/><text x="5.4024%" y="191.50"></text></g><g><title>nn`__rust_alloc (4 samples, 0.03%)</title><rect x="5.1822%" y="197" width="0.0297%" height="15" fill="rgb(216,164,2)" fg:x="697" fg:w="4"/><text x="5.4322%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (5 samples, 0.04%)</title><rect x="5.2342%" y="149" width="0.0372%" height="15" fill="rgb(220,129,5)" fg:x="704" fg:w="5"/><text x="5.4842%" y="159.50"></text></g><g><title>nn`tensor_rs::gradient::BackwardOps::add_backward_op (9 samples, 0.07%)</title><rect x="5.2119%" y="197" width="0.0669%" height="15" fill="rgb(242,17,10)" fg:x="701" fg:w="9"/><text x="5.4619%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (7 samples, 0.05%)</title><rect x="5.2268%" y="181" width="0.0520%" height="15" fill="rgb(242,107,0)" fg:x="703" fg:w="7"/><text x="5.4768%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (7 samples, 0.05%)</title><rect x="5.2268%" y="165" width="0.0520%" height="15" fill="rgb(251,28,31)" fg:x="703" fg:w="7"/><text x="5.4768%" y="175.50"></text></g><g><title>nn`&lt;tensor_rs::TensorBase&lt;S&gt; as tensor_rs::impl_unary_ops::TensorUnaryOps&gt;::sigmoid (100 samples, 0.74%)</title><rect x="4.5874%" y="213" width="0.7435%" height="15" fill="rgb(233,223,10)" fg:x="617" fg:w="100"/><text x="4.8374%" y="223.50"></text></g><g><title>nn`tensor_rs::impl_methods::_&lt;impl tensor_rs::TensorBase&lt;S,tensor_rs::OwnedData&lt;Dtype&gt;&gt;&gt;::from_vec (7 samples, 0.05%)</title><rect x="5.2788%" y="197" width="0.0520%" height="15" fill="rgb(215,21,27)" fg:x="710" fg:w="7"/><text x="5.5288%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (5 samples, 0.04%)</title><rect x="5.2937%" y="181" width="0.0372%" height="15" fill="rgb(232,23,21)" fg:x="712" fg:w="5"/><text x="5.5437%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.03%)</title><rect x="5.3011%" y="165" width="0.0297%" height="15" fill="rgb(244,5,23)" fg:x="713" fg:w="4"/><text x="5.5511%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.01%)</title><rect x="5.3160%" y="149" width="0.0149%" height="15" fill="rgb(226,81,46)" fg:x="715" fg:w="2"/><text x="5.5660%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.02%)</title><rect x="5.4275%" y="133" width="0.0223%" height="15" fill="rgb(247,70,30)" fg:x="730" fg:w="3"/><text x="5.6775%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (8 samples, 0.06%)</title><rect x="5.4052%" y="165" width="0.0595%" height="15" fill="rgb(212,68,19)" fg:x="727" fg:w="8"/><text x="5.6552%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (7 samples, 0.05%)</title><rect x="5.4126%" y="149" width="0.0520%" height="15" fill="rgb(240,187,13)" fg:x="728" fg:w="7"/><text x="5.6626%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (2 samples, 0.01%)</title><rect x="5.4498%" y="133" width="0.0149%" height="15" fill="rgb(223,113,26)" fg:x="733" fg:w="2"/><text x="5.6998%" y="143.50"></text></g><g><title>nn`__rust_alloc (4 samples, 0.03%)</title><rect x="5.5019%" y="165" width="0.0297%" height="15" fill="rgb(206,192,2)" fg:x="740" fg:w="4"/><text x="5.7519%" y="175.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (9 samples, 0.07%)</title><rect x="6.2677%" y="149" width="0.0669%" height="15" fill="rgb(241,108,4)" fg:x="843" fg:w="9"/><text x="6.5177%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.01%)</title><rect x="6.3494%" y="133" width="0.0149%" height="15" fill="rgb(247,173,49)" fg:x="854" fg:w="2"/><text x="6.5994%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`medium_malloc_should_clear (6 samples, 0.04%)</title><rect x="6.3717%" y="117" width="0.0446%" height="15" fill="rgb(224,114,35)" fg:x="857" fg:w="6"/><text x="6.6217%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`medium_malloc_from_free_list (2 samples, 0.01%)</title><rect x="6.4015%" y="101" width="0.0149%" height="15" fill="rgb(245,159,27)" fg:x="861" fg:w="2"/><text x="6.6515%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (6 samples, 0.04%)</title><rect x="6.4610%" y="85" width="0.0446%" height="15" fill="rgb(245,172,44)" fg:x="869" fg:w="6"/><text x="6.7110%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (26 samples, 0.19%)</title><rect x="6.3346%" y="149" width="0.1933%" height="15" fill="rgb(236,23,11)" fg:x="852" fg:w="26"/><text x="6.5846%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (22 samples, 0.16%)</title><rect x="6.3643%" y="133" width="0.1636%" height="15" fill="rgb(205,117,38)" fg:x="856" fg:w="22"/><text x="6.6143%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (15 samples, 0.11%)</title><rect x="6.4164%" y="117" width="0.1115%" height="15" fill="rgb(237,72,25)" fg:x="863" fg:w="15"/><text x="6.6664%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (13 samples, 0.10%)</title><rect x="6.4312%" y="101" width="0.0967%" height="15" fill="rgb(244,70,9)" fg:x="865" fg:w="13"/><text x="6.6812%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (2 samples, 0.01%)</title><rect x="6.5130%" y="85" width="0.0149%" height="15" fill="rgb(217,125,39)" fg:x="876" fg:w="2"/><text x="6.7630%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_size (2 samples, 0.01%)</title><rect x="6.5502%" y="133" width="0.0149%" height="15" fill="rgb(235,36,10)" fg:x="881" fg:w="2"/><text x="6.8002%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (7 samples, 0.05%)</title><rect x="6.5279%" y="149" width="0.0520%" height="15" fill="rgb(251,123,47)" fg:x="878" fg:w="7"/><text x="6.7779%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (2 samples, 0.01%)</title><rect x="6.5651%" y="133" width="0.0149%" height="15" fill="rgb(221,13,13)" fg:x="883" fg:w="2"/><text x="6.8151%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (7 samples, 0.05%)</title><rect x="6.5799%" y="149" width="0.0520%" height="15" fill="rgb(238,131,9)" fg:x="885" fg:w="7"/><text x="6.8299%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`medium_free_list_add_ptr (2 samples, 0.01%)</title><rect x="6.6171%" y="133" width="0.0149%" height="15" fill="rgb(211,50,8)" fg:x="890" fg:w="2"/><text x="6.8671%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_small (6 samples, 0.04%)</title><rect x="6.6320%" y="149" width="0.0446%" height="15" fill="rgb(245,182,24)" fg:x="892" fg:w="6"/><text x="6.8820%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (3 samples, 0.02%)</title><rect x="6.6543%" y="133" width="0.0223%" height="15" fill="rgb(242,14,37)" fg:x="895" fg:w="3"/><text x="6.9043%" y="143.50"></text></g><g><title>nn`matrixmultiply::gemm::gemm_loop (159 samples, 1.18%)</title><rect x="5.5316%" y="165" width="1.1822%" height="15" fill="rgb(246,228,12)" fg:x="744" fg:w="159"/><text x="5.7816%" y="175.50"></text></g><g><title>nn`matrixmultiply::gemm::masked_kernel (1,798 samples, 13.37%)</title><rect x="6.7138%" y="165" width="13.3680%" height="15" fill="rgb(213,55,15)" fg:x="903" fg:w="1798"/><text x="6.9638%" y="175.50">nn`matrixmultiply::g..</text></g><g><title>nn`matrixmultiply::gemm::pack (1,139 samples, 8.47%)</title><rect x="20.0818%" y="165" width="8.4684%" height="15" fill="rgb(209,9,3)" fg:x="2701" fg:w="1139"/><text x="20.3318%" y="175.50">nn`matrixmul..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.01%)</title><rect x="28.6022%" y="133" width="0.0149%" height="15" fill="rgb(230,59,30)" fg:x="3847" fg:w="2"/><text x="28.8522%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (8 samples, 0.06%)</title><rect x="28.5874%" y="149" width="0.0595%" height="15" fill="rgb(209,121,21)" fg:x="3845" fg:w="8"/><text x="28.8374%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.03%)</title><rect x="28.6171%" y="133" width="0.0297%" height="15" fill="rgb(220,109,13)" fg:x="3849" fg:w="4"/><text x="28.8671%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (4 samples, 0.03%)</title><rect x="28.6171%" y="117" width="0.0297%" height="15" fill="rgb(232,18,1)" fg:x="3849" fg:w="4"/><text x="28.8671%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (5 samples, 0.04%)</title><rect x="28.6914%" y="117" width="0.0372%" height="15" fill="rgb(215,41,42)" fg:x="3859" fg:w="5"/><text x="28.9414%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.02%)</title><rect x="28.7063%" y="101" width="0.0223%" height="15" fill="rgb(224,123,36)" fg:x="3861" fg:w="3"/><text x="28.9563%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.02%)</title><rect x="28.7063%" y="85" width="0.0223%" height="15" fill="rgb(240,125,3)" fg:x="3861" fg:w="3"/><text x="28.9563%" y="95.50"></text></g><g><title>nn`tensor_rs::gradient::BackwardOps::add_backward_op (25 samples, 0.19%)</title><rect x="28.5502%" y="165" width="0.1859%" height="15" fill="rgb(205,98,50)" fg:x="3840" fg:w="25"/><text x="28.8002%" y="175.50"></text></g><g><title>nn`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (12 samples, 0.09%)</title><rect x="28.6468%" y="149" width="0.0892%" height="15" fill="rgb(205,185,37)" fg:x="3853" fg:w="12"/><text x="28.8968%" y="159.50"></text></g><g><title>nn`alloc::raw_vec::finish_grow (7 samples, 0.05%)</title><rect x="28.6840%" y="133" width="0.0520%" height="15" fill="rgb(238,207,15)" fg:x="3858" fg:w="7"/><text x="28.9340%" y="143.50"></text></g><g><title>nn`tensor_rs::impl_methods::_&lt;impl tensor_rs::TensorBase&lt;S,A&gt;&gt;::put_backward_ops (3 samples, 0.02%)</title><rect x="28.7361%" y="165" width="0.0223%" height="15" fill="rgb(213,199,42)" fg:x="3865" fg:w="3"/><text x="28.9861%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (4 samples, 0.03%)</title><rect x="28.7807%" y="117" width="0.0297%" height="15" fill="rgb(235,201,11)" fg:x="3871" fg:w="4"/><text x="29.0307%" y="127.50"></text></g><g><title>nn`tensor_rs::impl_methods::_&lt;impl tensor_rs::TensorBase&lt;S,tensor_rs::OwnedData&lt;Dtype&gt;&gt;&gt;::from_vec (8 samples, 0.06%)</title><rect x="28.7584%" y="165" width="0.0595%" height="15" fill="rgb(207,46,11)" fg:x="3868" fg:w="8"/><text x="29.0084%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (6 samples, 0.04%)</title><rect x="28.7732%" y="149" width="0.0446%" height="15" fill="rgb(241,35,35)" fg:x="3870" fg:w="6"/><text x="29.0232%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (5 samples, 0.04%)</title><rect x="28.7807%" y="133" width="0.0372%" height="15" fill="rgb(243,32,47)" fg:x="3871" fg:w="5"/><text x="29.0307%" y="143.50"></text></g><g><title>nn`&lt;tensor_rs::TensorBase&lt;[usize (3,165 samples, 23.53%)</title><rect x="5.3309%" y="213" width="23.5316%" height="15" fill="rgb(247,202,23)" fg:x="717" fg:w="3165"/><text x="5.5809%" y="223.50">nn`&lt;tensor_rs::TensorBase&lt;[usize</text></g><g><title> 2],A&gt; as tensor_rs::impl_processing_ops::Matmul&lt;tensor_rs::TensorBase&lt;[usize (3,165 samples, 23.53%)</title><rect x="5.3309%" y="197" width="23.5316%" height="15" fill="rgb(219,102,11)" fg:x="717" fg:w="3165"/><text x="5.5809%" y="207.50"> 2],A&gt; as tensor_rs::impl_processing_..</text></g><g><title> 2],A&gt;&gt;&gt;::matmul (3,165 samples, 23.53%)</title><rect x="5.3309%" y="181" width="23.5316%" height="15" fill="rgb(243,110,44)" fg:x="717" fg:w="3165"/><text x="5.5809%" y="191.50"> 2],A&gt;&gt;&gt;::matmul</text></g><g><title>nn`tensor_rs::utils::merge_backward_ops (5 samples, 0.04%)</title><rect x="28.8253%" y="165" width="0.0372%" height="15" fill="rgb(222,74,54)" fg:x="3877" fg:w="5"/><text x="29.0753%" y="175.50"></text></g><g><title>nn`&lt;core::option::Option&lt;tensor_rs::gradient::BackwardOps&gt; as tensor_rs::gradient::Merge&gt;::merge (5 samples, 0.04%)</title><rect x="28.8253%" y="149" width="0.0372%" height="15" fill="rgb(216,99,12)" fg:x="3877" fg:w="5"/><text x="29.0753%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (3 samples, 0.02%)</title><rect x="28.8996%" y="181" width="0.0223%" height="15" fill="rgb(226,22,26)" fg:x="3887" fg:w="3"/><text x="29.1496%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (3 samples, 0.02%)</title><rect x="28.8996%" y="165" width="0.0223%" height="15" fill="rgb(217,163,10)" fg:x="3887" fg:w="3"/><text x="29.1496%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.01%)</title><rect x="28.9071%" y="149" width="0.0149%" height="15" fill="rgb(213,25,53)" fg:x="3888" fg:w="2"/><text x="29.1571%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.01%)</title><rect x="28.9517%" y="181" width="0.0149%" height="15" fill="rgb(252,105,26)" fg:x="3894" fg:w="2"/><text x="29.2017%" y="191.50"></text></g><g><title>nn`tensor_rs::impl_methods::_&lt;impl tensor_rs::TensorBase&lt;S,tensor_rs::OwnedData&lt;Dtype&gt;&gt;&gt;::from_vec (6 samples, 0.04%)</title><rect x="28.9888%" y="181" width="0.0446%" height="15" fill="rgb(220,39,43)" fg:x="3899" fg:w="6"/><text x="29.2388%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.03%)</title><rect x="29.0037%" y="165" width="0.0297%" height="15" fill="rgb(229,68,48)" fg:x="3901" fg:w="4"/><text x="29.2537%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.01%)</title><rect x="29.0186%" y="149" width="0.0149%" height="15" fill="rgb(252,8,32)" fg:x="3903" fg:w="2"/><text x="29.2686%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (3 samples, 0.02%)</title><rect x="29.3755%" y="101" width="0.0223%" height="15" fill="rgb(223,20,43)" fg:x="3951" fg:w="3"/><text x="29.6255%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (9 samples, 0.07%)</title><rect x="29.3457%" y="133" width="0.0669%" height="15" fill="rgb(229,81,49)" fg:x="3947" fg:w="9"/><text x="29.5957%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (8 samples, 0.06%)</title><rect x="29.3532%" y="117" width="0.0595%" height="15" fill="rgb(236,28,36)" fg:x="3948" fg:w="8"/><text x="29.6032%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (2 samples, 0.01%)</title><rect x="29.3978%" y="101" width="0.0149%" height="15" fill="rgb(249,185,26)" fg:x="3954" fg:w="2"/><text x="29.6478%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (17 samples, 0.13%)</title><rect x="29.3457%" y="165" width="0.1264%" height="15" fill="rgb(249,174,33)" fg:x="3947" fg:w="17"/><text x="29.5957%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (17 samples, 0.13%)</title><rect x="29.3457%" y="149" width="0.1264%" height="15" fill="rgb(233,201,37)" fg:x="3947" fg:w="17"/><text x="29.5957%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (8 samples, 0.06%)</title><rect x="29.4126%" y="133" width="0.0595%" height="15" fill="rgb(221,78,26)" fg:x="3956" fg:w="8"/><text x="29.6626%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (6 samples, 0.04%)</title><rect x="29.4275%" y="117" width="0.0446%" height="15" fill="rgb(250,127,30)" fg:x="3958" fg:w="6"/><text x="29.6775%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (3 samples, 0.02%)</title><rect x="29.4498%" y="101" width="0.0223%" height="15" fill="rgb(230,49,44)" fg:x="3961" fg:w="3"/><text x="29.6998%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (5 samples, 0.04%)</title><rect x="29.4721%" y="165" width="0.0372%" height="15" fill="rgb(229,67,23)" fg:x="3964" fg:w="5"/><text x="29.7221%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (3 samples, 0.02%)</title><rect x="29.4870%" y="149" width="0.0223%" height="15" fill="rgb(249,83,47)" fg:x="3966" fg:w="3"/><text x="29.7370%" y="159.50"></text></g><g><title>nn`&lt;tensor_rs::mnist::mnist::MnistData as tensor_rs::mnist::Dataloader&gt;::get_by_idx (88 samples, 0.65%)</title><rect x="28.8848%" y="197" width="0.6543%" height="15" fill="rgb(215,43,3)" fg:x="3885" fg:w="88"/><text x="29.1348%" y="207.50"></text></g><g><title>nn`tensor_rs::mnist::mnist::MnistData::get_image_nn_input (68 samples, 0.51%)</title><rect x="29.0335%" y="181" width="0.5056%" height="15" fill="rgb(238,154,13)" fg:x="3905" fg:w="68"/><text x="29.2835%" y="191.50"></text></g><g><title>nn`tensor_rs::impl_methods::_&lt;impl tensor_rs::TensorBase&lt;S,tensor_rs::OwnedData&lt;Dtype&gt;&gt;&gt;::from_vec (2 samples, 0.01%)</title><rect x="29.5242%" y="165" width="0.0149%" height="15" fill="rgb(219,56,2)" fg:x="3971" fg:w="2"/><text x="29.7742%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.01%)</title><rect x="29.5242%" y="149" width="0.0149%" height="15" fill="rgb(233,0,4)" fg:x="3971" fg:w="2"/><text x="29.7742%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.01%)</title><rect x="29.5242%" y="133" width="0.0149%" height="15" fill="rgb(235,30,7)" fg:x="3971" fg:w="2"/><text x="29.7742%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.01%)</title><rect x="29.5242%" y="117" width="0.0149%" height="15" fill="rgb(250,79,13)" fg:x="3971" fg:w="2"/><text x="29.7742%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (4 samples, 0.03%)</title><rect x="29.5390%" y="133" width="0.0297%" height="15" fill="rgb(211,146,34)" fg:x="3973" fg:w="4"/><text x="29.7890%" y="143.50"></text></g><g><title>nn`&lt;tensor_rs::mnist::mnist::MnistData as tensor_rs::mnist::Dataloader&gt;::get_batch (96 samples, 0.71%)</title><rect x="28.8625%" y="213" width="0.7138%" height="15" fill="rgb(228,22,38)" fg:x="3882" fg:w="96"/><text x="29.1125%" y="223.50"></text></g><g><title>nn`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.04%)</title><rect x="29.5390%" y="197" width="0.0372%" height="15" fill="rgb(235,168,5)" fg:x="3973" fg:w="5"/><text x="29.7890%" y="207.50"></text></g><g><title>nn`alloc::raw_vec::finish_grow (5 samples, 0.04%)</title><rect x="29.5390%" y="181" width="0.0372%" height="15" fill="rgb(221,155,16)" fg:x="3973" fg:w="5"/><text x="29.7890%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (5 samples, 0.04%)</title><rect x="29.5390%" y="165" width="0.0372%" height="15" fill="rgb(215,215,53)" fg:x="3973" fg:w="5"/><text x="29.7890%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (5 samples, 0.04%)</title><rect x="29.5390%" y="149" width="0.0372%" height="15" fill="rgb(223,4,10)" fg:x="3973" fg:w="5"/><text x="29.7890%" y="159.50"></text></g><g><title>nn`&lt;tensor_rs::unique_id::UniqueId as core::hash::Hash&gt;::hash (2 samples, 0.01%)</title><rect x="29.5762%" y="213" width="0.0149%" height="15" fill="rgb(234,103,6)" fg:x="3978" fg:w="2"/><text x="29.8262%" y="223.50"></text></g><g><title>nn`DYLD-STUB$$free (2 samples, 0.01%)</title><rect x="29.5911%" y="213" width="0.0149%" height="15" fill="rgb(227,97,0)" fg:x="3980" fg:w="2"/><text x="29.8411%" y="223.50"></text></g><g><title>nn`DYLD-STUB$$malloc (3 samples, 0.02%)</title><rect x="29.6059%" y="213" width="0.0223%" height="15" fill="rgb(234,150,53)" fg:x="3982" fg:w="3"/><text x="29.8559%" y="223.50"></text></g><g><title>nn`DYLD-STUB$$memset_pattern16 (3 samples, 0.02%)</title><rect x="29.6283%" y="213" width="0.0223%" height="15" fill="rgb(228,201,54)" fg:x="3985" fg:w="3"/><text x="29.8783%" y="223.50"></text></g><g><title>nn`__rdl_alloc (3 samples, 0.02%)</title><rect x="29.6506%" y="213" width="0.0223%" height="15" fill="rgb(222,22,37)" fg:x="3988" fg:w="3"/><text x="29.9006%" y="223.50"></text></g><g><title>nn`alloc::vec::from_elem (35 samples, 0.26%)</title><rect x="29.6729%" y="213" width="0.2602%" height="15" fill="rgb(237,53,32)" fg:x="3991" fg:w="35"/><text x="29.9229%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (34 samples, 0.25%)</title><rect x="29.6803%" y="197" width="0.2528%" height="15" fill="rgb(233,25,53)" fg:x="3992" fg:w="34"/><text x="29.9303%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (33 samples, 0.25%)</title><rect x="29.6877%" y="181" width="0.2454%" height="15" fill="rgb(210,40,34)" fg:x="3993" fg:w="33"/><text x="29.9377%" y="191.50"></text></g><g><title>libsystem_platform.dylib`__bzero (32 samples, 0.24%)</title><rect x="29.6952%" y="165" width="0.2379%" height="15" fill="rgb(241,220,44)" fg:x="3994" fg:w="32"/><text x="29.9452%" y="175.50"></text></g><g><title>nn`core::hash::BuildHasher::hash_one (5 samples, 0.04%)</title><rect x="29.9331%" y="213" width="0.0372%" height="15" fill="rgb(235,28,35)" fg:x="4026" fg:w="5"/><text x="30.1831%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (3 samples, 0.02%)</title><rect x="30.0223%" y="149" width="0.0223%" height="15" fill="rgb(210,56,17)" fg:x="4038" fg:w="3"/><text x="30.2723%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (10 samples, 0.07%)</title><rect x="29.9777%" y="165" width="0.0743%" height="15" fill="rgb(224,130,29)" fg:x="4032" fg:w="10"/><text x="30.2277%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_small (5 samples, 0.04%)</title><rect x="30.0520%" y="165" width="0.0372%" height="15" fill="rgb(235,212,8)" fg:x="4042" fg:w="5"/><text x="30.3020%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (3 samples, 0.02%)</title><rect x="30.0669%" y="149" width="0.0223%" height="15" fill="rgb(223,33,50)" fg:x="4044" fg:w="3"/><text x="30.3169%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (3 samples, 0.02%)</title><rect x="30.0892%" y="165" width="0.0223%" height="15" fill="rgb(219,149,13)" fg:x="4047" fg:w="3"/><text x="30.3392%" y="175.50"></text></g><g><title>nn`core::ptr::drop_in_place&lt;(tensor_rs::TensorBase&lt;[usize (21 samples, 0.16%)</title><rect x="29.9703%" y="213" width="0.1561%" height="15" fill="rgb(250,156,29)" fg:x="4031" fg:w="21"/><text x="30.2203%" y="223.50"></text></g><g><title> 2]&gt;,tensor_rs::TensorBase&lt;[usize (21 samples, 0.16%)</title><rect x="29.9703%" y="197" width="0.1561%" height="15" fill="rgb(216,193,19)" fg:x="4031" fg:w="21"/><text x="30.2203%" y="207.50"></text></g><g><title> 2]&gt;)&gt; (21 samples, 0.16%)</title><rect x="29.9703%" y="181" width="0.1561%" height="15" fill="rgb(216,135,14)" fg:x="4031" fg:w="21"/><text x="30.2203%" y="191.50"></text></g><g><title> 0]&gt;&gt; (5 samples, 0.04%)</title><rect x="30.1264%" y="197" width="0.0372%" height="15" fill="rgb(241,47,5)" fg:x="4052" fg:w="5"/><text x="30.3764%" y="207.50"></text></g><g><title>nn`core::ptr::drop_in_place&lt;tensor_rs::TensorBase&lt;[usize (7 samples, 0.05%)</title><rect x="30.1264%" y="213" width="0.0520%" height="15" fill="rgb(233,42,35)" fg:x="4052" fg:w="7"/><text x="30.3764%" y="223.50"></text></g><g><title> 2]&gt;&gt; (2 samples, 0.01%)</title><rect x="30.1636%" y="197" width="0.0149%" height="15" fill="rgb(231,13,6)" fg:x="4057" fg:w="2"/><text x="30.4136%" y="207.50"></text></g><g><title>nn`matrixmultiply::gemm::sgemm (6 samples, 0.04%)</title><rect x="30.1784%" y="213" width="0.0446%" height="15" fill="rgb(207,181,40)" fg:x="4059" fg:w="6"/><text x="30.4284%" y="223.50"></text></g><g><title>nn`std::sys::unix::time::inner::_&lt;impl std::sys::unix::time::Timespec&gt;::now (12 samples, 0.09%)</title><rect x="30.2230%" y="213" width="0.0892%" height="15" fill="rgb(254,173,49)" fg:x="4065" fg:w="12"/><text x="30.4730%" y="223.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (12 samples, 0.09%)</title><rect x="30.2230%" y="197" width="0.0892%" height="15" fill="rgb(221,1,38)" fg:x="4065" fg:w="12"/><text x="30.4730%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (11 samples, 0.08%)</title><rect x="30.2305%" y="181" width="0.0818%" height="15" fill="rgb(206,124,46)" fg:x="4066" fg:w="11"/><text x="30.4805%" y="191.50"></text></g><g><title>nn`tensor_rs::gradient::BackwardOps::add_backward_op (2 samples, 0.01%)</title><rect x="30.3123%" y="213" width="0.0149%" height="15" fill="rgb(249,21,11)" fg:x="4077" fg:w="2"/><text x="30.5623%" y="223.50"></text></g><g><title>nn`tensor_rs::impl_binary_ops::_&lt;impl core::ops::arith::AddAssign&lt;&amp;tensor_rs::TensorBase&lt;S,B&gt;&gt; for tensor_rs::TensorBase&lt;S,A&gt;&gt;::add_assign (928 samples, 6.90%)</title><rect x="30.3346%" y="213" width="6.8996%" height="15" fill="rgb(222,201,40)" fg:x="4080" fg:w="928"/><text x="30.5846%" y="223.50">nn`tensor..</text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (4 samples, 0.03%)</title><rect x="37.2937%" y="181" width="0.0297%" height="15" fill="rgb(235,61,29)" fg:x="5016" fg:w="4"/><text x="37.5437%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (8 samples, 0.06%)</title><rect x="37.2714%" y="197" width="0.0595%" height="15" fill="rgb(219,207,3)" fg:x="5013" fg:w="8"/><text x="37.5214%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (3 samples, 0.02%)</title><rect x="37.3309%" y="197" width="0.0223%" height="15" fill="rgb(222,56,46)" fg:x="5021" fg:w="3"/><text x="37.5809%" y="207.50"></text></g><g><title>nn`tensor_rs::impl_binary_ops::_&lt;impl core::ops::arith::AddAssign&lt;tensor_rs::TensorBase&lt;S,B&gt;&gt; for tensor_rs::TensorBase&lt;S,A&gt;&gt;::add_assign (17 samples, 0.13%)</title><rect x="37.2342%" y="213" width="0.1264%" height="15" fill="rgb(239,76,54)" fg:x="5008" fg:w="17"/><text x="37.4842%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.01%)</title><rect x="38.2082%" y="197" width="0.0149%" height="15" fill="rgb(231,124,27)" fg:x="5139" fg:w="2"/><text x="38.4582%" y="207.50"></text></g><g><title>nn`tensor_rs::impl_binary_ops::_&lt;impl core::ops::arith::SubAssign&lt;tensor_rs::TensorBase&lt;S,B&gt;&gt; for tensor_rs::TensorBase&lt;S,A&gt;&gt;::sub_assign (116 samples, 0.86%)</title><rect x="37.3680%" y="213" width="0.8625%" height="15" fill="rgb(249,195,6)" fg:x="5026" fg:w="116"/><text x="37.6180%" y="223.50"></text></g><g><title>nn`tensor_rs::impl_methods::_&lt;impl tensor_rs::TensorBase&lt;S,A&gt;&gt;::put_backward_ops (3 samples, 0.02%)</title><rect x="38.2305%" y="213" width="0.0223%" height="15" fill="rgb(237,174,47)" fg:x="5142" fg:w="3"/><text x="38.4805%" y="223.50"></text></g><g><title>nn`tensor_rs::impl_methods::_&lt;impl tensor_rs::TensorBase&lt;S,tensor_rs::OwnedData&lt;Dtype&gt;&gt;&gt;::from_vec (4 samples, 0.03%)</title><rect x="38.2528%" y="213" width="0.0297%" height="15" fill="rgb(206,201,31)" fg:x="5145" fg:w="4"/><text x="38.5028%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (6 samples, 0.04%)</title><rect x="38.2900%" y="181" width="0.0446%" height="15" fill="rgb(231,57,52)" fg:x="5150" fg:w="6"/><text x="38.5400%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.03%)</title><rect x="38.3048%" y="165" width="0.0297%" height="15" fill="rgb(248,177,22)" fg:x="5152" fg:w="4"/><text x="38.5548%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.02%)</title><rect x="38.3123%" y="149" width="0.0223%" height="15" fill="rgb(215,211,37)" fg:x="5153" fg:w="3"/><text x="38.5623%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (2 samples, 0.01%)</title><rect x="38.3346%" y="181" width="0.0149%" height="15" fill="rgb(241,128,51)" fg:x="5156" fg:w="2"/><text x="38.5846%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (2 samples, 0.01%)</title><rect x="38.3494%" y="181" width="0.0149%" height="15" fill="rgb(227,165,31)" fg:x="5158" fg:w="2"/><text x="38.5994%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (2 samples, 0.01%)</title><rect x="38.3643%" y="181" width="0.0149%" height="15" fill="rgb(228,167,24)" fg:x="5160" fg:w="2"/><text x="38.6143%" y="191.50"></text></g><g><title>nn`DYLD-STUB$$free (4 samples, 0.03%)</title><rect x="38.3866%" y="181" width="0.0297%" height="15" fill="rgb(228,143,12)" fg:x="5163" fg:w="4"/><text x="38.6366%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (5 samples, 0.04%)</title><rect x="38.4535%" y="165" width="0.0372%" height="15" fill="rgb(249,149,8)" fg:x="5172" fg:w="5"/><text x="38.7035%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (37 samples, 0.28%)</title><rect x="38.4907%" y="165" width="0.2751%" height="15" fill="rgb(243,35,44)" fg:x="5177" fg:w="37"/><text x="38.7407%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (17 samples, 0.13%)</title><rect x="38.6394%" y="149" width="0.1264%" height="15" fill="rgb(246,89,9)" fg:x="5197" fg:w="17"/><text x="38.8894%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (4 samples, 0.03%)</title><rect x="38.7658%" y="165" width="0.0297%" height="15" fill="rgb(233,213,13)" fg:x="5214" fg:w="4"/><text x="39.0158%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (19 samples, 0.14%)</title><rect x="38.7955%" y="165" width="0.1413%" height="15" fill="rgb(233,141,41)" fg:x="5218" fg:w="19"/><text x="39.0455%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset_pattern16 (2 samples, 0.01%)</title><rect x="38.9442%" y="165" width="0.0149%" height="15" fill="rgb(239,167,4)" fg:x="5238" fg:w="2"/><text x="39.1942%" y="175.50"></text></g><g><title>nn`DYLD-STUB$$free (4 samples, 0.03%)</title><rect x="38.9740%" y="165" width="0.0297%" height="15" fill="rgb(209,217,16)" fg:x="5242" fg:w="4"/><text x="39.2240%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.03%)</title><rect x="39.1152%" y="149" width="0.0297%" height="15" fill="rgb(219,88,35)" fg:x="5261" fg:w="4"/><text x="39.3652%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (2 samples, 0.01%)</title><rect x="39.1450%" y="149" width="0.0149%" height="15" fill="rgb(220,193,23)" fg:x="5265" fg:w="2"/><text x="39.3950%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (7 samples, 0.05%)</title><rect x="39.2862%" y="133" width="0.0520%" height="15" fill="rgb(230,90,52)" fg:x="5284" fg:w="7"/><text x="39.5362%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (25 samples, 0.19%)</title><rect x="39.1599%" y="149" width="0.1859%" height="15" fill="rgb(252,106,19)" fg:x="5267" fg:w="25"/><text x="39.4099%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (6 samples, 0.04%)</title><rect x="39.3457%" y="133" width="0.0446%" height="15" fill="rgb(206,74,20)" fg:x="5292" fg:w="6"/><text x="39.5957%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_small (8 samples, 0.06%)</title><rect x="39.3457%" y="149" width="0.0595%" height="15" fill="rgb(230,138,44)" fg:x="5292" fg:w="8"/><text x="39.5957%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (2 samples, 0.01%)</title><rect x="39.3903%" y="133" width="0.0149%" height="15" fill="rgb(235,182,43)" fg:x="5298" fg:w="2"/><text x="39.6403%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (6 samples, 0.04%)</title><rect x="39.4052%" y="149" width="0.0446%" height="15" fill="rgb(242,16,51)" fg:x="5300" fg:w="6"/><text x="39.6552%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (12 samples, 0.09%)</title><rect x="39.4498%" y="149" width="0.0892%" height="15" fill="rgb(248,9,4)" fg:x="5306" fg:w="12"/><text x="39.6998%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (2 samples, 0.01%)</title><rect x="39.5465%" y="149" width="0.0149%" height="15" fill="rgb(210,31,22)" fg:x="5319" fg:w="2"/><text x="39.7965%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (3 samples, 0.02%)</title><rect x="39.5613%" y="149" width="0.0223%" height="15" fill="rgb(239,54,39)" fg:x="5321" fg:w="3"/><text x="39.8113%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset_pattern16 (14 samples, 0.10%)</title><rect x="39.5836%" y="149" width="0.1041%" height="15" fill="rgb(230,99,41)" fg:x="5324" fg:w="14"/><text x="39.8336%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.01%)</title><rect x="39.6952%" y="133" width="0.0149%" height="15" fill="rgb(253,106,12)" fg:x="5339" fg:w="2"/><text x="39.9452%" y="143.50"></text></g><g><title>nn`&lt;tensor_rs::TensorBase&lt;S,tensor_rs::OwnedData&lt;Dtype&gt;&gt; as tensor_rs::impl_constructors::TensorConstructors&lt;Dtype&gt;&gt;::ones (9 samples, 0.07%)</title><rect x="39.6952%" y="149" width="0.0669%" height="15" fill="rgb(213,46,41)" fg:x="5339" fg:w="9"/><text x="39.9452%" y="159.50"></text></g><g><title>nn`tensor_rs::impl_methods::_&lt;impl tensor_rs::TensorBase&lt;S,tensor_rs::OwnedData&lt;Dtype&gt;&gt;&gt;::from_vec (6 samples, 0.04%)</title><rect x="39.7175%" y="133" width="0.0446%" height="15" fill="rgb(215,133,35)" fg:x="5342" fg:w="6"/><text x="39.9675%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (6 samples, 0.04%)</title><rect x="39.7175%" y="117" width="0.0446%" height="15" fill="rgb(213,28,5)" fg:x="5342" fg:w="6"/><text x="39.9675%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (5 samples, 0.04%)</title><rect x="39.7249%" y="101" width="0.0372%" height="15" fill="rgb(215,77,49)" fg:x="5343" fg:w="5"/><text x="39.9749%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.02%)</title><rect x="39.7398%" y="85" width="0.0223%" height="15" fill="rgb(248,100,22)" fg:x="5345" fg:w="3"/><text x="39.9898%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (4 samples, 0.03%)</title><rect x="39.7621%" y="101" width="0.0297%" height="15" fill="rgb(208,67,9)" fg:x="5348" fg:w="4"/><text x="40.0121%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (5 samples, 0.04%)</title><rect x="39.7621%" y="133" width="0.0372%" height="15" fill="rgb(219,133,21)" fg:x="5348" fg:w="5"/><text x="40.0121%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (5 samples, 0.04%)</title><rect x="39.7621%" y="117" width="0.0372%" height="15" fill="rgb(246,46,29)" fg:x="5348" fg:w="5"/><text x="40.0121%" y="127.50"></text></g><g><title>nn`&lt;tensor_rs::TensorBase&lt;S,tensor_rs::OwnedData&lt;Dtype&gt;&gt; as tensor_rs::impl_constructors::TensorConstructors&lt;Dtype&gt;&gt;::zeros (8 samples, 0.06%)</title><rect x="39.7621%" y="149" width="0.0595%" height="15" fill="rgb(246,185,52)" fg:x="5348" fg:w="8"/><text x="40.0121%" y="159.50"></text></g><g><title>nn`tensor_rs::impl_methods::_&lt;impl tensor_rs::TensorBase&lt;S,tensor_rs::OwnedData&lt;Dtype&gt;&gt;&gt;::from_vec (2 samples, 0.01%)</title><rect x="39.8067%" y="133" width="0.0149%" height="15" fill="rgb(252,136,11)" fg:x="5354" fg:w="2"/><text x="40.0567%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.01%)</title><rect x="39.8067%" y="117" width="0.0149%" height="15" fill="rgb(219,138,53)" fg:x="5354" fg:w="2"/><text x="40.0567%" y="127.50"></text></g><g><title>nn`&lt;tensor_rs::unique_id::UniqueId as core::hash::Hash&gt;::hash (2 samples, 0.01%)</title><rect x="39.8216%" y="149" width="0.0149%" height="15" fill="rgb(211,51,23)" fg:x="5356" fg:w="2"/><text x="40.0716%" y="159.50"></text></g><g><title>nn`DYLD-STUB$$free (3 samples, 0.02%)</title><rect x="39.8439%" y="149" width="0.0223%" height="15" fill="rgb(247,221,28)" fg:x="5359" fg:w="3"/><text x="40.0939%" y="159.50"></text></g><g><title>nn`DYLD-STUB$$memset_pattern16 (6 samples, 0.04%)</title><rect x="39.8736%" y="149" width="0.0446%" height="15" fill="rgb(251,222,45)" fg:x="5363" fg:w="6"/><text x="40.1236%" y="159.50"></text></g><g><title>nn`__rdl_alloc (2 samples, 0.01%)</title><rect x="39.9182%" y="149" width="0.0149%" height="15" fill="rgb(217,162,53)" fg:x="5369" fg:w="2"/><text x="40.1682%" y="159.50"></text></g><g><title>nn`alloc::vec::from_elem (6 samples, 0.04%)</title><rect x="39.9405%" y="149" width="0.0446%" height="15" fill="rgb(229,93,14)" fg:x="5372" fg:w="6"/><text x="40.1905%" y="159.50"></text></g><g><title>nn`core::hash::BuildHasher::hash_one (2 samples, 0.01%)</title><rect x="39.9851%" y="149" width="0.0149%" height="15" fill="rgb(209,67,49)" fg:x="5378" fg:w="2"/><text x="40.2351%" y="159.50"></text></g><g><title>nn`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (8 samples, 0.06%)</title><rect x="40.0000%" y="149" width="0.0595%" height="15" fill="rgb(213,87,29)" fg:x="5380" fg:w="8"/><text x="40.2500%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.02%)</title><rect x="40.0372%" y="133" width="0.0223%" height="15" fill="rgb(205,151,52)" fg:x="5385" fg:w="3"/><text x="40.2872%" y="143.50"></text></g><g><title>nn`matrixmultiply::gemm::sgemm (13 samples, 0.10%)</title><rect x="40.0669%" y="149" width="0.0967%" height="15" fill="rgb(253,215,39)" fg:x="5389" fg:w="13"/><text x="40.3169%" y="159.50"></text></g><g><title>nn`&lt;tensor_rs::unique_id::UniqueId as core::hash::Hash&gt;::hash (4 samples, 0.03%)</title><rect x="40.2082%" y="133" width="0.0297%" height="15" fill="rgb(221,220,41)" fg:x="5408" fg:w="4"/><text x="40.4582%" y="143.50"></text></g><g><title>nn`tensor_rs::gradient::GradientMap::grad_by_id (18 samples, 0.13%)</title><rect x="40.1636%" y="149" width="0.1338%" height="15" fill="rgb(218,133,21)" fg:x="5402" fg:w="18"/><text x="40.4136%" y="159.50"></text></g><g><title>nn`core::hash::BuildHasher::hash_one (8 samples, 0.06%)</title><rect x="40.2379%" y="133" width="0.0595%" height="15" fill="rgb(221,193,43)" fg:x="5412" fg:w="8"/><text x="40.4879%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.02%)</title><rect x="40.8327%" y="117" width="0.0223%" height="15" fill="rgb(240,128,52)" fg:x="5492" fg:w="3"/><text x="41.0827%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (18 samples, 0.13%)</title><rect x="40.8922%" y="101" width="0.1338%" height="15" fill="rgb(253,114,12)" fg:x="5500" fg:w="18"/><text x="41.1422%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (8 samples, 0.06%)</title><rect x="40.9665%" y="85" width="0.0595%" height="15" fill="rgb(215,223,47)" fg:x="5510" fg:w="8"/><text x="41.2165%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (42 samples, 0.31%)</title><rect x="40.7286%" y="133" width="0.3123%" height="15" fill="rgb(248,225,23)" fg:x="5478" fg:w="42"/><text x="40.9786%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (25 samples, 0.19%)</title><rect x="40.8550%" y="117" width="0.1859%" height="15" fill="rgb(250,108,0)" fg:x="5495" fg:w="25"/><text x="41.1050%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.01%)</title><rect x="41.0260%" y="101" width="0.0149%" height="15" fill="rgb(228,208,7)" fg:x="5518" fg:w="2"/><text x="41.2760%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (6 samples, 0.04%)</title><rect x="41.0409%" y="133" width="0.0446%" height="15" fill="rgb(244,45,10)" fg:x="5520" fg:w="6"/><text x="41.2909%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (3 samples, 0.02%)</title><rect x="41.1078%" y="133" width="0.0223%" height="15" fill="rgb(207,125,25)" fg:x="5529" fg:w="3"/><text x="41.3578%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset_pattern16 (9 samples, 0.07%)</title><rect x="41.1301%" y="133" width="0.0669%" height="15" fill="rgb(210,195,18)" fg:x="5532" fg:w="9"/><text x="41.3801%" y="143.50"></text></g><g><title>nn`&lt;tensor_rs::unique_id::UniqueId as core::hash::Hash&gt;::hash (20 samples, 0.15%)</title><rect x="41.1970%" y="133" width="0.1487%" height="15" fill="rgb(249,80,12)" fg:x="5541" fg:w="20"/><text x="41.4470%" y="143.50"></text></g><g><title>nn`DYLD-STUB$$free (2 samples, 0.01%)</title><rect x="41.3532%" y="133" width="0.0149%" height="15" fill="rgb(221,65,9)" fg:x="5562" fg:w="2"/><text x="41.6032%" y="143.50"></text></g><g><title>nn`DYLD-STUB$$malloc (2 samples, 0.01%)</title><rect x="41.3680%" y="133" width="0.0149%" height="15" fill="rgb(235,49,36)" fg:x="5564" fg:w="2"/><text x="41.6180%" y="143.50"></text></g><g><title>nn`__rust_alloc (2 samples, 0.01%)</title><rect x="41.3978%" y="133" width="0.0149%" height="15" fill="rgb(225,32,20)" fg:x="5568" fg:w="2"/><text x="41.6478%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.02%)</title><rect x="41.5465%" y="101" width="0.0223%" height="15" fill="rgb(215,141,46)" fg:x="5588" fg:w="3"/><text x="41.7965%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (31 samples, 0.23%)</title><rect x="41.5985%" y="85" width="0.2305%" height="15" fill="rgb(250,160,47)" fg:x="5595" fg:w="31"/><text x="41.8485%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (13 samples, 0.10%)</title><rect x="41.7323%" y="69" width="0.0967%" height="15" fill="rgb(216,222,40)" fg:x="5613" fg:w="13"/><text x="41.9823%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (3 samples, 0.02%)</title><rect x="41.8290%" y="85" width="0.0223%" height="15" fill="rgb(234,217,39)" fg:x="5626" fg:w="3"/><text x="42.0790%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (43 samples, 0.32%)</title><rect x="41.5688%" y="101" width="0.3197%" height="15" fill="rgb(207,178,40)" fg:x="5591" fg:w="43"/><text x="41.8188%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (5 samples, 0.04%)</title><rect x="41.8513%" y="85" width="0.0372%" height="15" fill="rgb(221,136,13)" fg:x="5629" fg:w="5"/><text x="42.1013%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`medium_free_list_remove_ptr (2 samples, 0.01%)</title><rect x="41.9405%" y="53" width="0.0149%" height="15" fill="rgb(249,199,10)" fg:x="5641" fg:w="2"/><text x="42.1905%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`medium_malloc_should_clear (8 samples, 0.06%)</title><rect x="41.9033%" y="85" width="0.0595%" height="15" fill="rgb(249,222,13)" fg:x="5636" fg:w="8"/><text x="42.1533%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`medium_malloc_from_free_list (5 samples, 0.04%)</title><rect x="41.9257%" y="69" width="0.0372%" height="15" fill="rgb(244,185,38)" fg:x="5639" fg:w="5"/><text x="42.1757%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (5 samples, 0.04%)</title><rect x="42.0149%" y="53" width="0.0372%" height="15" fill="rgb(236,202,9)" fg:x="5651" fg:w="5"/><text x="42.2649%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (13 samples, 0.10%)</title><rect x="41.9703%" y="85" width="0.0967%" height="15" fill="rgb(250,229,37)" fg:x="5645" fg:w="13"/><text x="42.2203%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (10 samples, 0.07%)</title><rect x="41.9926%" y="69" width="0.0743%" height="15" fill="rgb(206,174,23)" fg:x="5648" fg:w="10"/><text x="42.2426%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (2 samples, 0.01%)</title><rect x="42.0520%" y="53" width="0.0149%" height="15" fill="rgb(211,33,43)" fg:x="5656" fg:w="2"/><text x="42.3020%" y="63.50"></text></g><g><title>libsystem_platform.dylib`__bzero (202 samples, 1.50%)</title><rect x="42.0669%" y="85" width="1.5019%" height="15" fill="rgb(245,58,50)" fg:x="5658" fg:w="202"/><text x="42.3169%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (312 samples, 2.32%)</title><rect x="41.4572%" y="117" width="2.3197%" height="15" fill="rgb(244,68,36)" fg:x="5576" fg:w="312"/><text x="41.7072%" y="127.50">l..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (253 samples, 1.88%)</title><rect x="41.8959%" y="101" width="1.8810%" height="15" fill="rgb(232,229,15)" fg:x="5635" fg:w="253"/><text x="42.1459%" y="111.50">l..</text></g><g><title>libsystem_platform.dylib`_platform_memset (28 samples, 0.21%)</title><rect x="43.5688%" y="85" width="0.2082%" height="15" fill="rgb(254,30,23)" fg:x="5860" fg:w="28"/><text x="43.8188%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_calloc (2 samples, 0.01%)</title><rect x="43.7770%" y="117" width="0.0149%" height="15" fill="rgb(235,160,14)" fg:x="5888" fg:w="2"/><text x="44.0270%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (2 samples, 0.01%)</title><rect x="43.7918%" y="117" width="0.0149%" height="15" fill="rgb(212,155,44)" fg:x="5890" fg:w="2"/><text x="44.0418%" y="127.50"></text></g><g><title>nn`alloc::vec::from_elem (325 samples, 2.42%)</title><rect x="41.4126%" y="133" width="2.4164%" height="15" fill="rgb(226,2,50)" fg:x="5570" fg:w="325"/><text x="41.6626%" y="143.50">nn..</text></g><g><title>nn`__rdl_alloc_zeroed (2 samples, 0.01%)</title><rect x="43.8141%" y="117" width="0.0149%" height="15" fill="rgb(234,177,6)" fg:x="5893" fg:w="2"/><text x="44.0641%" y="127.50"></text></g><g><title>nn`core::hash::BuildHasher::hash_one (16 samples, 0.12%)</title><rect x="43.8290%" y="133" width="0.1190%" height="15" fill="rgb(217,24,9)" fg:x="5895" fg:w="16"/><text x="44.0790%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.02%)</title><rect x="44.1933%" y="101" width="0.0223%" height="15" fill="rgb(220,13,46)" fg:x="5944" fg:w="3"/><text x="44.4433%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (17 samples, 0.13%)</title><rect x="44.1561%" y="117" width="0.1264%" height="15" fill="rgb(239,221,27)" fg:x="5939" fg:w="17"/><text x="44.4061%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (9 samples, 0.07%)</title><rect x="44.2156%" y="101" width="0.0669%" height="15" fill="rgb(222,198,25)" fg:x="5947" fg:w="9"/><text x="44.4656%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (9 samples, 0.07%)</title><rect x="44.2156%" y="85" width="0.0669%" height="15" fill="rgb(211,99,13)" fg:x="5947" fg:w="9"/><text x="44.4656%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (6 samples, 0.04%)</title><rect x="44.2379%" y="69" width="0.0446%" height="15" fill="rgb(232,111,31)" fg:x="5950" fg:w="6"/><text x="44.4879%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (3 samples, 0.02%)</title><rect x="44.2602%" y="53" width="0.0223%" height="15" fill="rgb(245,82,37)" fg:x="5953" fg:w="3"/><text x="44.5102%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (5 samples, 0.04%)</title><rect x="44.3420%" y="101" width="0.0372%" height="15" fill="rgb(227,149,46)" fg:x="5964" fg:w="5"/><text x="44.5920%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free (15 samples, 0.11%)</title><rect x="44.2825%" y="117" width="0.1115%" height="15" fill="rgb(218,36,50)" fg:x="5956" fg:w="15"/><text x="44.5325%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (2 samples, 0.01%)</title><rect x="44.3792%" y="101" width="0.0149%" height="15" fill="rgb(226,80,48)" fg:x="5969" fg:w="2"/><text x="44.6292%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (2 samples, 0.01%)</title><rect x="44.3792%" y="85" width="0.0149%" height="15" fill="rgb(238,224,15)" fg:x="5969" fg:w="2"/><text x="44.6292%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (3 samples, 0.02%)</title><rect x="44.3941%" y="117" width="0.0223%" height="15" fill="rgb(241,136,10)" fg:x="5971" fg:w="3"/><text x="44.6441%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2 samples, 0.01%)</title><rect x="44.4015%" y="101" width="0.0149%" height="15" fill="rgb(208,32,45)" fg:x="5972" fg:w="2"/><text x="44.6515%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.01%)</title><rect x="44.4238%" y="117" width="0.0149%" height="15" fill="rgb(207,135,9)" fg:x="5975" fg:w="2"/><text x="44.6738%" y="127.50"></text></g><g><title>nn`&lt;tensor_rs::unique_id::UniqueId as core::hash::Hash&gt;::hash (14 samples, 0.10%)</title><rect x="44.4535%" y="117" width="0.1041%" height="15" fill="rgb(206,86,44)" fg:x="5979" fg:w="14"/><text x="44.7035%" y="127.50"></text></g><g><title>nn`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (116 samples, 0.86%)</title><rect x="43.9480%" y="133" width="0.8625%" height="15" fill="rgb(245,177,15)" fg:x="5911" fg:w="116"/><text x="44.1980%" y="143.50"></text></g><g><title>nn`core::hash::BuildHasher::hash_one (34 samples, 0.25%)</title><rect x="44.5576%" y="117" width="0.2528%" height="15" fill="rgb(206,64,50)" fg:x="5993" fg:w="34"/><text x="44.8076%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (5 samples, 0.04%)</title><rect x="45.0632%" y="101" width="0.0372%" height="15" fill="rgb(234,36,40)" fg:x="6061" fg:w="5"/><text x="45.3132%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (27 samples, 0.20%)</title><rect x="45.1450%" y="85" width="0.2007%" height="15" fill="rgb(213,64,8)" fg:x="6072" fg:w="27"/><text x="45.3950%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (6 samples, 0.04%)</title><rect x="45.3011%" y="69" width="0.0446%" height="15" fill="rgb(210,75,36)" fg:x="6093" fg:w="6"/><text x="45.5511%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (56 samples, 0.42%)</title><rect x="44.9591%" y="117" width="0.4164%" height="15" fill="rgb(229,88,21)" fg:x="6047" fg:w="56"/><text x="45.2091%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (37 samples, 0.28%)</title><rect x="45.1004%" y="101" width="0.2751%" height="15" fill="rgb(252,204,47)" fg:x="6066" fg:w="37"/><text x="45.3504%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (4 samples, 0.03%)</title><rect x="45.3457%" y="85" width="0.0297%" height="15" fill="rgb(208,77,27)" fg:x="6099" fg:w="4"/><text x="45.5957%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (2 samples, 0.01%)</title><rect x="45.3755%" y="117" width="0.0149%" height="15" fill="rgb(221,76,26)" fg:x="6103" fg:w="2"/><text x="45.6255%" y="127.50"></text></g><g><title>nn`tensor_rs::gradient::GradientMap::mut_grad_by_id (686 samples, 5.10%)</title><rect x="40.2974%" y="149" width="5.1004%" height="15" fill="rgb(225,139,18)" fg:x="5420" fg:w="686"/><text x="40.5474%" y="159.50">nn`ten..</text></g><g><title>nn`tensor_rs::impl_methods::_&lt;impl tensor_rs::TensorBase&lt;S,tensor_rs::OwnedData&lt;Dtype&gt;&gt;&gt;::from_vec (79 samples, 0.59%)</title><rect x="44.8104%" y="133" width="0.5874%" height="15" fill="rgb(230,137,11)" fg:x="6027" fg:w="79"/><text x="45.0604%" y="143.50"></text></g><g><title>nn`tensor_rs::impl_binary_ops::_&lt;impl core::ops::arith::AddAssign&lt;&amp;tensor_rs::TensorBase&lt;S,B&gt;&gt; for tensor_rs::TensorBase&lt;S,A&gt;&gt;::add_assign (46 samples, 0.34%)</title><rect x="45.3978%" y="149" width="0.3420%" height="15" fill="rgb(212,28,1)" fg:x="6106" fg:w="46"/><text x="45.6478%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`medium_size (2 samples, 0.01%)</title><rect x="53.5539%" y="117" width="0.0149%" height="15" fill="rgb(248,164,17)" fg:x="7203" fg:w="2"/><text x="53.8039%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (23 samples, 0.17%)</title><rect x="53.5688%" y="117" width="0.1710%" height="15" fill="rgb(222,171,42)" fg:x="7205" fg:w="23"/><text x="53.8188%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (7 samples, 0.05%)</title><rect x="53.7398%" y="117" width="0.0520%" height="15" fill="rgb(243,84,45)" fg:x="7228" fg:w="7"/><text x="53.9898%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_size (2 samples, 0.01%)</title><rect x="53.7918%" y="117" width="0.0149%" height="15" fill="rgb(252,49,23)" fg:x="7235" fg:w="2"/><text x="54.0418%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free (60 samples, 0.45%)</title><rect x="53.3829%" y="133" width="0.4461%" height="15" fill="rgb(215,19,7)" fg:x="7180" fg:w="60"/><text x="53.6329%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (3 samples, 0.02%)</title><rect x="53.8067%" y="117" width="0.0223%" height="15" fill="rgb(238,81,41)" fg:x="7237" fg:w="3"/><text x="54.0567%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (16 samples, 0.12%)</title><rect x="53.8290%" y="133" width="0.1190%" height="15" fill="rgb(210,199,37)" fg:x="7240" fg:w="16"/><text x="54.0790%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (13 samples, 0.10%)</title><rect x="53.9554%" y="133" width="0.0967%" height="15" fill="rgb(244,192,49)" fg:x="7257" fg:w="13"/><text x="54.2054%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (3 samples, 0.02%)</title><rect x="54.0520%" y="133" width="0.0223%" height="15" fill="rgb(226,211,11)" fg:x="7270" fg:w="3"/><text x="54.3020%" y="143.50"></text></g><g><title>nn`tensor_rs::impl_binary_ops::_&lt;impl core::ops::arith::AddAssign&lt;tensor_rs::TensorBase&lt;S,B&gt;&gt; for tensor_rs::TensorBase&lt;S,A&gt;&gt;::add_assign (1,123 samples, 8.35%)</title><rect x="45.7398%" y="149" width="8.3494%" height="15" fill="rgb(236,162,54)" fg:x="6152" fg:w="1123"/><text x="45.9898%" y="159.50">nn`tensor_rs..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (7 samples, 0.05%)</title><rect x="54.1413%" y="133" width="0.0520%" height="15" fill="rgb(220,229,9)" fg:x="7282" fg:w="7"/><text x="54.3913%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.03%)</title><rect x="54.1636%" y="117" width="0.0297%" height="15" fill="rgb(250,87,22)" fg:x="7285" fg:w="4"/><text x="54.4136%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (4 samples, 0.03%)</title><rect x="54.1636%" y="101" width="0.0297%" height="15" fill="rgb(239,43,17)" fg:x="7285" fg:w="4"/><text x="54.4136%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.01%)</title><rect x="54.1784%" y="85" width="0.0149%" height="15" fill="rgb(231,177,25)" fg:x="7287" fg:w="2"/><text x="54.4284%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset_pattern16 (2 samples, 0.01%)</title><rect x="54.1933%" y="133" width="0.0149%" height="15" fill="rgb(219,179,1)" fg:x="7289" fg:w="2"/><text x="54.4433%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (5 samples, 0.04%)</title><rect x="54.2528%" y="85" width="0.0372%" height="15" fill="rgb(238,219,53)" fg:x="7297" fg:w="5"/><text x="54.5028%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (10 samples, 0.07%)</title><rect x="54.2305%" y="117" width="0.0743%" height="15" fill="rgb(232,167,36)" fg:x="7294" fg:w="10"/><text x="54.4805%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (8 samples, 0.06%)</title><rect x="54.2454%" y="101" width="0.0595%" height="15" fill="rgb(244,19,51)" fg:x="7296" fg:w="8"/><text x="54.4954%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.01%)</title><rect x="54.2900%" y="85" width="0.0149%" height="15" fill="rgb(224,6,22)" fg:x="7302" fg:w="2"/><text x="54.5400%" y="95.50"></text></g><g><title>nn`tensor_rs::impl_methods::_&lt;impl tensor_rs::TensorBase&lt;S,tensor_rs::OwnedData&lt;Dtype&gt;&gt;&gt;::from_vec (12 samples, 0.09%)</title><rect x="54.2230%" y="133" width="0.0892%" height="15" fill="rgb(224,145,5)" fg:x="7293" fg:w="12"/><text x="54.4730%" y="143.50"></text></g><g><title>nn`tensor_rs::impl_binary_ops::_&lt;impl core::ops::arith::Mul&lt;&amp;tensor_rs::TensorBase&lt;S,A&gt;&gt; for &amp;tensor_rs::TensorBase&lt;S,B&gt;&gt;::mul (31 samples, 0.23%)</title><rect x="54.0892%" y="149" width="0.2305%" height="15" fill="rgb(234,130,49)" fg:x="7275" fg:w="31"/><text x="54.3392%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (6 samples, 0.04%)</title><rect x="54.4758%" y="133" width="0.0446%" height="15" fill="rgb(254,6,2)" fg:x="7327" fg:w="6"/><text x="54.7258%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.03%)</title><rect x="54.4907%" y="117" width="0.0297%" height="15" fill="rgb(208,96,46)" fg:x="7329" fg:w="4"/><text x="54.7407%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.01%)</title><rect x="54.5056%" y="101" width="0.0149%" height="15" fill="rgb(239,3,39)" fg:x="7331" fg:w="2"/><text x="54.7556%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free (14 samples, 0.10%)</title><rect x="54.5204%" y="133" width="0.1041%" height="15" fill="rgb(233,210,1)" fg:x="7333" fg:w="14"/><text x="54.7704%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (5 samples, 0.04%)</title><rect x="54.5874%" y="117" width="0.0372%" height="15" fill="rgb(244,137,37)" fg:x="7342" fg:w="5"/><text x="54.8374%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (4 samples, 0.03%)</title><rect x="54.6320%" y="133" width="0.0297%" height="15" fill="rgb(240,136,2)" fg:x="7348" fg:w="4"/><text x="54.8820%" y="143.50"></text></g><g><title>nn`tensor_rs::impl_methods::_&lt;impl tensor_rs::TensorBase&lt;S,tensor_rs::OwnedData&lt;Dtype&gt;&gt;&gt;::from_vec (6 samples, 0.04%)</title><rect x="54.6691%" y="133" width="0.0446%" height="15" fill="rgb(239,18,37)" fg:x="7353" fg:w="6"/><text x="54.9191%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (6 samples, 0.04%)</title><rect x="54.6691%" y="117" width="0.0446%" height="15" fill="rgb(218,185,22)" fg:x="7353" fg:w="6"/><text x="54.9191%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (5 samples, 0.04%)</title><rect x="54.6766%" y="101" width="0.0372%" height="15" fill="rgb(225,218,4)" fg:x="7354" fg:w="5"/><text x="54.9266%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (5 samples, 0.04%)</title><rect x="54.6766%" y="85" width="0.0372%" height="15" fill="rgb(230,182,32)" fg:x="7354" fg:w="5"/><text x="54.9266%" y="95.50"></text></g><g><title>nn`tensor_rs::impl_binary_ops::_&lt;impl core::ops::arith::Mul&lt;&amp;tensor_rs::TensorBase&lt;S,A&gt;&gt; for tensor_rs::TensorBase&lt;S,B&gt;&gt;::mul (55 samples, 0.41%)</title><rect x="54.3197%" y="149" width="0.4089%" height="15" fill="rgb(242,56,43)" fg:x="7306" fg:w="55"/><text x="54.5697%" y="159.50"></text></g><g><title>nn`tensor_rs::unique_id::unique_id (2 samples, 0.01%)</title><rect x="54.7138%" y="133" width="0.0149%" height="15" fill="rgb(233,99,24)" fg:x="7359" fg:w="2"/><text x="54.9638%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (6 samples, 0.04%)</title><rect x="54.7955%" y="133" width="0.0446%" height="15" fill="rgb(234,209,42)" fg:x="7370" fg:w="6"/><text x="55.0455%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.03%)</title><rect x="54.8104%" y="117" width="0.0297%" height="15" fill="rgb(227,7,12)" fg:x="7372" fg:w="4"/><text x="55.0604%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.02%)</title><rect x="54.8178%" y="101" width="0.0223%" height="15" fill="rgb(245,203,43)" fg:x="7373" fg:w="3"/><text x="55.0678%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.03%)</title><rect x="54.8625%" y="117" width="0.0297%" height="15" fill="rgb(238,205,33)" fg:x="7379" fg:w="4"/><text x="55.1125%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.02%)</title><rect x="54.8699%" y="101" width="0.0223%" height="15" fill="rgb(231,56,7)" fg:x="7380" fg:w="3"/><text x="55.1199%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.02%)</title><rect x="54.8699%" y="85" width="0.0223%" height="15" fill="rgb(244,186,29)" fg:x="7380" fg:w="3"/><text x="55.1199%" y="95.50"></text></g><g><title>nn`tensor_rs::impl_methods::_&lt;impl tensor_rs::TensorBase&lt;S,A&gt;&gt;::map (23 samples, 0.17%)</title><rect x="54.7286%" y="149" width="0.1710%" height="15" fill="rgb(234,111,31)" fg:x="7361" fg:w="23"/><text x="54.9786%" y="159.50"></text></g><g><title>nn`tensor_rs::impl_methods::_&lt;impl tensor_rs::TensorBase&lt;S,tensor_rs::OwnedData&lt;Dtype&gt;&gt;&gt;::from_vec (6 samples, 0.04%)</title><rect x="54.8550%" y="133" width="0.0446%" height="15" fill="rgb(241,149,10)" fg:x="7378" fg:w="6"/><text x="55.1050%" y="143.50"></text></g><g><title>nn`tensor_rs::impl_methods::_&lt;impl tensor_rs::TensorBase&lt;S,tensor_rs::OwnedData&lt;Dtype&gt;&gt;&gt;::from_vec (10 samples, 0.07%)</title><rect x="54.8996%" y="149" width="0.0743%" height="15" fill="rgb(249,206,44)" fg:x="7384" fg:w="10"/><text x="55.1496%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.03%)</title><rect x="54.9442%" y="133" width="0.0297%" height="15" fill="rgb(251,153,30)" fg:x="7390" fg:w="4"/><text x="55.1942%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.02%)</title><rect x="54.9517%" y="117" width="0.0223%" height="15" fill="rgb(239,152,38)" fg:x="7391" fg:w="3"/><text x="55.2017%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (4 samples, 0.03%)</title><rect x="55.0558%" y="101" width="0.0297%" height="15" fill="rgb(249,139,47)" fg:x="7405" fg:w="4"/><text x="55.3058%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.01%)</title><rect x="55.0706%" y="85" width="0.0149%" height="15" fill="rgb(244,64,35)" fg:x="7407" fg:w="2"/><text x="55.3206%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`medium_malloc_should_clear (7 samples, 0.05%)</title><rect x="55.1004%" y="85" width="0.0520%" height="15" fill="rgb(216,46,15)" fg:x="7411" fg:w="7"/><text x="55.3504%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`medium_malloc_from_free_list (2 samples, 0.01%)</title><rect x="55.1375%" y="69" width="0.0149%" height="15" fill="rgb(250,74,19)" fg:x="7416" fg:w="2"/><text x="55.3875%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (3 samples, 0.02%)</title><rect x="55.1747%" y="53" width="0.0223%" height="15" fill="rgb(249,42,33)" fg:x="7421" fg:w="3"/><text x="55.4247%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (12 samples, 0.09%)</title><rect x="55.1524%" y="85" width="0.0892%" height="15" fill="rgb(242,149,17)" fg:x="7418" fg:w="12"/><text x="55.4024%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (10 samples, 0.07%)</title><rect x="55.1673%" y="69" width="0.0743%" height="15" fill="rgb(244,29,21)" fg:x="7420" fg:w="10"/><text x="55.4173%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (6 samples, 0.04%)</title><rect x="55.1970%" y="53" width="0.0446%" height="15" fill="rgb(220,130,37)" fg:x="7424" fg:w="6"/><text x="55.4470%" y="63.50"></text></g><g><title>libsystem_platform.dylib`__bzero (175 samples, 1.30%)</title><rect x="55.2416%" y="85" width="1.3011%" height="15" fill="rgb(211,67,2)" fg:x="7430" fg:w="175"/><text x="55.4916%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (237 samples, 1.76%)</title><rect x="55.0186%" y="117" width="1.7621%" height="15" fill="rgb(235,68,52)" fg:x="7400" fg:w="237"/><text x="55.2686%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (228 samples, 1.70%)</title><rect x="55.0855%" y="101" width="1.6952%" height="15" fill="rgb(246,142,3)" fg:x="7409" fg:w="228"/><text x="55.3355%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (32 samples, 0.24%)</title><rect x="56.5428%" y="85" width="0.2379%" height="15" fill="rgb(241,25,7)" fg:x="7605" fg:w="32"/><text x="56.7928%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (6 samples, 0.04%)</title><rect x="56.7881%" y="117" width="0.0446%" height="15" fill="rgb(242,119,39)" fg:x="7638" fg:w="6"/><text x="57.0381%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.01%)</title><rect x="56.8327%" y="117" width="0.0149%" height="15" fill="rgb(241,98,45)" fg:x="7644" fg:w="2"/><text x="57.0827%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (2 samples, 0.01%)</title><rect x="56.8625%" y="117" width="0.0149%" height="15" fill="rgb(254,28,30)" fg:x="7648" fg:w="2"/><text x="57.1125%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (2 samples, 0.01%)</title><rect x="56.8773%" y="117" width="0.0149%" height="15" fill="rgb(241,142,54)" fg:x="7650" fg:w="2"/><text x="57.1273%" y="127.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (24 samples, 0.18%)</title><rect x="60.4461%" y="101" width="0.1784%" height="15" fill="rgb(222,85,15)" fg:x="8130" fg:w="24"/><text x="60.6961%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (8 samples, 0.06%)</title><rect x="60.6989%" y="37" width="0.0595%" height="15" fill="rgb(210,85,47)" fg:x="8164" fg:w="8"/><text x="60.9489%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (23 samples, 0.17%)</title><rect x="60.6245%" y="101" width="0.1710%" height="15" fill="rgb(224,206,25)" fg:x="8154" fg:w="23"/><text x="60.8745%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (18 samples, 0.13%)</title><rect x="60.6617%" y="85" width="0.1338%" height="15" fill="rgb(243,201,19)" fg:x="8159" fg:w="18"/><text x="60.9117%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (17 samples, 0.13%)</title><rect x="60.6691%" y="69" width="0.1264%" height="15" fill="rgb(236,59,4)" fg:x="8160" fg:w="17"/><text x="60.9191%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (14 samples, 0.10%)</title><rect x="60.6914%" y="53" width="0.1041%" height="15" fill="rgb(254,179,45)" fg:x="8163" fg:w="14"/><text x="60.9414%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (5 samples, 0.04%)</title><rect x="60.7584%" y="37" width="0.0372%" height="15" fill="rgb(226,14,10)" fg:x="8172" fg:w="5"/><text x="61.0084%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.01%)</title><rect x="60.8327%" y="85" width="0.0149%" height="15" fill="rgb(244,27,41)" fg:x="8182" fg:w="2"/><text x="61.0827%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (2 samples, 0.01%)</title><rect x="60.8476%" y="85" width="0.0149%" height="15" fill="rgb(235,35,32)" fg:x="8184" fg:w="2"/><text x="61.0976%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_size (3 samples, 0.02%)</title><rect x="60.8625%" y="85" width="0.0223%" height="15" fill="rgb(218,68,31)" fg:x="8186" fg:w="3"/><text x="61.1125%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free (12 samples, 0.09%)</title><rect x="60.8030%" y="101" width="0.0892%" height="15" fill="rgb(207,120,37)" fg:x="8178" fg:w="12"/><text x="61.0530%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_small (4 samples, 0.03%)</title><rect x="60.8922%" y="101" width="0.0297%" height="15" fill="rgb(227,98,0)" fg:x="8190" fg:w="4"/><text x="61.1422%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (2 samples, 0.01%)</title><rect x="60.9219%" y="101" width="0.0149%" height="15" fill="rgb(207,7,3)" fg:x="8194" fg:w="2"/><text x="61.1719%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (2 samples, 0.01%)</title><rect x="60.9517%" y="101" width="0.0149%" height="15" fill="rgb(206,98,19)" fg:x="8198" fg:w="2"/><text x="61.2017%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.01%)</title><rect x="60.9665%" y="101" width="0.0149%" height="15" fill="rgb(217,5,26)" fg:x="8200" fg:w="2"/><text x="61.2165%" y="111.50"></text></g><g><title>nn`matrixmultiply::gemm::gemm_loop (551 samples, 4.10%)</title><rect x="56.9219%" y="117" width="4.0967%" height="15" fill="rgb(235,190,38)" fg:x="7656" fg:w="551"/><text x="57.1719%" y="127.50">nn`m..</text></g><g><title>nn`matrixmultiply::gemm::MASK_BUF::__getit (4 samples, 0.03%)</title><rect x="60.9888%" y="101" width="0.0297%" height="15" fill="rgb(247,86,24)" fg:x="8203" fg:w="4"/><text x="61.2388%" y="111.50"></text></g><g><title>nn`matrixmultiply::gemm::masked_kernel (4,479 samples, 33.30%)</title><rect x="61.0186%" y="117" width="33.3011%" height="15" fill="rgb(205,101,16)" fg:x="8207" fg:w="4479"/><text x="61.2686%" y="127.50">nn`matrixmultiply::gemm::masked_kernel</text></g><g><title>nn`matrixmultiply::gemm::pack (705 samples, 5.24%)</title><rect x="94.3197%" y="117" width="5.2416%" height="15" fill="rgb(246,168,33)" fg:x="12686" fg:w="705"/><text x="94.5697%" y="127.50">nn`mat..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (7 samples, 0.05%)</title><rect x="99.5836%" y="69" width="0.0520%" height="15" fill="rgb(231,114,1)" fg:x="13394" fg:w="7"/><text x="99.8336%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (4 samples, 0.03%)</title><rect x="99.6059%" y="53" width="0.0297%" height="15" fill="rgb(207,184,53)" fg:x="13397" fg:w="4"/><text x="99.8559%" y="63.50"></text></g><g><title>nn`tensor_rs::impl_methods::_&lt;impl tensor_rs::TensorBase&lt;S,tensor_rs::OwnedData&lt;Dtype&gt;&gt;&gt;::from_vec (11 samples, 0.08%)</title><rect x="99.5613%" y="117" width="0.0818%" height="15" fill="rgb(224,95,51)" fg:x="13391" fg:w="11"/><text x="99.8113%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (9 samples, 0.07%)</title><rect x="99.5762%" y="101" width="0.0669%" height="15" fill="rgb(212,188,45)" fg:x="13393" fg:w="9"/><text x="99.8262%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (8 samples, 0.06%)</title><rect x="99.5836%" y="85" width="0.0595%" height="15" fill="rgb(223,154,38)" fg:x="13394" fg:w="8"/><text x="99.8336%" y="95.50"></text></g><g><title>nn`core::ops::function::FnOnce::call_once{{vtable.shim}} (8,155 samples, 60.63%)</title><rect x="39.0186%" y="165" width="60.6320%" height="15" fill="rgb(251,22,52)" fg:x="5248" fg:w="8155"/><text x="39.2686%" y="175.50">nn`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>nn`tensor_rs::impl_processing_ops::_&lt;impl tensor_rs::TensorBase&lt;[usize (6,009 samples, 44.68%)</title><rect x="54.9740%" y="149" width="44.6766%" height="15" fill="rgb(229,209,22)" fg:x="7394" fg:w="6009"/><text x="55.2240%" y="159.50">nn`tensor_rs::impl_processing_ops::_&lt;impl tensor_rs::TensorBase&lt;[usize</text></g><g><title> 2],A&gt;&gt;::dot (6,009 samples, 44.68%)</title><rect x="54.9740%" y="133" width="44.6766%" height="15" fill="rgb(234,138,34)" fg:x="7394" fg:w="6009"/><text x="55.2240%" y="143.50"> 2],A&gt;&gt;::dot</text></g><g><title>nn`tensor_rs::impl_binary_ops::_&lt;impl core::ops::arith::AddAssign&lt;&amp;tensor_rs::TensorBase&lt;S,B&gt;&gt; for tensor_rs::TensorBase&lt;S,A&gt;&gt;::add_assign (12 samples, 0.09%)</title><rect x="99.6580%" y="165" width="0.0892%" height="15" fill="rgb(212,95,11)" fg:x="13404" fg:w="12"/><text x="99.9080%" y="175.50"></text></g><g><title>nn`tensor_rs::impl_binary_ops::_&lt;impl core::ops::arith::AddAssign&lt;tensor_rs::TensorBase&lt;S,B&gt;&gt; for tensor_rs::TensorBase&lt;S,A&gt;&gt;::add_assign (2 samples, 0.01%)</title><rect x="99.7472%" y="165" width="0.0149%" height="15" fill="rgb(240,179,47)" fg:x="13416" fg:w="2"/><text x="99.9972%" y="175.50"></text></g><g><title>nn`tensor_rs::impl_binary_ops::_&lt;impl core::ops::arith::SubAssign&lt;&amp;tensor_rs::TensorBase&lt;S,B&gt;&gt; for tensor_rs::TensorBase&lt;S,A&gt;&gt;::sub_assign (7 samples, 0.05%)</title><rect x="99.7770%" y="165" width="0.0520%" height="15" fill="rgb(240,163,11)" fg:x="13420" fg:w="7"/><text x="100.0270%" y="175.50"></text></g><g><title>nn`tensor_rs::gradient::BackwardOps::execute (8,263 samples, 61.43%)</title><rect x="38.4238%" y="181" width="61.4349%" height="15" fill="rgb(236,37,12)" fg:x="5168" fg:w="8263"/><text x="38.6738%" y="191.50">nn`tensor_rs::gradient::BackwardOps::execute</text></g><g><title>nn`tensor_rs::impl_processing_ops::_&lt;impl tensor_rs::TensorBase&lt;[usize (3 samples, 0.02%)</title><rect x="99.8364%" y="165" width="0.0223%" height="15" fill="rgb(232,164,16)" fg:x="13428" fg:w="3"/><text x="100.0864%" y="175.50"></text></g><g><title> 2],A&gt;&gt;::dot (3 samples, 0.02%)</title><rect x="99.8364%" y="149" width="0.0223%" height="15" fill="rgb(244,205,15)" fg:x="13428" fg:w="3"/><text x="100.0864%" y="159.50"></text></g><g><title>nn`tensor_rs::impl_methods::_&lt;impl tensor_rs::TensorBase&lt;[usize (8,284 samples, 61.59%)</title><rect x="38.2825%" y="213" width="61.5911%" height="15" fill="rgb(223,117,47)" fg:x="5149" fg:w="8284"/><text x="38.5325%" y="223.50">nn`tensor_rs::impl_methods::_&lt;impl tensor_rs::TensorBase&lt;[usize</text></g><g><title> 0],A&gt;&gt;::backward (8,284 samples, 61.59%)</title><rect x="38.2825%" y="197" width="61.5911%" height="15" fill="rgb(244,107,35)" fg:x="5149" fg:w="8284"/><text x="38.5325%" y="207.50"> 0],A&gt;&gt;::backward</text></g><g><title>nn`tensor_rs::mnist::mnist::load_data (8 samples, 0.06%)</title><rect x="99.8736%" y="213" width="0.0595%" height="15" fill="rgb(205,140,8)" fg:x="13433" fg:w="8"/><text x="100.1236%" y="223.50"></text></g><g><title>nn`std::fs::read::inner (8 samples, 0.06%)</title><rect x="99.8736%" y="197" width="0.0595%" height="15" fill="rgb(228,84,46)" fg:x="13433" fg:w="8"/><text x="100.1236%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`read (8 samples, 0.06%)</title><rect x="99.8736%" y="181" width="0.0595%" height="15" fill="rgb(254,188,9)" fg:x="13433" fg:w="8"/><text x="100.1236%" y="191.50"></text></g><g><title>nn`nn::main (13,427 samples, 99.83%)</title><rect x="0.1115%" y="229" width="99.8290%" height="15" fill="rgb(206,112,54)" fg:x="15" fg:w="13427"/><text x="0.3615%" y="239.50">nn`nn::main</text></g><g><title>nn`tensor_rs::impl_binary_ops::_&lt;impl core::ops::arith::AddAssign&lt;&amp;tensor_rs::TensorBase&lt;S,B&gt;&gt; for tensor_rs::TensorBase&lt;S,A&gt;&gt;::add_assign (6 samples, 0.04%)</title><rect x="99.9405%" y="229" width="0.0446%" height="15" fill="rgb(216,84,49)" fg:x="13442" fg:w="6"/><text x="100.1905%" y="239.50"></text></g><g><title>all (13,450 samples, 100%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(214,194,35)" fg:x="0" fg:w="13450"/><text x="0.2500%" y="335.50"></text></g><g><title>dyld`start (13,450 samples, 100.00%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(249,28,3)" fg:x="0" fg:w="13450"/><text x="0.2500%" y="319.50">dyld`start</text></g><g><title>nn`main (13,450 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(222,56,52)" fg:x="0" fg:w="13450"/><text x="0.2500%" y="303.50">nn`main</text></g><g><title>nn`std::rt::lang_start_internal (13,450 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(245,217,50)" fg:x="0" fg:w="13450"/><text x="0.2500%" y="287.50">nn`std::rt::lang_start_internal</text></g><g><title>nn`std::rt::lang_start::_{{closure}} (13,450 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(213,201,24)" fg:x="0" fg:w="13450"/><text x="0.2500%" y="271.50">nn`std::rt::lang_start::_{{closure}}</text></g><g><title>nn`std::sys_common::backtrace::__rust_begin_short_backtrace (13,450 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(248,116,28)" fg:x="0" fg:w="13450"/><text x="0.2500%" y="255.50">nn`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g></svg></svg>