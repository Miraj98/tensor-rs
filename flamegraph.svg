<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="358" onload="init(evt)" viewBox="0 0 1200 358" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="358" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="341.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="341.00"> </text><svg id="frames" x="10" width="1180" total_samples="11073"><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (3 samples, 0.03%)</title><rect x="0.0000%" y="213" width="0.0271%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="3"/><text x="0.2500%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (4 samples, 0.04%)</title><rect x="0.0271%" y="213" width="0.0361%" height="15" fill="rgb(217,0,24)" fg:x="3" fg:w="4"/><text x="0.2771%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (2 samples, 0.02%)</title><rect x="0.0632%" y="213" width="0.0181%" height="15" fill="rgb(221,193,54)" fg:x="7" fg:w="2"/><text x="0.3132%" y="223.50"></text></g><g><title>nn`&lt;tensor_rs::TensorBase&lt;L,tensor_rs::OwnedData&lt;Dtype&gt;&gt; as tensor_rs::impl_binary_ops::TensorBinaryOps&lt;tensor_rs::TensorBase&lt;R,tensor_rs::OwnedData&lt;Dtype&gt;&gt;&gt;&gt;::add (2 samples, 0.02%)</title><rect x="0.0903%" y="213" width="0.0181%" height="15" fill="rgb(248,212,6)" fg:x="10" fg:w="2"/><text x="0.3403%" y="223.50"></text></g><g><title>nn`&lt;tensor_rs::TensorBase&lt;S,A&gt; as tensor_rs::impl_reduce_ops::ReduceOps&gt;::sum (2 samples, 0.02%)</title><rect x="0.1084%" y="213" width="0.0181%" height="15" fill="rgb(208,68,35)" fg:x="12" fg:w="2"/><text x="0.3584%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.02%)</title><rect x="0.6141%" y="197" width="0.0181%" height="15" fill="rgb(232,128,0)" fg:x="68" fg:w="2"/><text x="0.8641%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (6 samples, 0.05%)</title><rect x="0.6322%" y="197" width="0.0542%" height="15" fill="rgb(207,160,47)" fg:x="70" fg:w="6"/><text x="0.8822%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (10 samples, 0.09%)</title><rect x="0.8760%" y="181" width="0.0903%" height="15" fill="rgb(228,23,34)" fg:x="97" fg:w="10"/><text x="1.1260%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (33 samples, 0.30%)</title><rect x="0.6864%" y="197" width="0.2980%" height="15" fill="rgb(218,30,26)" fg:x="76" fg:w="33"/><text x="0.9364%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 0.02%)</title><rect x="0.9934%" y="197" width="0.0181%" height="15" fill="rgb(220,122,19)" fg:x="110" fg:w="2"/><text x="1.2434%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (10 samples, 0.09%)</title><rect x="1.0205%" y="197" width="0.0903%" height="15" fill="rgb(250,228,42)" fg:x="113" fg:w="10"/><text x="1.2705%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (13 samples, 0.12%)</title><rect x="1.1108%" y="197" width="0.1174%" height="15" fill="rgb(240,193,28)" fg:x="123" fg:w="13"/><text x="1.3608%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (2 samples, 0.02%)</title><rect x="1.2282%" y="197" width="0.0181%" height="15" fill="rgb(216,20,37)" fg:x="136" fg:w="2"/><text x="1.4782%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset_pattern16 (5 samples, 0.05%)</title><rect x="1.2463%" y="197" width="0.0452%" height="15" fill="rgb(206,188,39)" fg:x="138" fg:w="5"/><text x="1.4963%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (7 samples, 0.06%)</title><rect x="1.3817%" y="181" width="0.0632%" height="15" fill="rgb(217,207,13)" fg:x="153" fg:w="7"/><text x="1.6317%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (36 samples, 0.33%)</title><rect x="1.4450%" y="181" width="0.3251%" height="15" fill="rgb(231,73,38)" fg:x="160" fg:w="36"/><text x="1.6950%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (10 samples, 0.09%)</title><rect x="1.6798%" y="165" width="0.0903%" height="15" fill="rgb(225,20,46)" fg:x="186" fg:w="10"/><text x="1.9298%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (5 samples, 0.05%)</title><rect x="1.7701%" y="181" width="0.0452%" height="15" fill="rgb(210,31,41)" fg:x="196" fg:w="5"/><text x="2.0201%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (22 samples, 0.20%)</title><rect x="1.8152%" y="181" width="0.1987%" height="15" fill="rgb(221,200,47)" fg:x="201" fg:w="22"/><text x="2.0652%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (3 samples, 0.03%)</title><rect x="2.0139%" y="181" width="0.0271%" height="15" fill="rgb(226,26,5)" fg:x="223" fg:w="3"/><text x="2.2639%" y="191.50"></text></g><g><title>nn`DYLD-STUB$$free (4 samples, 0.04%)</title><rect x="2.0410%" y="181" width="0.0361%" height="15" fill="rgb(249,33,26)" fg:x="226" fg:w="4"/><text x="2.2910%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.03%)</title><rect x="2.0771%" y="149" width="0.0271%" height="15" fill="rgb(235,183,28)" fg:x="230" fg:w="3"/><text x="2.3271%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (3 samples, 0.03%)</title><rect x="2.1042%" y="149" width="0.0271%" height="15" fill="rgb(221,5,38)" fg:x="233" fg:w="3"/><text x="2.3542%" y="159.50"></text></g><g><title> 0]&gt;&gt; (8 samples, 0.07%)</title><rect x="2.0771%" y="165" width="0.0722%" height="15" fill="rgb(247,18,42)" fg:x="230" fg:w="8"/><text x="2.3271%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (2 samples, 0.02%)</title><rect x="2.1313%" y="149" width="0.0181%" height="15" fill="rgb(241,131,45)" fg:x="236" fg:w="2"/><text x="2.3813%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (39 samples, 0.35%)</title><rect x="2.4203%" y="133" width="0.3522%" height="15" fill="rgb(249,31,29)" fg:x="268" fg:w="39"/><text x="2.6703%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_size (5 samples, 0.05%)</title><rect x="2.7725%" y="133" width="0.0452%" height="15" fill="rgb(225,111,53)" fg:x="307" fg:w="5"/><text x="3.0225%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (74 samples, 0.67%)</title><rect x="2.1584%" y="149" width="0.6683%" height="15" fill="rgb(238,160,17)" fg:x="239" fg:w="74"/><text x="2.4084%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (4 samples, 0.04%)</title><rect x="2.8267%" y="149" width="0.0361%" height="15" fill="rgb(214,148,48)" fg:x="313" fg:w="4"/><text x="3.0767%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`medium_free_list_add_ptr (2 samples, 0.02%)</title><rect x="2.8448%" y="133" width="0.0181%" height="15" fill="rgb(232,36,49)" fg:x="315" fg:w="2"/><text x="3.0948%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (3 samples, 0.03%)</title><rect x="2.9080%" y="133" width="0.0271%" height="15" fill="rgb(209,103,24)" fg:x="322" fg:w="3"/><text x="3.1580%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_find_by_ptr (5 samples, 0.05%)</title><rect x="2.9351%" y="133" width="0.0452%" height="15" fill="rgb(229,88,8)" fg:x="325" fg:w="5"/><text x="3.1851%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_small (16 samples, 0.14%)</title><rect x="2.8628%" y="149" width="0.1445%" height="15" fill="rgb(213,181,19)" fg:x="317" fg:w="16"/><text x="3.1128%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (2 samples, 0.02%)</title><rect x="2.9893%" y="133" width="0.0181%" height="15" fill="rgb(254,191,54)" fg:x="331" fg:w="2"/><text x="3.2393%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (21 samples, 0.19%)</title><rect x="3.0163%" y="149" width="0.1897%" height="15" fill="rgb(241,83,37)" fg:x="334" fg:w="21"/><text x="3.2663%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (4 samples, 0.04%)</title><rect x="3.2060%" y="149" width="0.0361%" height="15" fill="rgb(233,36,39)" fg:x="355" fg:w="4"/><text x="3.4560%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (4 samples, 0.04%)</title><rect x="3.2421%" y="149" width="0.0361%" height="15" fill="rgb(226,3,54)" fg:x="359" fg:w="4"/><text x="3.4921%" y="159.50"></text></g><g><title>nn`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (220 samples, 1.99%)</title><rect x="1.3005%" y="197" width="1.9868%" height="15" fill="rgb(245,192,40)" fg:x="144" fg:w="220"/><text x="1.5505%" y="207.50">n..</text></g><g><title>nn`core::ptr::drop_in_place&lt;tensor_rs::TensorBase&lt;[usize (134 samples, 1.21%)</title><rect x="2.0771%" y="181" width="1.2102%" height="15" fill="rgb(238,167,29)" fg:x="230" fg:w="134"/><text x="2.3271%" y="191.50"></text></g><g><title> 2]&gt;&gt; (126 samples, 1.14%)</title><rect x="2.1494%" y="165" width="1.1379%" height="15" fill="rgb(232,182,51)" fg:x="238" fg:w="126"/><text x="2.3994%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (8 samples, 0.07%)</title><rect x="3.4408%" y="181" width="0.0722%" height="15" fill="rgb(231,60,39)" fg:x="381" fg:w="8"/><text x="3.6908%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (5 samples, 0.05%)</title><rect x="3.4679%" y="165" width="0.0452%" height="15" fill="rgb(208,69,12)" fg:x="384" fg:w="5"/><text x="3.7179%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.03%)</title><rect x="3.4860%" y="149" width="0.0271%" height="15" fill="rgb(235,93,37)" fg:x="386" fg:w="3"/><text x="3.7360%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (6 samples, 0.05%)</title><rect x="3.5492%" y="85" width="0.0542%" height="15" fill="rgb(213,116,39)" fg:x="393" fg:w="6"/><text x="3.7992%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (4 samples, 0.04%)</title><rect x="3.5672%" y="69" width="0.0361%" height="15" fill="rgb(222,207,29)" fg:x="395" fg:w="4"/><text x="3.8172%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (7 samples, 0.06%)</title><rect x="3.5492%" y="117" width="0.0632%" height="15" fill="rgb(206,96,30)" fg:x="393" fg:w="7"/><text x="3.7992%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (7 samples, 0.06%)</title><rect x="3.5492%" y="101" width="0.0632%" height="15" fill="rgb(218,138,4)" fg:x="393" fg:w="7"/><text x="3.7992%" y="111.50"></text></g><g><title>nn`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (12 samples, 0.11%)</title><rect x="3.5130%" y="181" width="0.1084%" height="15" fill="rgb(250,191,14)" fg:x="389" fg:w="12"/><text x="3.7630%" y="191.50"></text></g><g><title>nn`alloc::raw_vec::finish_grow (11 samples, 0.10%)</title><rect x="3.5221%" y="165" width="0.0993%" height="15" fill="rgb(239,60,40)" fg:x="390" fg:w="11"/><text x="3.7721%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`realloc (11 samples, 0.10%)</title><rect x="3.5221%" y="149" width="0.0993%" height="15" fill="rgb(206,27,48)" fg:x="390" fg:w="11"/><text x="3.7721%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (11 samples, 0.10%)</title><rect x="3.5221%" y="133" width="0.0993%" height="15" fill="rgb(225,35,8)" fg:x="390" fg:w="11"/><text x="3.7721%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (5 samples, 0.05%)</title><rect x="3.6214%" y="165" width="0.0452%" height="15" fill="rgb(250,213,24)" fg:x="401" fg:w="5"/><text x="3.8714%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.04%)</title><rect x="3.6305%" y="149" width="0.0361%" height="15" fill="rgb(247,123,22)" fg:x="402" fg:w="4"/><text x="3.8805%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.03%)</title><rect x="3.6395%" y="133" width="0.0271%" height="15" fill="rgb(231,138,38)" fg:x="403" fg:w="3"/><text x="3.8895%" y="143.50"></text></g><g><title>nn`tensor_rs::impl_methods::_&lt;impl tensor_rs::TensorBase&lt;S,tensor_rs::OwnedData&lt;Dtype&gt;&gt;&gt;::from_vec (6 samples, 0.05%)</title><rect x="3.6214%" y="181" width="0.0542%" height="15" fill="rgb(231,145,46)" fg:x="401" fg:w="6"/><text x="3.8714%" y="191.50"></text></g><g><title>nn`&lt;tensor_rs::TensorBase&lt;L,tensor_rs::OwnedData&lt;Dtype&gt;&gt; as tensor_rs::impl_binary_ops::TensorBinaryOps&lt;tensor_rs::TensorBase&lt;R,tensor_rs::OwnedData&lt;Dtype&gt;&gt;&gt;&gt;::add (46 samples, 0.42%)</title><rect x="3.2873%" y="197" width="0.4154%" height="15" fill="rgb(251,118,11)" fg:x="364" fg:w="46"/><text x="3.5373%" y="207.50"></text></g><g><title>nn`tensor_rs::utils::merge_backward_ops (3 samples, 0.03%)</title><rect x="3.6756%" y="181" width="0.0271%" height="15" fill="rgb(217,147,25)" fg:x="407" fg:w="3"/><text x="3.9256%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.02%)</title><rect x="3.7749%" y="133" width="0.0181%" height="15" fill="rgb(247,81,37)" fg:x="418" fg:w="2"/><text x="4.0249%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.03%)</title><rect x="3.7749%" y="165" width="0.0271%" height="15" fill="rgb(209,12,38)" fg:x="418" fg:w="3"/><text x="4.0249%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.03%)</title><rect x="3.7749%" y="149" width="0.0271%" height="15" fill="rgb(227,1,9)" fg:x="418" fg:w="3"/><text x="4.0249%" y="159.50"></text></g><g><title>nn`tensor_rs::gradient::BackwardOps::add_backward_op (6 samples, 0.05%)</title><rect x="3.7569%" y="181" width="0.0542%" height="15" fill="rgb(248,47,43)" fg:x="416" fg:w="6"/><text x="4.0069%" y="191.50"></text></g><g><title>nn`tensor_rs::impl_binary_ops::_&lt;impl core::ops::arith::Mul&lt;&amp;tensor_rs::TensorBase&lt;S,A&gt;&gt; for &amp;tensor_rs::TensorBase&lt;S,B&gt;&gt;::mul (8 samples, 0.07%)</title><rect x="3.8111%" y="181" width="0.0722%" height="15" fill="rgb(221,10,30)" fg:x="422" fg:w="8"/><text x="4.0611%" y="191.50"></text></g><g><title>nn`tensor_rs::impl_methods::_&lt;impl tensor_rs::TensorBase&lt;S,tensor_rs::OwnedData&lt;Dtype&gt;&gt;&gt;::from_vec (3 samples, 0.03%)</title><rect x="3.8562%" y="165" width="0.0271%" height="15" fill="rgb(210,229,1)" fg:x="427" fg:w="3"/><text x="4.1062%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.03%)</title><rect x="3.8562%" y="149" width="0.0271%" height="15" fill="rgb(222,148,37)" fg:x="427" fg:w="3"/><text x="4.1062%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.02%)</title><rect x="3.8653%" y="133" width="0.0181%" height="15" fill="rgb(234,67,33)" fg:x="428" fg:w="2"/><text x="4.1153%" y="143.50"></text></g><g><title>nn`&lt;tensor_rs::TensorBase&lt;L,tensor_rs::OwnedData&lt;Dtype&gt;&gt; as tensor_rs::impl_binary_ops::TensorBinaryOps&lt;tensor_rs::TensorBase&lt;R,tensor_rs::OwnedData&lt;Dtype&gt;&gt;&gt;&gt;::mul (21 samples, 0.19%)</title><rect x="3.7027%" y="197" width="0.1897%" height="15" fill="rgb(247,98,35)" fg:x="410" fg:w="21"/><text x="3.9527%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.04%)</title><rect x="3.9375%" y="181" width="0.0361%" height="15" fill="rgb(247,138,52)" fg:x="436" fg:w="4"/><text x="4.1875%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.03%)</title><rect x="3.9465%" y="165" width="0.0271%" height="15" fill="rgb(213,79,30)" fg:x="437" fg:w="3"/><text x="4.1965%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (2 samples, 0.02%)</title><rect x="3.9736%" y="181" width="0.0181%" height="15" fill="rgb(246,177,23)" fg:x="440" fg:w="2"/><text x="4.2236%" y="191.50"></text></g><g><title>nn`&lt;tensor_rs::TensorBase&lt;L,tensor_rs::OwnedData&lt;Dtype&gt;&gt; as tensor_rs::impl_binary_ops::TensorBinaryOps&lt;tensor_rs::TensorBase&lt;R,tensor_rs::OwnedData&lt;Dtype&gt;&gt;&gt;&gt;::sub (15 samples, 0.14%)</title><rect x="3.8924%" y="197" width="0.1355%" height="15" fill="rgb(230,62,27)" fg:x="431" fg:w="15"/><text x="4.1424%" y="207.50"></text></g><g><title>nn`tensor_rs::impl_methods::_&lt;impl tensor_rs::TensorBase&lt;S,tensor_rs::OwnedData&lt;Dtype&gt;&gt;&gt;::from_vec (4 samples, 0.04%)</title><rect x="3.9917%" y="181" width="0.0361%" height="15" fill="rgb(216,154,8)" fg:x="442" fg:w="4"/><text x="4.2417%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.04%)</title><rect x="3.9917%" y="165" width="0.0361%" height="15" fill="rgb(244,35,45)" fg:x="442" fg:w="4"/><text x="4.2417%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.04%)</title><rect x="3.9917%" y="149" width="0.0361%" height="15" fill="rgb(251,115,12)" fg:x="442" fg:w="4"/><text x="4.2417%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (4 samples, 0.04%)</title><rect x="3.9917%" y="133" width="0.0361%" height="15" fill="rgb(240,54,50)" fg:x="442" fg:w="4"/><text x="4.2417%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.02%)</title><rect x="4.1452%" y="165" width="0.0181%" height="15" fill="rgb(233,84,52)" fg:x="459" fg:w="2"/><text x="4.3952%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (4 samples, 0.04%)</title><rect x="4.1994%" y="101" width="0.0361%" height="15" fill="rgb(207,117,47)" fg:x="465" fg:w="4"/><text x="4.4494%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.02%)</title><rect x="4.2175%" y="85" width="0.0181%" height="15" fill="rgb(249,43,39)" fg:x="467" fg:w="2"/><text x="4.4675%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (7 samples, 0.06%)</title><rect x="4.1813%" y="117" width="0.0632%" height="15" fill="rgb(209,38,44)" fg:x="463" fg:w="7"/><text x="4.4313%" y="127.50"></text></g><g><title>nn`tensor_rs::gradient::BackwardOps::add_backward_op (16 samples, 0.14%)</title><rect x="4.1181%" y="181" width="0.1445%" height="15" fill="rgb(236,212,23)" fg:x="456" fg:w="16"/><text x="4.3681%" y="191.50"></text></g><g><title>nn`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (11 samples, 0.10%)</title><rect x="4.1633%" y="165" width="0.0993%" height="15" fill="rgb(242,79,21)" fg:x="461" fg:w="11"/><text x="4.4133%" y="175.50"></text></g><g><title>nn`alloc::raw_vec::finish_grow (9 samples, 0.08%)</title><rect x="4.1813%" y="149" width="0.0813%" height="15" fill="rgb(211,96,35)" fg:x="463" fg:w="9"/><text x="4.4313%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`realloc (9 samples, 0.08%)</title><rect x="4.1813%" y="133" width="0.0813%" height="15" fill="rgb(253,215,40)" fg:x="463" fg:w="9"/><text x="4.4313%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.02%)</title><rect x="4.2446%" y="117" width="0.0181%" height="15" fill="rgb(211,81,21)" fg:x="470" fg:w="2"/><text x="4.4946%" y="127.50"></text></g><g><title>nn`&lt;tensor_rs::TensorBase&lt;S,A&gt; as tensor_rs::impl_reduce_ops::ReduceOps&gt;::sum (27 samples, 0.24%)</title><rect x="4.0278%" y="197" width="0.2438%" height="15" fill="rgb(208,190,38)" fg:x="446" fg:w="27"/><text x="4.2778%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.03%)</title><rect x="4.3529%" y="165" width="0.0271%" height="15" fill="rgb(235,213,38)" fg:x="482" fg:w="3"/><text x="4.6029%" y="175.50"></text></g><g><title>nn`&lt;f32 as tensor_rs::DataElement&gt;::sigmoid (51 samples, 0.46%)</title><rect x="4.3891%" y="165" width="0.4606%" height="15" fill="rgb(237,122,38)" fg:x="486" fg:w="51"/><text x="4.6391%" y="175.50"></text></g><g><title>libsystem_m.dylib`expf (41 samples, 0.37%)</title><rect x="4.4794%" y="149" width="0.3703%" height="15" fill="rgb(244,218,35)" fg:x="496" fg:w="41"/><text x="4.7294%" y="159.50"></text></g><g><title>nn`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (60 samples, 0.54%)</title><rect x="4.3349%" y="181" width="0.5419%" height="15" fill="rgb(240,68,47)" fg:x="480" fg:w="60"/><text x="4.5849%" y="191.50"></text></g><g><title>nn`DYLD-STUB$$expf (3 samples, 0.03%)</title><rect x="4.8496%" y="165" width="0.0271%" height="15" fill="rgb(210,16,53)" fg:x="537" fg:w="3"/><text x="5.0996%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.02%)</title><rect x="4.9129%" y="149" width="0.0181%" height="15" fill="rgb(235,124,12)" fg:x="544" fg:w="2"/><text x="5.1629%" y="159.50"></text></g><g><title>nn`tensor_rs::gradient::BackwardOps::add_backward_op (7 samples, 0.06%)</title><rect x="4.8948%" y="181" width="0.0632%" height="15" fill="rgb(224,169,11)" fg:x="542" fg:w="7"/><text x="5.1448%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (7 samples, 0.06%)</title><rect x="4.8948%" y="165" width="0.0632%" height="15" fill="rgb(250,166,2)" fg:x="542" fg:w="7"/><text x="5.1448%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.03%)</title><rect x="4.9309%" y="149" width="0.0271%" height="15" fill="rgb(242,216,29)" fg:x="546" fg:w="3"/><text x="5.1809%" y="159.50"></text></g><g><title>nn`tensor_rs::impl_methods::_&lt;impl tensor_rs::TensorBase&lt;S,tensor_rs::OwnedData&lt;Dtype&gt;&gt;&gt;::from_vec (11 samples, 0.10%)</title><rect x="4.9580%" y="181" width="0.0993%" height="15" fill="rgb(230,116,27)" fg:x="549" fg:w="11"/><text x="5.2080%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (9 samples, 0.08%)</title><rect x="4.9761%" y="165" width="0.0813%" height="15" fill="rgb(228,99,48)" fg:x="551" fg:w="9"/><text x="5.2261%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (7 samples, 0.06%)</title><rect x="4.9941%" y="149" width="0.0632%" height="15" fill="rgb(253,11,6)" fg:x="553" fg:w="7"/><text x="5.2441%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (6 samples, 0.05%)</title><rect x="5.0032%" y="133" width="0.0542%" height="15" fill="rgb(247,143,39)" fg:x="554" fg:w="6"/><text x="5.2532%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (3 samples, 0.03%)</title><rect x="5.0303%" y="117" width="0.0271%" height="15" fill="rgb(236,97,10)" fg:x="557" fg:w="3"/><text x="5.2803%" y="127.50"></text></g><g><title>nn`&lt;tensor_rs::TensorBase&lt;S&gt; as tensor_rs::impl_unary_ops::TensorUnaryOps&gt;::sigmoid (88 samples, 0.79%)</title><rect x="4.2717%" y="197" width="0.7947%" height="15" fill="rgb(233,208,19)" fg:x="473" fg:w="88"/><text x="4.5217%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.02%)</title><rect x="5.1567%" y="117" width="0.0181%" height="15" fill="rgb(216,164,2)" fg:x="571" fg:w="2"/><text x="5.4067%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (5 samples, 0.05%)</title><rect x="5.1477%" y="149" width="0.0452%" height="15" fill="rgb(220,129,5)" fg:x="570" fg:w="5"/><text x="5.3977%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (5 samples, 0.05%)</title><rect x="5.1477%" y="133" width="0.0452%" height="15" fill="rgb(242,17,10)" fg:x="570" fg:w="5"/><text x="5.3977%" y="143.50"></text></g><g><title>nn`__rust_alloc (2 samples, 0.02%)</title><rect x="5.2199%" y="149" width="0.0181%" height="15" fill="rgb(242,107,0)" fg:x="578" fg:w="2"/><text x="5.4699%" y="159.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (3 samples, 0.03%)</title><rect x="5.9966%" y="133" width="0.0271%" height="15" fill="rgb(251,28,31)" fg:x="664" fg:w="3"/><text x="6.2466%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`medium_malloc_should_clear (6 samples, 0.05%)</title><rect x="6.0688%" y="101" width="0.0542%" height="15" fill="rgb(233,223,10)" fg:x="672" fg:w="6"/><text x="6.3188%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`medium_malloc_from_free_list (4 samples, 0.04%)</title><rect x="6.0869%" y="85" width="0.0361%" height="15" fill="rgb(215,21,27)" fg:x="674" fg:w="4"/><text x="6.3369%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (4 samples, 0.04%)</title><rect x="6.1411%" y="69" width="0.0361%" height="15" fill="rgb(232,23,21)" fg:x="680" fg:w="4"/><text x="6.3911%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (18 samples, 0.16%)</title><rect x="6.0237%" y="133" width="0.1626%" height="15" fill="rgb(244,5,23)" fg:x="667" fg:w="18"/><text x="6.2737%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (14 samples, 0.13%)</title><rect x="6.0598%" y="117" width="0.1264%" height="15" fill="rgb(226,81,46)" fg:x="671" fg:w="14"/><text x="6.3098%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (7 samples, 0.06%)</title><rect x="6.1230%" y="101" width="0.0632%" height="15" fill="rgb(247,70,30)" fg:x="678" fg:w="7"/><text x="6.3730%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (7 samples, 0.06%)</title><rect x="6.1230%" y="85" width="0.0632%" height="15" fill="rgb(212,68,19)" fg:x="678" fg:w="7"/><text x="6.3730%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`medium_free_list_add_ptr (3 samples, 0.03%)</title><rect x="6.2223%" y="117" width="0.0271%" height="15" fill="rgb(240,187,13)" fg:x="689" fg:w="3"/><text x="6.4723%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (7 samples, 0.06%)</title><rect x="6.1952%" y="133" width="0.0632%" height="15" fill="rgb(223,113,26)" fg:x="686" fg:w="7"/><text x="6.4452%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_small (4 samples, 0.04%)</title><rect x="6.2585%" y="133" width="0.0361%" height="15" fill="rgb(206,192,2)" fg:x="693" fg:w="4"/><text x="6.5085%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_find_by_ptr (2 samples, 0.02%)</title><rect x="6.2765%" y="117" width="0.0181%" height="15" fill="rgb(241,108,4)" fg:x="695" fg:w="2"/><text x="6.5265%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (2 samples, 0.02%)</title><rect x="6.3217%" y="133" width="0.0181%" height="15" fill="rgb(247,173,49)" fg:x="700" fg:w="2"/><text x="6.5717%" y="143.50"></text></g><g><title>nn`matrixmultiply::gemm::gemm_loop (124 samples, 1.12%)</title><rect x="5.2380%" y="149" width="1.1198%" height="15" fill="rgb(224,114,35)" fg:x="580" fg:w="124"/><text x="5.4880%" y="159.50"></text></g><g><title>nn`matrixmultiply::gemm::MASK_BUF::__getit (2 samples, 0.02%)</title><rect x="6.3397%" y="133" width="0.0181%" height="15" fill="rgb(245,159,27)" fg:x="702" fg:w="2"/><text x="6.5897%" y="143.50"></text></g><g><title>nn`matrixmultiply::gemm::masked_kernel (1,514 samples, 13.67%)</title><rect x="6.3578%" y="149" width="13.6729%" height="15" fill="rgb(245,172,44)" fg:x="704" fg:w="1514"/><text x="6.6078%" y="159.50">nn`matrixmultiply::ge..</text></g><g><title>nn`matrixmultiply::gemm::pack (936 samples, 8.45%)</title><rect x="20.0307%" y="149" width="8.4530%" height="15" fill="rgb(236,23,11)" fg:x="2218" fg:w="936"/><text x="20.2807%" y="159.50">nn`matrixmul..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.02%)</title><rect x="28.5559%" y="117" width="0.0181%" height="15" fill="rgb(205,117,38)" fg:x="3162" fg:w="2"/><text x="28.8059%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (8 samples, 0.07%)</title><rect x="28.5198%" y="133" width="0.0722%" height="15" fill="rgb(237,72,25)" fg:x="3158" fg:w="8"/><text x="28.7698%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.02%)</title><rect x="28.5740%" y="117" width="0.0181%" height="15" fill="rgb(244,70,9)" fg:x="3164" fg:w="2"/><text x="28.8240%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.02%)</title><rect x="28.5740%" y="101" width="0.0181%" height="15" fill="rgb(217,125,39)" fg:x="3164" fg:w="2"/><text x="28.8240%" y="111.50"></text></g><g><title>nn`tensor_rs::gradient::BackwardOps::add_backward_op (17 samples, 0.15%)</title><rect x="28.4837%" y="149" width="0.1535%" height="15" fill="rgb(235,36,10)" fg:x="3154" fg:w="17"/><text x="28.7337%" y="159.50"></text></g><g><title>nn`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.03%)</title><rect x="28.6101%" y="133" width="0.0271%" height="15" fill="rgb(251,123,47)" fg:x="3168" fg:w="3"/><text x="28.8601%" y="143.50"></text></g><g><title>nn`alloc::raw_vec::finish_grow (3 samples, 0.03%)</title><rect x="28.6101%" y="117" width="0.0271%" height="15" fill="rgb(221,13,13)" fg:x="3168" fg:w="3"/><text x="28.8601%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.03%)</title><rect x="28.6101%" y="101" width="0.0271%" height="15" fill="rgb(238,131,9)" fg:x="3168" fg:w="3"/><text x="28.8601%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.02%)</title><rect x="28.6192%" y="85" width="0.0181%" height="15" fill="rgb(211,50,8)" fg:x="3169" fg:w="2"/><text x="28.8692%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.02%)</title><rect x="28.6192%" y="69" width="0.0181%" height="15" fill="rgb(245,182,24)" fg:x="3169" fg:w="2"/><text x="28.8692%" y="79.50"></text></g><g><title>nn`tensor_rs::impl_methods::_&lt;impl tensor_rs::TensorBase&lt;S,A&gt;&gt;::put_backward_ops (2 samples, 0.02%)</title><rect x="28.6372%" y="149" width="0.0181%" height="15" fill="rgb(242,14,37)" fg:x="3171" fg:w="2"/><text x="28.8872%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.04%)</title><rect x="28.6914%" y="133" width="0.0361%" height="15" fill="rgb(246,228,12)" fg:x="3177" fg:w="4"/><text x="28.9414%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.02%)</title><rect x="28.7095%" y="117" width="0.0181%" height="15" fill="rgb(213,55,15)" fg:x="3179" fg:w="2"/><text x="28.9595%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.02%)</title><rect x="28.7095%" y="101" width="0.0181%" height="15" fill="rgb(209,9,3)" fg:x="3179" fg:w="2"/><text x="28.9595%" y="111.50"></text></g><g><title>nn`tensor_rs::impl_methods::_&lt;impl tensor_rs::TensorBase&lt;S,tensor_rs::OwnedData&lt;Dtype&gt;&gt;&gt;::from_vec (9 samples, 0.08%)</title><rect x="28.6553%" y="149" width="0.0813%" height="15" fill="rgb(230,59,30)" fg:x="3173" fg:w="9"/><text x="28.9053%" y="159.50"></text></g><g><title>nn`&lt;tensor_rs::TensorBase&lt;[usize (2,623 samples, 23.69%)</title><rect x="5.0664%" y="197" width="23.6883%" height="15" fill="rgb(209,121,21)" fg:x="561" fg:w="2623"/><text x="5.3164%" y="207.50">nn`&lt;tensor_rs::TensorBase&lt;[usize</text></g><g><title> 2],A&gt; as tensor_rs::impl_processing_ops::Matmul&lt;tensor_rs::TensorBase&lt;[usize (2,623 samples, 23.69%)</title><rect x="5.0664%" y="181" width="23.6883%" height="15" fill="rgb(220,109,13)" fg:x="561" fg:w="2623"/><text x="5.3164%" y="191.50"> 2],A&gt; as tensor_rs::impl_processing_o..</text></g><g><title> 2],A&gt;&gt;&gt;::matmul (2,623 samples, 23.69%)</title><rect x="5.0664%" y="165" width="23.6883%" height="15" fill="rgb(232,18,1)" fg:x="561" fg:w="2623"/><text x="5.3164%" y="175.50"> 2],A&gt;&gt;&gt;::matmul</text></g><g><title>nn`tensor_rs::utils::merge_backward_ops (2 samples, 0.02%)</title><rect x="28.7366%" y="149" width="0.0181%" height="15" fill="rgb(215,41,42)" fg:x="3182" fg:w="2"/><text x="28.9866%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (4 samples, 0.04%)</title><rect x="28.7727%" y="165" width="0.0361%" height="15" fill="rgb(224,123,36)" fg:x="3186" fg:w="4"/><text x="29.0227%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (3 samples, 0.03%)</title><rect x="28.7817%" y="149" width="0.0271%" height="15" fill="rgb(240,125,3)" fg:x="3187" fg:w="3"/><text x="29.0317%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.02%)</title><rect x="28.7908%" y="133" width="0.0181%" height="15" fill="rgb(205,98,50)" fg:x="3188" fg:w="2"/><text x="29.0408%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (7 samples, 0.06%)</title><rect x="28.8269%" y="165" width="0.0632%" height="15" fill="rgb(205,185,37)" fg:x="3192" fg:w="7"/><text x="29.0769%" y="175.50"></text></g><g><title>nn`tensor_rs::impl_methods::_&lt;impl tensor_rs::TensorBase&lt;S,tensor_rs::OwnedData&lt;Dtype&gt;&gt;&gt;::from_vec (5 samples, 0.05%)</title><rect x="28.8991%" y="165" width="0.0452%" height="15" fill="rgb(238,207,15)" fg:x="3200" fg:w="5"/><text x="29.1491%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.04%)</title><rect x="28.9082%" y="149" width="0.0361%" height="15" fill="rgb(213,199,42)" fg:x="3201" fg:w="4"/><text x="29.1582%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.03%)</title><rect x="28.9172%" y="133" width="0.0271%" height="15" fill="rgb(235,201,11)" fg:x="3202" fg:w="3"/><text x="29.1672%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.02%)</title><rect x="28.9262%" y="117" width="0.0181%" height="15" fill="rgb(207,46,11)" fg:x="3203" fg:w="2"/><text x="29.1762%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (4 samples, 0.04%)</title><rect x="29.2694%" y="117" width="0.0361%" height="15" fill="rgb(241,35,35)" fg:x="3241" fg:w="4"/><text x="29.5194%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (2 samples, 0.02%)</title><rect x="29.2875%" y="101" width="0.0181%" height="15" fill="rgb(243,32,47)" fg:x="3243" fg:w="2"/><text x="29.5375%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (10 samples, 0.09%)</title><rect x="29.2694%" y="133" width="0.0903%" height="15" fill="rgb(247,202,23)" fg:x="3241" fg:w="10"/><text x="29.5194%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (6 samples, 0.05%)</title><rect x="29.3055%" y="117" width="0.0542%" height="15" fill="rgb(219,102,11)" fg:x="3245" fg:w="6"/><text x="29.5555%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (6 samples, 0.05%)</title><rect x="29.3055%" y="101" width="0.0542%" height="15" fill="rgb(243,110,44)" fg:x="3245" fg:w="6"/><text x="29.5555%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (14 samples, 0.13%)</title><rect x="29.2423%" y="149" width="0.1264%" height="15" fill="rgb(222,74,54)" fg:x="3238" fg:w="14"/><text x="29.4923%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (4 samples, 0.04%)</title><rect x="29.3778%" y="149" width="0.0361%" height="15" fill="rgb(216,99,12)" fg:x="3253" fg:w="4"/><text x="29.6278%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (2 samples, 0.02%)</title><rect x="29.3958%" y="133" width="0.0181%" height="15" fill="rgb(226,22,26)" fg:x="3255" fg:w="2"/><text x="29.6458%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (2 samples, 0.02%)</title><rect x="29.3958%" y="117" width="0.0181%" height="15" fill="rgb(217,163,10)" fg:x="3255" fg:w="2"/><text x="29.6458%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (7 samples, 0.06%)</title><rect x="29.4139%" y="149" width="0.0632%" height="15" fill="rgb(213,25,53)" fg:x="3257" fg:w="7"/><text x="29.6639%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (5 samples, 0.05%)</title><rect x="29.4320%" y="133" width="0.0452%" height="15" fill="rgb(252,105,26)" fg:x="3259" fg:w="5"/><text x="29.6820%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.02%)</title><rect x="29.4952%" y="133" width="0.0181%" height="15" fill="rgb(220,39,43)" fg:x="3266" fg:w="2"/><text x="29.7452%" y="143.50"></text></g><g><title>nn`&lt;tensor_rs::mnist::mnist::MnistData as tensor_rs::mnist::Dataloader&gt;::get_by_idx (85 samples, 0.77%)</title><rect x="28.7546%" y="181" width="0.7676%" height="15" fill="rgb(229,68,48)" fg:x="3184" fg:w="85"/><text x="29.0046%" y="191.50"></text></g><g><title>nn`tensor_rs::mnist::mnist::MnistData::get_image_nn_input (64 samples, 0.58%)</title><rect x="28.9443%" y="165" width="0.5780%" height="15" fill="rgb(252,8,32)" fg:x="3205" fg:w="64"/><text x="29.1943%" y="175.50"></text></g><g><title>nn`tensor_rs::impl_methods::_&lt;impl tensor_rs::TensorBase&lt;S,tensor_rs::OwnedData&lt;Dtype&gt;&gt;&gt;::from_vec (4 samples, 0.04%)</title><rect x="29.4861%" y="149" width="0.0361%" height="15" fill="rgb(223,20,43)" fg:x="3265" fg:w="4"/><text x="29.7361%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (2 samples, 0.02%)</title><rect x="29.5403%" y="117" width="0.0181%" height="15" fill="rgb(229,81,49)" fg:x="3271" fg:w="2"/><text x="29.7903%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`realloc (3 samples, 0.03%)</title><rect x="29.5403%" y="149" width="0.0271%" height="15" fill="rgb(236,28,36)" fg:x="3271" fg:w="3"/><text x="29.7903%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (3 samples, 0.03%)</title><rect x="29.5403%" y="133" width="0.0271%" height="15" fill="rgb(249,185,26)" fg:x="3271" fg:w="3"/><text x="29.7903%" y="143.50"></text></g><g><title>nn`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (6 samples, 0.05%)</title><rect x="29.5223%" y="181" width="0.0542%" height="15" fill="rgb(249,174,33)" fg:x="3269" fg:w="6"/><text x="29.7723%" y="191.50"></text></g><g><title>nn`alloc::raw_vec::finish_grow (4 samples, 0.04%)</title><rect x="29.5403%" y="165" width="0.0361%" height="15" fill="rgb(233,201,37)" fg:x="3271" fg:w="4"/><text x="29.7903%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (4 samples, 0.04%)</title><rect x="29.5764%" y="149" width="0.0361%" height="15" fill="rgb(221,78,26)" fg:x="3275" fg:w="4"/><text x="29.8264%" y="159.50"></text></g><g><title>nn`std::sys::unix::time::inner::_&lt;impl std::sys::unix::time::Timespec&gt;::now (5 samples, 0.05%)</title><rect x="29.5764%" y="181" width="0.0452%" height="15" fill="rgb(250,127,30)" fg:x="3275" fg:w="5"/><text x="29.8264%" y="191.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (5 samples, 0.05%)</title><rect x="29.5764%" y="165" width="0.0452%" height="15" fill="rgb(230,49,44)" fg:x="3275" fg:w="5"/><text x="29.8264%" y="175.50"></text></g><g><title>nn`&lt;tensor_rs::mnist::mnist::MnistData as tensor_rs::mnist::Dataloader&gt;::get_batch (97 samples, 0.88%)</title><rect x="28.7546%" y="197" width="0.8760%" height="15" fill="rgb(229,67,23)" fg:x="3184" fg:w="97"/><text x="29.0046%" y="207.50"></text></g><g><title>nn`&lt;tensor_rs::unique_id::UniqueId as core::hash::Hash&gt;::hash (3 samples, 0.03%)</title><rect x="29.6306%" y="197" width="0.0271%" height="15" fill="rgb(249,83,47)" fg:x="3281" fg:w="3"/><text x="29.8806%" y="207.50"></text></g><g><title>nn`DYLD-STUB$$free (4 samples, 0.04%)</title><rect x="29.6668%" y="197" width="0.0361%" height="15" fill="rgb(215,43,3)" fg:x="3285" fg:w="4"/><text x="29.9168%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (2 samples, 0.02%)</title><rect x="29.7029%" y="165" width="0.0181%" height="15" fill="rgb(238,154,13)" fg:x="3289" fg:w="2"/><text x="29.9529%" y="175.50"></text></g><g><title>nn`alloc::vec::from_elem (25 samples, 0.23%)</title><rect x="29.7029%" y="197" width="0.2258%" height="15" fill="rgb(219,56,2)" fg:x="3289" fg:w="25"/><text x="29.9529%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (25 samples, 0.23%)</title><rect x="29.7029%" y="181" width="0.2258%" height="15" fill="rgb(233,0,4)" fg:x="3289" fg:w="25"/><text x="29.9529%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (23 samples, 0.21%)</title><rect x="29.7209%" y="165" width="0.2077%" height="15" fill="rgb(235,30,7)" fg:x="3291" fg:w="23"/><text x="29.9709%" y="175.50"></text></g><g><title>libsystem_platform.dylib`__bzero (23 samples, 0.21%)</title><rect x="29.7209%" y="149" width="0.2077%" height="15" fill="rgb(250,79,13)" fg:x="3291" fg:w="23"/><text x="29.9709%" y="159.50"></text></g><g><title>nn`core::hash::BuildHasher::hash_one (4 samples, 0.04%)</title><rect x="29.9287%" y="197" width="0.0361%" height="15" fill="rgb(211,146,34)" fg:x="3314" fg:w="4"/><text x="30.1787%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (5 samples, 0.05%)</title><rect x="29.9648%" y="149" width="0.0452%" height="15" fill="rgb(228,22,38)" fg:x="3318" fg:w="5"/><text x="30.2148%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_small (8 samples, 0.07%)</title><rect x="30.0099%" y="149" width="0.0722%" height="15" fill="rgb(235,168,5)" fg:x="3323" fg:w="8"/><text x="30.2599%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (2 samples, 0.02%)</title><rect x="30.0641%" y="133" width="0.0181%" height="15" fill="rgb(221,155,16)" fg:x="3329" fg:w="2"/><text x="30.3141%" y="143.50"></text></g><g><title>nn`core::ptr::drop_in_place&lt;(tensor_rs::TensorBase&lt;[usize (18 samples, 0.16%)</title><rect x="29.9648%" y="197" width="0.1626%" height="15" fill="rgb(215,215,53)" fg:x="3318" fg:w="18"/><text x="30.2148%" y="207.50"></text></g><g><title> 2]&gt;,tensor_rs::TensorBase&lt;[usize (18 samples, 0.16%)</title><rect x="29.9648%" y="181" width="0.1626%" height="15" fill="rgb(223,4,10)" fg:x="3318" fg:w="18"/><text x="30.2148%" y="191.50"></text></g><g><title> 2]&gt;)&gt; (18 samples, 0.16%)</title><rect x="29.9648%" y="165" width="0.1626%" height="15" fill="rgb(234,103,6)" fg:x="3318" fg:w="18"/><text x="30.2148%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (3 samples, 0.03%)</title><rect x="30.1002%" y="149" width="0.0271%" height="15" fill="rgb(227,97,0)" fg:x="3333" fg:w="3"/><text x="30.3502%" y="159.50"></text></g><g><title> 0]&gt;&gt; (7 samples, 0.06%)</title><rect x="30.1273%" y="181" width="0.0632%" height="15" fill="rgb(234,150,53)" fg:x="3336" fg:w="7"/><text x="30.3773%" y="191.50"></text></g><g><title>nn`core::ptr::drop_in_place&lt;tensor_rs::TensorBase&lt;[usize (9 samples, 0.08%)</title><rect x="30.1273%" y="197" width="0.0813%" height="15" fill="rgb(228,201,54)" fg:x="3336" fg:w="9"/><text x="30.3773%" y="207.50"></text></g><g><title> 2]&gt;&gt; (2 samples, 0.02%)</title><rect x="30.1906%" y="181" width="0.0181%" height="15" fill="rgb(222,22,37)" fg:x="3343" fg:w="2"/><text x="30.4406%" y="191.50"></text></g><g><title>nn`tensor_rs::impl_binary_ops::_&lt;impl core::ops::arith::AddAssign&lt;&amp;tensor_rs::TensorBase&lt;S,B&gt;&gt; for tensor_rs::TensorBase&lt;S,A&gt;&gt;::add_assign (801 samples, 7.23%)</title><rect x="30.2357%" y="197" width="7.2338%" height="15" fill="rgb(237,53,32)" fg:x="3348" fg:w="801"/><text x="30.4857%" y="207.50">nn`tensor_..</text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.03%)</title><rect x="37.4786%" y="181" width="0.0271%" height="15" fill="rgb(233,25,53)" fg:x="4150" fg:w="3"/><text x="37.7286%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (4 samples, 0.04%)</title><rect x="37.5147%" y="181" width="0.0361%" height="15" fill="rgb(210,40,34)" fg:x="4154" fg:w="4"/><text x="37.7647%" y="191.50"></text></g><g><title>nn`tensor_rs::impl_binary_ops::_&lt;impl core::ops::arith::AddAssign&lt;tensor_rs::TensorBase&lt;S,B&gt;&gt; for tensor_rs::TensorBase&lt;S,A&gt;&gt;::add_assign (10 samples, 0.09%)</title><rect x="37.4695%" y="197" width="0.0903%" height="15" fill="rgb(241,220,44)" fg:x="4149" fg:w="10"/><text x="37.7195%" y="207.50"></text></g><g><title>nn`tensor_rs::impl_binary_ops::_&lt;impl core::ops::arith::SubAssign&lt;tensor_rs::TensorBase&lt;S,B&gt;&gt; for tensor_rs::TensorBase&lt;S,A&gt;&gt;::sub_assign (80 samples, 0.72%)</title><rect x="37.5689%" y="197" width="0.7225%" height="15" fill="rgb(235,28,35)" fg:x="4160" fg:w="80"/><text x="37.8189%" y="207.50"></text></g><g><title>nn`tensor_rs::impl_methods::_&lt;impl tensor_rs::TensorBase&lt;S,A&gt;&gt;::put_backward_ops (2 samples, 0.02%)</title><rect x="38.2913%" y="197" width="0.0181%" height="15" fill="rgb(210,56,17)" fg:x="4240" fg:w="2"/><text x="38.5413%" y="207.50"></text></g><g><title>nn`tensor_rs::impl_methods::_&lt;impl tensor_rs::TensorBase&lt;S,tensor_rs::OwnedData&lt;Dtype&gt;&gt;&gt;::from_vec (2 samples, 0.02%)</title><rect x="38.3094%" y="197" width="0.0181%" height="15" fill="rgb(224,130,29)" fg:x="4242" fg:w="2"/><text x="38.5594%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.02%)</title><rect x="38.3275%" y="165" width="0.0181%" height="15" fill="rgb(235,212,8)" fg:x="4244" fg:w="2"/><text x="38.5775%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.02%)</title><rect x="38.3275%" y="149" width="0.0181%" height="15" fill="rgb(223,33,50)" fg:x="4244" fg:w="2"/><text x="38.5775%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.02%)</title><rect x="38.3275%" y="133" width="0.0181%" height="15" fill="rgb(219,149,13)" fg:x="4244" fg:w="2"/><text x="38.5775%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (3 samples, 0.03%)</title><rect x="38.3455%" y="165" width="0.0271%" height="15" fill="rgb(250,156,29)" fg:x="4246" fg:w="3"/><text x="38.5955%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.03%)</title><rect x="38.3726%" y="165" width="0.0271%" height="15" fill="rgb(216,193,19)" fg:x="4249" fg:w="3"/><text x="38.6226%" y="175.50"></text></g><g><title>nn`core::ops::function::FnOnce::call_once{{vtable.shim}} (2 samples, 0.02%)</title><rect x="38.4178%" y="165" width="0.0181%" height="15" fill="rgb(216,135,14)" fg:x="4254" fg:w="2"/><text x="38.6678%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (4 samples, 0.04%)</title><rect x="38.4629%" y="149" width="0.0361%" height="15" fill="rgb(241,47,5)" fg:x="4259" fg:w="4"/><text x="38.7129%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (22 samples, 0.20%)</title><rect x="38.4991%" y="149" width="0.1987%" height="15" fill="rgb(233,42,35)" fg:x="4263" fg:w="22"/><text x="38.7491%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (10 samples, 0.09%)</title><rect x="38.6074%" y="133" width="0.0903%" height="15" fill="rgb(231,13,6)" fg:x="4275" fg:w="10"/><text x="38.8574%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (19 samples, 0.17%)</title><rect x="38.7068%" y="149" width="0.1716%" height="15" fill="rgb(207,181,40)" fg:x="4286" fg:w="19"/><text x="38.9568%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (3 samples, 0.03%)</title><rect x="38.8784%" y="149" width="0.0271%" height="15" fill="rgb(254,173,49)" fg:x="4305" fg:w="3"/><text x="39.1284%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset_pattern16 (6 samples, 0.05%)</title><rect x="38.9054%" y="149" width="0.0542%" height="15" fill="rgb(221,1,38)" fg:x="4308" fg:w="6"/><text x="39.1554%" y="159.50"></text></g><g><title>nn`DYLD-STUB$$free (2 samples, 0.02%)</title><rect x="38.9596%" y="149" width="0.0181%" height="15" fill="rgb(206,124,46)" fg:x="4314" fg:w="2"/><text x="39.2096%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (4 samples, 0.04%)</title><rect x="39.1583%" y="117" width="0.0361%" height="15" fill="rgb(249,21,11)" fg:x="4336" fg:w="4"/><text x="39.4083%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.03%)</title><rect x="39.1673%" y="101" width="0.0271%" height="15" fill="rgb(222,201,40)" fg:x="4337" fg:w="3"/><text x="39.4173%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`medium_malloc_should_clear (5 samples, 0.05%)</title><rect x="39.2306%" y="101" width="0.0452%" height="15" fill="rgb(235,61,29)" fg:x="4344" fg:w="5"/><text x="39.4806%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`medium_malloc_from_free_list (3 samples, 0.03%)</title><rect x="39.2486%" y="85" width="0.0271%" height="15" fill="rgb(219,207,3)" fg:x="4346" fg:w="3"/><text x="39.4986%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (5 samples, 0.05%)</title><rect x="39.3299%" y="69" width="0.0452%" height="15" fill="rgb(222,56,46)" fg:x="4355" fg:w="5"/><text x="39.5799%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (14 samples, 0.13%)</title><rect x="39.2757%" y="101" width="0.1264%" height="15" fill="rgb(239,76,54)" fg:x="4349" fg:w="14"/><text x="39.5257%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (11 samples, 0.10%)</title><rect x="39.3028%" y="85" width="0.0993%" height="15" fill="rgb(231,124,27)" fg:x="4352" fg:w="11"/><text x="39.5528%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (3 samples, 0.03%)</title><rect x="39.3751%" y="69" width="0.0271%" height="15" fill="rgb(249,195,6)" fg:x="4360" fg:w="3"/><text x="39.6251%" y="79.50"></text></g><g><title>libsystem_platform.dylib`__bzero (159 samples, 1.44%)</title><rect x="39.4021%" y="101" width="1.4359%" height="15" fill="rgb(237,174,47)" fg:x="4363" fg:w="159"/><text x="39.6521%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (202 samples, 1.82%)</title><rect x="39.1403%" y="133" width="1.8243%" height="15" fill="rgb(206,201,31)" fg:x="4334" fg:w="202"/><text x="39.3903%" y="143.50">l..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (195 samples, 1.76%)</title><rect x="39.2035%" y="117" width="1.7610%" height="15" fill="rgb(231,57,52)" fg:x="4341" fg:w="195"/><text x="39.4535%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (14 samples, 0.13%)</title><rect x="40.8381%" y="101" width="0.1264%" height="15" fill="rgb(248,177,22)" fg:x="4522" fg:w="14"/><text x="41.0881%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.03%)</title><rect x="40.9645%" y="133" width="0.0271%" height="15" fill="rgb(215,211,37)" fg:x="4536" fg:w="3"/><text x="41.2145%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (3 samples, 0.03%)</title><rect x="41.0006%" y="133" width="0.0271%" height="15" fill="rgb(241,128,51)" fg:x="4540" fg:w="3"/><text x="41.2506%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (9 samples, 0.08%)</title><rect x="41.2535%" y="117" width="0.0813%" height="15" fill="rgb(227,165,31)" fg:x="4568" fg:w="9"/><text x="41.5035%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free (36 samples, 0.33%)</title><rect x="41.0277%" y="133" width="0.3251%" height="15" fill="rgb(228,167,24)" fg:x="4543" fg:w="36"/><text x="41.2777%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (7 samples, 0.06%)</title><rect x="41.3528%" y="117" width="0.0632%" height="15" fill="rgb(228,143,12)" fg:x="4579" fg:w="7"/><text x="41.6028%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_small (14 samples, 0.13%)</title><rect x="41.3528%" y="133" width="0.1264%" height="15" fill="rgb(249,149,8)" fg:x="4579" fg:w="14"/><text x="41.6028%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (7 samples, 0.06%)</title><rect x="41.4161%" y="117" width="0.0632%" height="15" fill="rgb(243,35,44)" fg:x="4586" fg:w="7"/><text x="41.6661%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (10 samples, 0.09%)</title><rect x="41.4883%" y="133" width="0.0903%" height="15" fill="rgb(246,89,9)" fg:x="4594" fg:w="10"/><text x="41.7383%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (7 samples, 0.06%)</title><rect x="41.5786%" y="133" width="0.0632%" height="15" fill="rgb(233,213,13)" fg:x="4604" fg:w="7"/><text x="41.8286%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset_pattern16 (10 samples, 0.09%)</title><rect x="41.6689%" y="133" width="0.0903%" height="15" fill="rgb(233,141,41)" fg:x="4614" fg:w="10"/><text x="41.9189%" y="143.50"></text></g><g><title>nn`&lt;T as core::any::Any&gt;::type_id (2 samples, 0.02%)</title><rect x="41.7592%" y="133" width="0.0181%" height="15" fill="rgb(239,167,4)" fg:x="4624" fg:w="2"/><text x="42.0092%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.03%)</title><rect x="41.7773%" y="117" width="0.0271%" height="15" fill="rgb(209,217,16)" fg:x="4626" fg:w="3"/><text x="42.0273%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.03%)</title><rect x="41.7773%" y="101" width="0.0271%" height="15" fill="rgb(219,88,35)" fg:x="4626" fg:w="3"/><text x="42.0273%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.02%)</title><rect x="41.7863%" y="85" width="0.0181%" height="15" fill="rgb(220,193,23)" fg:x="4627" fg:w="2"/><text x="42.0363%" y="95.50"></text></g><g><title>nn`&lt;tensor_rs::TensorBase&lt;S,tensor_rs::OwnedData&lt;Dtype&gt;&gt; as tensor_rs::impl_constructors::TensorConstructors&lt;Dtype&gt;&gt;::ones (4 samples, 0.04%)</title><rect x="41.7773%" y="133" width="0.0361%" height="15" fill="rgb(230,90,52)" fg:x="4626" fg:w="4"/><text x="42.0273%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (4 samples, 0.04%)</title><rect x="41.8134%" y="117" width="0.0361%" height="15" fill="rgb(252,106,19)" fg:x="4630" fg:w="4"/><text x="42.0634%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (3 samples, 0.03%)</title><rect x="41.8225%" y="101" width="0.0271%" height="15" fill="rgb(206,74,20)" fg:x="4631" fg:w="3"/><text x="42.0725%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.02%)</title><rect x="41.8315%" y="85" width="0.0181%" height="15" fill="rgb(230,138,44)" fg:x="4632" fg:w="2"/><text x="42.0815%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.02%)</title><rect x="41.8495%" y="69" width="0.0181%" height="15" fill="rgb(235,182,43)" fg:x="4634" fg:w="2"/><text x="42.0995%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.03%)</title><rect x="41.8495%" y="101" width="0.0271%" height="15" fill="rgb(242,16,51)" fg:x="4634" fg:w="3"/><text x="42.0995%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.03%)</title><rect x="41.8495%" y="85" width="0.0271%" height="15" fill="rgb(248,9,4)" fg:x="4634" fg:w="3"/><text x="42.0995%" y="95.50"></text></g><g><title>nn`&lt;tensor_rs::TensorBase&lt;S,tensor_rs::OwnedData&lt;Dtype&gt;&gt; as tensor_rs::impl_constructors::TensorConstructors&lt;Dtype&gt;&gt;::zeros (8 samples, 0.07%)</title><rect x="41.8134%" y="133" width="0.0722%" height="15" fill="rgb(210,31,22)" fg:x="4630" fg:w="8"/><text x="42.0634%" y="143.50"></text></g><g><title>nn`tensor_rs::impl_methods::_&lt;impl tensor_rs::TensorBase&lt;S,tensor_rs::OwnedData&lt;Dtype&gt;&gt;&gt;::from_vec (4 samples, 0.04%)</title><rect x="41.8495%" y="117" width="0.0361%" height="15" fill="rgb(239,54,39)" fg:x="4634" fg:w="4"/><text x="42.0995%" y="127.50"></text></g><g><title>nn`DYLD-STUB$$free (3 samples, 0.03%)</title><rect x="41.8947%" y="133" width="0.0271%" height="15" fill="rgb(230,99,41)" fg:x="4639" fg:w="3"/><text x="42.1447%" y="143.50"></text></g><g><title>nn`DYLD-STUB$$malloc (5 samples, 0.05%)</title><rect x="41.9218%" y="133" width="0.0452%" height="15" fill="rgb(253,106,12)" fg:x="4642" fg:w="5"/><text x="42.1718%" y="143.50"></text></g><g><title>nn`DYLD-STUB$$memset_pattern16 (2 samples, 0.02%)</title><rect x="41.9669%" y="133" width="0.0181%" height="15" fill="rgb(213,46,41)" fg:x="4647" fg:w="2"/><text x="42.2169%" y="143.50"></text></g><g><title>nn`__rdl_alloc (2 samples, 0.02%)</title><rect x="41.9850%" y="133" width="0.0181%" height="15" fill="rgb(215,133,35)" fg:x="4649" fg:w="2"/><text x="42.2350%" y="143.50"></text></g><g><title>nn`alloc::vec::from_elem (4 samples, 0.04%)</title><rect x="42.0121%" y="133" width="0.0361%" height="15" fill="rgb(213,28,5)" fg:x="4652" fg:w="4"/><text x="42.2621%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.03%)</title><rect x="42.0211%" y="117" width="0.0271%" height="15" fill="rgb(215,77,49)" fg:x="4653" fg:w="3"/><text x="42.2711%" y="127.50"></text></g><g><title>nn`core::hash::BuildHasher::hash_one (7 samples, 0.06%)</title><rect x="42.0482%" y="133" width="0.0632%" height="15" fill="rgb(248,100,22)" fg:x="4656" fg:w="7"/><text x="42.2982%" y="143.50"></text></g><g><title>nn`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (6 samples, 0.05%)</title><rect x="42.1205%" y="133" width="0.0542%" height="15" fill="rgb(208,67,9)" fg:x="4664" fg:w="6"/><text x="42.3705%" y="143.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (10 samples, 0.09%)</title><rect x="46.0038%" y="117" width="0.0903%" height="15" fill="rgb(219,133,21)" fg:x="5094" fg:w="10"/><text x="46.2538%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.02%)</title><rect x="46.1393%" y="101" width="0.0181%" height="15" fill="rgb(246,46,29)" fg:x="5109" fg:w="2"/><text x="46.3893%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (7 samples, 0.06%)</title><rect x="46.1934%" y="53" width="0.0632%" height="15" fill="rgb(246,185,52)" fg:x="5115" fg:w="7"/><text x="46.4434%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (20 samples, 0.18%)</title><rect x="46.0941%" y="117" width="0.1806%" height="15" fill="rgb(252,136,11)" fg:x="5104" fg:w="20"/><text x="46.3441%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (13 samples, 0.12%)</title><rect x="46.1573%" y="101" width="0.1174%" height="15" fill="rgb(219,138,53)" fg:x="5111" fg:w="13"/><text x="46.4073%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (12 samples, 0.11%)</title><rect x="46.1664%" y="85" width="0.1084%" height="15" fill="rgb(211,51,23)" fg:x="5112" fg:w="12"/><text x="46.4164%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (9 samples, 0.08%)</title><rect x="46.1934%" y="69" width="0.0813%" height="15" fill="rgb(247,221,28)" fg:x="5115" fg:w="9"/><text x="46.4434%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (2 samples, 0.02%)</title><rect x="46.2567%" y="53" width="0.0181%" height="15" fill="rgb(251,222,45)" fg:x="5122" fg:w="2"/><text x="46.5067%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (2 samples, 0.02%)</title><rect x="46.2747%" y="117" width="0.0181%" height="15" fill="rgb(217,162,53)" fg:x="5124" fg:w="2"/><text x="46.5247%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_size (3 samples, 0.03%)</title><rect x="46.3379%" y="101" width="0.0271%" height="15" fill="rgb(229,93,14)" fg:x="5131" fg:w="3"/><text x="46.5879%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free (10 samples, 0.09%)</title><rect x="46.2928%" y="117" width="0.0903%" height="15" fill="rgb(209,67,49)" fg:x="5126" fg:w="10"/><text x="46.5428%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (2 samples, 0.02%)</title><rect x="46.3650%" y="101" width="0.0181%" height="15" fill="rgb(213,87,29)" fg:x="5134" fg:w="2"/><text x="46.6150%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (2 samples, 0.02%)</title><rect x="46.4102%" y="101" width="0.0181%" height="15" fill="rgb(205,151,52)" fg:x="5139" fg:w="2"/><text x="46.6602%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_small (6 samples, 0.05%)</title><rect x="46.3831%" y="117" width="0.0542%" height="15" fill="rgb(253,215,39)" fg:x="5136" fg:w="6"/><text x="46.6331%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (2 samples, 0.02%)</title><rect x="46.4373%" y="117" width="0.0181%" height="15" fill="rgb(221,220,41)" fg:x="5142" fg:w="2"/><text x="46.6873%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (3 samples, 0.03%)</title><rect x="46.4734%" y="117" width="0.0271%" height="15" fill="rgb(218,133,21)" fg:x="5146" fg:w="3"/><text x="46.7234%" y="127.50"></text></g><g><title>nn`matrixmultiply::gemm::gemm_loop (483 samples, 4.36%)</title><rect x="42.1747%" y="133" width="4.3620%" height="15" fill="rgb(221,193,43)" fg:x="4670" fg:w="483"/><text x="42.4247%" y="143.50">nn`ma..</text></g><g><title>nn`matrixmultiply::gemm::MASK_BUF::__getit (3 samples, 0.03%)</title><rect x="46.5095%" y="117" width="0.0271%" height="15" fill="rgb(240,128,52)" fg:x="5150" fg:w="3"/><text x="46.7595%" y="127.50"></text></g><g><title>nn`matrixmultiply::gemm::masked_kernel (3,702 samples, 33.43%)</title><rect x="46.5366%" y="133" width="33.4327%" height="15" fill="rgb(253,114,12)" fg:x="5153" fg:w="3702"/><text x="46.7866%" y="143.50">nn`matrixmultiply::gemm::masked_kernel</text></g><g><title>nn`matrixmultiply::gemm::pack (551 samples, 4.98%)</title><rect x="79.9693%" y="133" width="4.9761%" height="15" fill="rgb(215,223,47)" fg:x="8855" fg:w="551"/><text x="80.2193%" y="143.50">nn`mat..</text></g><g><title>nn`&lt;tensor_rs::unique_id::UniqueId as core::hash::Hash&gt;::hash (4 samples, 0.04%)</title><rect x="84.9544%" y="117" width="0.0361%" height="15" fill="rgb(248,225,23)" fg:x="9407" fg:w="4"/><text x="85.2044%" y="127.50"></text></g><g><title>nn`tensor_rs::gradient::GradientMap::grad_by_id (17 samples, 0.15%)</title><rect x="84.9454%" y="133" width="0.1535%" height="15" fill="rgb(250,108,0)" fg:x="9406" fg:w="17"/><text x="85.1954%" y="143.50"></text></g><g><title>nn`core::hash::BuildHasher::hash_one (12 samples, 0.11%)</title><rect x="84.9905%" y="117" width="0.1084%" height="15" fill="rgb(228,208,7)" fg:x="9411" fg:w="12"/><text x="85.2405%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (4 samples, 0.04%)</title><rect x="85.5414%" y="101" width="0.0361%" height="15" fill="rgb(244,45,10)" fg:x="9472" fg:w="4"/><text x="85.7914%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (15 samples, 0.14%)</title><rect x="85.6769%" y="85" width="0.1355%" height="15" fill="rgb(207,125,25)" fg:x="9487" fg:w="15"/><text x="85.9269%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (44 samples, 0.40%)</title><rect x="85.4330%" y="117" width="0.3974%" height="15" fill="rgb(210,195,18)" fg:x="9460" fg:w="44"/><text x="85.6830%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (28 samples, 0.25%)</title><rect x="85.5775%" y="101" width="0.2529%" height="15" fill="rgb(249,80,12)" fg:x="9476" fg:w="28"/><text x="85.8275%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.02%)</title><rect x="85.8123%" y="85" width="0.0181%" height="15" fill="rgb(221,65,9)" fg:x="9502" fg:w="2"/><text x="86.0623%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (4 samples, 0.04%)</title><rect x="85.8304%" y="117" width="0.0361%" height="15" fill="rgb(235,49,36)" fg:x="9504" fg:w="4"/><text x="86.0804%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (3 samples, 0.03%)</title><rect x="85.8665%" y="117" width="0.0271%" height="15" fill="rgb(225,32,20)" fg:x="9508" fg:w="3"/><text x="86.1165%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.02%)</title><rect x="85.8936%" y="117" width="0.0181%" height="15" fill="rgb(215,141,46)" fg:x="9511" fg:w="2"/><text x="86.1436%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (2 samples, 0.02%)</title><rect x="85.9207%" y="117" width="0.0181%" height="15" fill="rgb(250,160,47)" fg:x="9514" fg:w="2"/><text x="86.1707%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset_pattern16 (3 samples, 0.03%)</title><rect x="85.9388%" y="117" width="0.0271%" height="15" fill="rgb(216,222,40)" fg:x="9516" fg:w="3"/><text x="86.1888%" y="127.50"></text></g><g><title>nn`&lt;tensor_rs::unique_id::UniqueId as core::hash::Hash&gt;::hash (11 samples, 0.10%)</title><rect x="85.9659%" y="117" width="0.0993%" height="15" fill="rgb(234,217,39)" fg:x="9519" fg:w="11"/><text x="86.2159%" y="127.50"></text></g><g><title>nn`DYLD-STUB$$free (2 samples, 0.02%)</title><rect x="86.0652%" y="117" width="0.0181%" height="15" fill="rgb(207,178,40)" fg:x="9530" fg:w="2"/><text x="86.3152%" y="127.50"></text></g><g><title>nn`DYLD-STUB$$memset_pattern16 (3 samples, 0.03%)</title><rect x="86.1013%" y="117" width="0.0271%" height="15" fill="rgb(221,136,13)" fg:x="9534" fg:w="3"/><text x="86.3513%" y="127.50"></text></g><g><title>nn`__rdl_alloc (2 samples, 0.02%)</title><rect x="86.1284%" y="117" width="0.0181%" height="15" fill="rgb(249,199,10)" fg:x="9537" fg:w="2"/><text x="86.3784%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (6 samples, 0.05%)</title><rect x="86.2729%" y="85" width="0.0542%" height="15" fill="rgb(249,222,13)" fg:x="9553" fg:w="6"/><text x="86.5229%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (13 samples, 0.12%)</title><rect x="86.3813%" y="69" width="0.1174%" height="15" fill="rgb(244,185,38)" fg:x="9565" fg:w="13"/><text x="86.6313%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (5 samples, 0.05%)</title><rect x="86.4535%" y="53" width="0.0452%" height="15" fill="rgb(236,202,9)" fg:x="9573" fg:w="5"/><text x="86.7035%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (22 samples, 0.20%)</title><rect x="86.3271%" y="85" width="0.1987%" height="15" fill="rgb(250,229,37)" fg:x="9559" fg:w="22"/><text x="86.5771%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (3 samples, 0.03%)</title><rect x="86.4987%" y="69" width="0.0271%" height="15" fill="rgb(206,174,23)" fg:x="9578" fg:w="3"/><text x="86.7487%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`medium_free_list_add_ptr (2 samples, 0.02%)</title><rect x="86.5619%" y="37" width="0.0181%" height="15" fill="rgb(211,33,43)" fg:x="9585" fg:w="2"/><text x="86.8119%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`medium_malloc_should_clear (6 samples, 0.05%)</title><rect x="86.5438%" y="69" width="0.0542%" height="15" fill="rgb(245,58,50)" fg:x="9583" fg:w="6"/><text x="86.7938%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`medium_malloc_from_free_list (4 samples, 0.04%)</title><rect x="86.5619%" y="53" width="0.0361%" height="15" fill="rgb(244,68,36)" fg:x="9585" fg:w="4"/><text x="86.8119%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (6 samples, 0.05%)</title><rect x="86.5980%" y="69" width="0.0542%" height="15" fill="rgb(232,229,15)" fg:x="9589" fg:w="6"/><text x="86.8480%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (5 samples, 0.05%)</title><rect x="86.6071%" y="53" width="0.0452%" height="15" fill="rgb(254,30,23)" fg:x="9590" fg:w="5"/><text x="86.8571%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (4 samples, 0.04%)</title><rect x="86.6161%" y="37" width="0.0361%" height="15" fill="rgb(235,160,14)" fg:x="9591" fg:w="4"/><text x="86.8661%" y="47.50"></text></g><g><title>libsystem_platform.dylib`__bzero (199 samples, 1.80%)</title><rect x="86.6522%" y="69" width="1.7972%" height="15" fill="rgb(212,155,44)" fg:x="9595" fg:w="199"/><text x="86.9022%" y="79.50">l..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (271 samples, 2.45%)</title><rect x="86.1916%" y="101" width="2.4474%" height="15" fill="rgb(226,2,50)" fg:x="9544" fg:w="271"/><text x="86.4416%" y="111.50">li..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (232 samples, 2.10%)</title><rect x="86.5438%" y="85" width="2.0952%" height="15" fill="rgb(234,177,6)" fg:x="9583" fg:w="232"/><text x="86.7938%" y="95.50">l..</text></g><g><title>libsystem_platform.dylib`_platform_memset (21 samples, 0.19%)</title><rect x="88.4494%" y="69" width="0.1897%" height="15" fill="rgb(217,24,9)" fg:x="9794" fg:w="21"/><text x="88.6994%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_calloc (2 samples, 0.02%)</title><rect x="88.6390%" y="101" width="0.0181%" height="15" fill="rgb(220,13,46)" fg:x="9815" fg:w="2"/><text x="88.8890%" y="111.50"></text></g><g><title>nn`alloc::vec::from_elem (278 samples, 2.51%)</title><rect x="86.1555%" y="117" width="2.5106%" height="15" fill="rgb(239,221,27)" fg:x="9540" fg:w="278"/><text x="86.4055%" y="127.50">nn..</text></g><g><title>nn`core::hash::BuildHasher::hash_one (15 samples, 0.14%)</title><rect x="88.6661%" y="117" width="0.1355%" height="15" fill="rgb(222,198,25)" fg:x="9818" fg:w="15"/><text x="88.9161%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (11 samples, 0.10%)</title><rect x="89.0364%" y="101" width="0.0993%" height="15" fill="rgb(211,99,13)" fg:x="9859" fg:w="11"/><text x="89.2864%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (7 samples, 0.06%)</title><rect x="89.0725%" y="85" width="0.0632%" height="15" fill="rgb(232,111,31)" fg:x="9863" fg:w="7"/><text x="89.3225%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (5 samples, 0.05%)</title><rect x="89.0906%" y="69" width="0.0452%" height="15" fill="rgb(245,82,37)" fg:x="9865" fg:w="5"/><text x="89.3406%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (3 samples, 0.03%)</title><rect x="89.1086%" y="53" width="0.0271%" height="15" fill="rgb(227,149,46)" fg:x="9867" fg:w="3"/><text x="89.3586%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (5 samples, 0.05%)</title><rect x="89.1899%" y="85" width="0.0452%" height="15" fill="rgb(218,36,50)" fg:x="9876" fg:w="5"/><text x="89.4399%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free (11 samples, 0.10%)</title><rect x="89.1448%" y="101" width="0.0993%" height="15" fill="rgb(226,80,48)" fg:x="9871" fg:w="11"/><text x="89.3948%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (3 samples, 0.03%)</title><rect x="89.2441%" y="101" width="0.0271%" height="15" fill="rgb(238,224,15)" fg:x="9882" fg:w="3"/><text x="89.4941%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2 samples, 0.02%)</title><rect x="89.2531%" y="85" width="0.0181%" height="15" fill="rgb(241,136,10)" fg:x="9883" fg:w="2"/><text x="89.5031%" y="95.50"></text></g><g><title>nn`&lt;tensor_rs::unique_id::UniqueId as core::hash::Hash&gt;::hash (18 samples, 0.16%)</title><rect x="89.2712%" y="101" width="0.1626%" height="15" fill="rgb(208,32,45)" fg:x="9885" fg:w="18"/><text x="89.5212%" y="111.50"></text></g><g><title>nn`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (110 samples, 0.99%)</title><rect x="88.8016%" y="117" width="0.9934%" height="15" fill="rgb(207,135,9)" fg:x="9833" fg:w="110"/><text x="89.0516%" y="127.50"></text></g><g><title>nn`core::hash::BuildHasher::hash_one (40 samples, 0.36%)</title><rect x="89.4338%" y="101" width="0.3612%" height="15" fill="rgb(206,86,44)" fg:x="9903" fg:w="40"/><text x="89.6838%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.02%)</title><rect x="90.0117%" y="85" width="0.0181%" height="15" fill="rgb(245,177,15)" fg:x="9967" fg:w="2"/><text x="90.2617%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (39 samples, 0.35%)</title><rect x="89.9214%" y="101" width="0.3522%" height="15" fill="rgb(206,64,50)" fg:x="9957" fg:w="39"/><text x="90.1714%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (27 samples, 0.24%)</title><rect x="90.0298%" y="85" width="0.2438%" height="15" fill="rgb(234,36,40)" fg:x="9969" fg:w="27"/><text x="90.2798%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (21 samples, 0.19%)</title><rect x="90.0840%" y="69" width="0.1897%" height="15" fill="rgb(213,64,8)" fg:x="9975" fg:w="21"/><text x="90.3340%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (7 samples, 0.06%)</title><rect x="90.2104%" y="53" width="0.0632%" height="15" fill="rgb(210,75,36)" fg:x="9989" fg:w="7"/><text x="90.4604%" y="63.50"></text></g><g><title>nn`tensor_rs::impl_methods::_&lt;impl tensor_rs::TensorBase&lt;S,tensor_rs::OwnedData&lt;Dtype&gt;&gt;&gt;::from_vec (58 samples, 0.52%)</title><rect x="89.7950%" y="117" width="0.5238%" height="15" fill="rgb(229,88,21)" fg:x="9943" fg:w="58"/><text x="90.0450%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (5 samples, 0.05%)</title><rect x="90.2736%" y="101" width="0.0452%" height="15" fill="rgb(252,204,47)" fg:x="9996" fg:w="5"/><text x="90.5236%" y="111.50"></text></g><g><title>nn`tensor_rs::gradient::GradientMap::mut_grad_by_id (582 samples, 5.26%)</title><rect x="85.0989%" y="133" width="5.2560%" height="15" fill="rgb(208,77,27)" fg:x="9423" fg:w="582"/><text x="85.3489%" y="143.50">nn`ten..</text></g><g><title>nn`tensor_rs::unique_id::unique_id (4 samples, 0.04%)</title><rect x="90.3188%" y="117" width="0.0361%" height="15" fill="rgb(221,76,26)" fg:x="10001" fg:w="4"/><text x="90.5688%" y="127.50"></text></g><g><title>nn`tensor_rs::impl_binary_ops::_&lt;impl core::ops::arith::AddAssign&lt;&amp;tensor_rs::TensorBase&lt;S,B&gt;&gt; for tensor_rs::TensorBase&lt;S,A&gt;&gt;::add_assign (31 samples, 0.28%)</title><rect x="90.3549%" y="133" width="0.2800%" height="15" fill="rgb(225,139,18)" fg:x="10005" fg:w="31"/><text x="90.6049%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`medium_size (2 samples, 0.02%)</title><rect x="98.0674%" y="101" width="0.0181%" height="15" fill="rgb(230,137,11)" fg:x="10859" fg:w="2"/><text x="98.3174%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (6 samples, 0.05%)</title><rect x="98.0854%" y="101" width="0.0542%" height="15" fill="rgb(212,28,1)" fg:x="10861" fg:w="6"/><text x="98.3354%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_size (2 samples, 0.02%)</title><rect x="98.1486%" y="101" width="0.0181%" height="15" fill="rgb(248,164,17)" fg:x="10868" fg:w="2"/><text x="98.3986%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free (28 samples, 0.25%)</title><rect x="97.9229%" y="117" width="0.2529%" height="15" fill="rgb(222,171,42)" fg:x="10843" fg:w="28"/><text x="98.1729%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (9 samples, 0.08%)</title><rect x="98.1757%" y="117" width="0.0813%" height="15" fill="rgb(243,84,45)" fg:x="10871" fg:w="9"/><text x="98.4257%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_small (3 samples, 0.03%)</title><rect x="98.2570%" y="117" width="0.0271%" height="15" fill="rgb(252,49,23)" fg:x="10880" fg:w="3"/><text x="98.5070%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (3 samples, 0.03%)</title><rect x="98.2570%" y="101" width="0.0271%" height="15" fill="rgb(215,19,7)" fg:x="10880" fg:w="3"/><text x="98.5070%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (10 samples, 0.09%)</title><rect x="98.2931%" y="117" width="0.0903%" height="15" fill="rgb(238,81,41)" fg:x="10884" fg:w="10"/><text x="98.5431%" y="127.50"></text></g><g><title>nn`tensor_rs::impl_binary_ops::_&lt;impl core::ops::arith::AddAssign&lt;tensor_rs::TensorBase&lt;S,B&gt;&gt; for tensor_rs::TensorBase&lt;S,A&gt;&gt;::add_assign (860 samples, 7.77%)</title><rect x="90.6349%" y="133" width="7.7666%" height="15" fill="rgb(210,199,37)" fg:x="10036" fg:w="860"/><text x="90.8849%" y="143.50">nn`tensor_r..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (2 samples, 0.02%)</title><rect x="98.3835%" y="117" width="0.0181%" height="15" fill="rgb(244,192,49)" fg:x="10894" fg:w="2"/><text x="98.6335%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.03%)</title><rect x="98.5460%" y="85" width="0.0271%" height="15" fill="rgb(226,211,11)" fg:x="10912" fg:w="3"/><text x="98.7960%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (9 samples, 0.08%)</title><rect x="98.5009%" y="117" width="0.0813%" height="15" fill="rgb(236,162,54)" fg:x="10907" fg:w="9"/><text x="98.7509%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (6 samples, 0.05%)</title><rect x="98.5280%" y="101" width="0.0542%" height="15" fill="rgb(220,229,9)" fg:x="10910" fg:w="6"/><text x="98.7780%" y="111.50"></text></g><g><title>nn`tensor_rs::impl_methods::_&lt;impl tensor_rs::TensorBase&lt;S,tensor_rs::OwnedData&lt;Dtype&gt;&gt;&gt;::from_vec (5 samples, 0.05%)</title><rect x="98.5821%" y="117" width="0.0452%" height="15" fill="rgb(250,87,22)" fg:x="10916" fg:w="5"/><text x="98.8321%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (5 samples, 0.05%)</title><rect x="98.5821%" y="101" width="0.0452%" height="15" fill="rgb(239,43,17)" fg:x="10916" fg:w="5"/><text x="98.8321%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.02%)</title><rect x="98.6092%" y="85" width="0.0181%" height="15" fill="rgb(231,177,25)" fg:x="10919" fg:w="2"/><text x="98.8592%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.02%)</title><rect x="98.6092%" y="69" width="0.0181%" height="15" fill="rgb(219,179,1)" fg:x="10919" fg:w="2"/><text x="98.8592%" y="79.50"></text></g><g><title>nn`tensor_rs::impl_binary_ops::_&lt;impl core::ops::arith::Mul&lt;&amp;tensor_rs::TensorBase&lt;S,A&gt;&gt; for &amp;tensor_rs::TensorBase&lt;S,B&gt;&gt;::mul (26 samples, 0.23%)</title><rect x="98.4015%" y="133" width="0.2348%" height="15" fill="rgb(238,219,53)" fg:x="10896" fg:w="26"/><text x="98.6515%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.02%)</title><rect x="98.8982%" y="117" width="0.0181%" height="15" fill="rgb(232,167,36)" fg:x="10951" fg:w="2"/><text x="99.1482%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.02%)</title><rect x="98.8982%" y="101" width="0.0181%" height="15" fill="rgb(244,19,51)" fg:x="10951" fg:w="2"/><text x="99.1482%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free (7 samples, 0.06%)</title><rect x="98.9253%" y="117" width="0.0632%" height="15" fill="rgb(224,6,22)" fg:x="10954" fg:w="7"/><text x="99.1753%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (3 samples, 0.03%)</title><rect x="98.9614%" y="101" width="0.0271%" height="15" fill="rgb(224,145,5)" fg:x="10958" fg:w="3"/><text x="99.2114%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (2 samples, 0.02%)</title><rect x="98.9885%" y="117" width="0.0181%" height="15" fill="rgb(234,130,49)" fg:x="10961" fg:w="2"/><text x="99.2385%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (8 samples, 0.07%)</title><rect x="99.0427%" y="101" width="0.0722%" height="15" fill="rgb(254,6,2)" fg:x="10967" fg:w="8"/><text x="99.2927%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.04%)</title><rect x="99.0788%" y="85" width="0.0361%" height="15" fill="rgb(208,96,46)" fg:x="10971" fg:w="4"/><text x="99.3288%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.03%)</title><rect x="99.0879%" y="69" width="0.0271%" height="15" fill="rgb(239,3,39)" fg:x="10972" fg:w="3"/><text x="99.3379%" y="79.50"></text></g><g><title>nn`tensor_rs::impl_binary_ops::_&lt;impl core::ops::arith::Mul&lt;&amp;tensor_rs::TensorBase&lt;S,A&gt;&gt; for tensor_rs::TensorBase&lt;S,B&gt;&gt;::mul (54 samples, 0.49%)</title><rect x="98.6363%" y="133" width="0.4877%" height="15" fill="rgb(233,210,1)" fg:x="10922" fg:w="54"/><text x="98.8863%" y="143.50"></text></g><g><title>nn`tensor_rs::impl_methods::_&lt;impl tensor_rs::TensorBase&lt;S,tensor_rs::OwnedData&lt;Dtype&gt;&gt;&gt;::from_vec (11 samples, 0.10%)</title><rect x="99.0247%" y="117" width="0.0993%" height="15" fill="rgb(244,137,37)" fg:x="10965" fg:w="11"/><text x="99.2747%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (6 samples, 0.05%)</title><rect x="99.1872%" y="117" width="0.0542%" height="15" fill="rgb(240,136,2)" fg:x="10983" fg:w="6"/><text x="99.4372%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (5 samples, 0.05%)</title><rect x="99.1962%" y="101" width="0.0452%" height="15" fill="rgb(239,18,37)" fg:x="10984" fg:w="5"/><text x="99.4462%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (5 samples, 0.05%)</title><rect x="99.1962%" y="85" width="0.0452%" height="15" fill="rgb(218,185,22)" fg:x="10984" fg:w="5"/><text x="99.4462%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.02%)</title><rect x="99.2233%" y="69" width="0.0181%" height="15" fill="rgb(225,218,4)" fg:x="10987" fg:w="2"/><text x="99.4733%" y="79.50"></text></g><g><title>nn`tensor_rs::impl_methods::_&lt;impl tensor_rs::TensorBase&lt;S,tensor_rs::OwnedData&lt;Dtype&gt;&gt;&gt;::from_vec (10 samples, 0.09%)</title><rect x="99.2595%" y="117" width="0.0903%" height="15" fill="rgb(230,182,32)" fg:x="10991" fg:w="10"/><text x="99.5095%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (7 samples, 0.06%)</title><rect x="99.2866%" y="101" width="0.0632%" height="15" fill="rgb(242,56,43)" fg:x="10994" fg:w="7"/><text x="99.5366%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.04%)</title><rect x="99.3136%" y="85" width="0.0361%" height="15" fill="rgb(233,99,24)" fg:x="10997" fg:w="4"/><text x="99.5636%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.03%)</title><rect x="99.3227%" y="69" width="0.0271%" height="15" fill="rgb(234,209,42)" fg:x="10998" fg:w="3"/><text x="99.5727%" y="79.50"></text></g><g><title>nn`tensor_rs::impl_methods::_&lt;impl tensor_rs::TensorBase&lt;S,A&gt;&gt;::map (26 samples, 0.23%)</title><rect x="99.1240%" y="133" width="0.2348%" height="15" fill="rgb(227,7,12)" fg:x="10976" fg:w="26"/><text x="99.3740%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.02%)</title><rect x="99.4220%" y="101" width="0.0181%" height="15" fill="rgb(245,203,43)" fg:x="11009" fg:w="2"/><text x="99.6720%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (6 samples, 0.05%)</title><rect x="99.4401%" y="85" width="0.0542%" height="15" fill="rgb(238,205,33)" fg:x="11011" fg:w="6"/><text x="99.6901%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (3 samples, 0.03%)</title><rect x="99.4672%" y="69" width="0.0271%" height="15" fill="rgb(231,56,7)" fg:x="11014" fg:w="3"/><text x="99.7172%" y="79.50"></text></g><g><title>nn`core::ops::function::FnOnce::call_once{{vtable.shim}} (6,701 samples, 60.52%)</title><rect x="38.9867%" y="149" width="60.5166%" height="15" fill="rgb(244,186,29)" fg:x="4317" fg:w="6701"/><text x="39.2367%" y="159.50">nn`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>nn`tensor_rs::impl_methods::_&lt;impl tensor_rs::TensorBase&lt;S,tensor_rs::OwnedData&lt;Dtype&gt;&gt;&gt;::from_vec (16 samples, 0.14%)</title><rect x="99.3588%" y="133" width="0.1445%" height="15" fill="rgb(234,111,31)" fg:x="11002" fg:w="16"/><text x="99.6088%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (10 samples, 0.09%)</title><rect x="99.4130%" y="117" width="0.0903%" height="15" fill="rgb(241,149,10)" fg:x="11008" fg:w="10"/><text x="99.6630%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (7 samples, 0.06%)</title><rect x="99.4401%" y="101" width="0.0632%" height="15" fill="rgb(249,206,44)" fg:x="11011" fg:w="7"/><text x="99.6901%" y="111.50"></text></g><g><title>nn`matrixmultiply::gemm::gemm_loop (2 samples, 0.02%)</title><rect x="99.5123%" y="149" width="0.0181%" height="15" fill="rgb(251,153,30)" fg:x="11019" fg:w="2"/><text x="99.7623%" y="159.50"></text></g><g><title>nn`matrixmultiply::gemm::sgemm (17 samples, 0.15%)</title><rect x="99.5304%" y="149" width="0.1535%" height="15" fill="rgb(239,152,38)" fg:x="11021" fg:w="17"/><text x="99.7804%" y="159.50"></text></g><g><title>nn`tensor_rs::gradient::GradientMap::mut_grad_by_id (2 samples, 0.02%)</title><rect x="99.6839%" y="149" width="0.0181%" height="15" fill="rgb(249,139,47)" fg:x="11038" fg:w="2"/><text x="99.9339%" y="159.50"></text></g><g><title>nn`tensor_rs::impl_binary_ops::_&lt;impl core::ops::arith::AddAssign&lt;&amp;tensor_rs::TensorBase&lt;S,B&gt;&gt; for tensor_rs::TensorBase&lt;S,A&gt;&gt;::add_assign (7 samples, 0.06%)</title><rect x="99.7020%" y="149" width="0.0632%" height="15" fill="rgb(244,64,35)" fg:x="11040" fg:w="7"/><text x="99.9520%" y="159.50"></text></g><g><title>nn`tensor_rs::impl_binary_ops::_&lt;impl core::ops::arith::Mul&lt;&amp;tensor_rs::TensorBase&lt;S,A&gt;&gt; for &amp;tensor_rs::TensorBase&lt;S,B&gt;&gt;::mul (3 samples, 0.03%)</title><rect x="99.7742%" y="149" width="0.0271%" height="15" fill="rgb(216,46,15)" fg:x="11048" fg:w="3"/><text x="100.0242%" y="159.50"></text></g><g><title>nn`tensor_rs::impl_binary_ops::_&lt;impl core::ops::arith::SubAssign&lt;&amp;tensor_rs::TensorBase&lt;S,B&gt;&gt; for tensor_rs::TensorBase&lt;S,A&gt;&gt;::sub_assign (3 samples, 0.03%)</title><rect x="99.8103%" y="149" width="0.0271%" height="15" fill="rgb(250,74,19)" fg:x="11052" fg:w="3"/><text x="100.0603%" y="159.50"></text></g><g><title>nn`tensor_rs::gradient::BackwardOps::execute (6,802 samples, 61.43%)</title><rect x="38.4358%" y="165" width="61.4287%" height="15" fill="rgb(249,42,33)" fg:x="4256" fg:w="6802"/><text x="38.6858%" y="175.50">nn`tensor_rs::gradient::BackwardOps::execute</text></g><g><title>nn`tensor_rs::impl_methods::_&lt;impl tensor_rs::TensorBase&lt;S,tensor_rs::OwnedData&lt;Dtype&gt;&gt;&gt;::from_vec (3 samples, 0.03%)</title><rect x="99.8374%" y="149" width="0.0271%" height="15" fill="rgb(242,149,17)" fg:x="11055" fg:w="3"/><text x="100.0874%" y="159.50"></text></g><g><title>nn`tensor_rs::impl_methods::_&lt;impl tensor_rs::TensorBase&lt;[usize (6,815 samples, 61.55%)</title><rect x="38.3275%" y="197" width="61.5461%" height="15" fill="rgb(244,29,21)" fg:x="4244" fg:w="6815"/><text x="38.5775%" y="207.50">nn`tensor_rs::impl_methods::_&lt;impl tensor_rs::TensorBase&lt;[usize</text></g><g><title> 0],A&gt;&gt;::backward (6,815 samples, 61.55%)</title><rect x="38.3275%" y="181" width="61.5461%" height="15" fill="rgb(220,130,37)" fg:x="4244" fg:w="6815"/><text x="38.5775%" y="191.50"> 0],A&gt;&gt;::backward</text></g><g><title>nn`tensor_rs::mnist::mnist::load_data (9 samples, 0.08%)</title><rect x="99.8736%" y="197" width="0.0813%" height="15" fill="rgb(211,67,2)" fg:x="11059" fg:w="9"/><text x="100.1236%" y="207.50"></text></g><g><title>nn`std::fs::read::inner (9 samples, 0.08%)</title><rect x="99.8736%" y="181" width="0.0813%" height="15" fill="rgb(235,68,52)" fg:x="11059" fg:w="9"/><text x="100.1236%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`read (9 samples, 0.08%)</title><rect x="99.8736%" y="165" width="0.0813%" height="15" fill="rgb(246,142,3)" fg:x="11059" fg:w="9"/><text x="100.1236%" y="175.50"></text></g><g><title>nn`nn::main (11,055 samples, 99.84%)</title><rect x="0.1355%" y="213" width="99.8374%" height="15" fill="rgb(241,25,7)" fg:x="15" fg:w="11055"/><text x="0.3855%" y="223.50">nn`nn::main</text></g><g><title>nn`tensor_rs::utils::merge_backward_ops (2 samples, 0.02%)</title><rect x="99.9548%" y="197" width="0.0181%" height="15" fill="rgb(242,119,39)" fg:x="11068" fg:w="2"/><text x="100.2048%" y="207.50"></text></g><g><title>nn`std::rt::lang_start::_{{closure}} (11,072 samples, 99.99%)</title><rect x="0.0000%" y="245" width="99.9910%" height="15" fill="rgb(241,98,45)" fg:x="0" fg:w="11072"/><text x="0.2500%" y="255.50">nn`std::rt::lang_start::_{{closure}}</text></g><g><title>nn`std::sys_common::backtrace::__rust_begin_short_backtrace (11,072 samples, 99.99%)</title><rect x="0.0000%" y="229" width="99.9910%" height="15" fill="rgb(254,28,30)" fg:x="0" fg:w="11072"/><text x="0.2500%" y="239.50">nn`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>all (11,073 samples, 100%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(241,142,54)" fg:x="0" fg:w="11073"/><text x="0.2500%" y="319.50"></text></g><g><title>dyld`start (11,073 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(222,85,15)" fg:x="0" fg:w="11073"/><text x="0.2500%" y="303.50">dyld`start</text></g><g><title>nn`main (11,073 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(210,85,47)" fg:x="0" fg:w="11073"/><text x="0.2500%" y="287.50">nn`main</text></g><g><title>nn`std::rt::lang_start_internal (11,073 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(224,206,25)" fg:x="0" fg:w="11073"/><text x="0.2500%" y="271.50">nn`std::rt::lang_start_internal</text></g></svg></svg>